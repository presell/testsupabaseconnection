// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oxby7mL3tramyYPU9d77Uw
// Component: 3Pcud6cfTeZ6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import Offer1 from "../../Offer1"; // plasmic-import: R4TVaxDPQDJT/component
import Collection1 from "../../Collection1"; // plasmic-import: 4uYPFFIR9cDi/component
import Collection1Cta from "../../Collection1Cta"; // plasmic-import: K9N9h_V9VXXi/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import { useScreenVariants as useScreenVariantscylgZgvvaF7G } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CYLGZgvvaF7G/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_offer_theme_1_component_css from "../offer_theme_1_component/plasmic_offer_theme_1_component.module.css"; // plasmic-import: 8JEXBqjqN3wJGHTHZ9qf9H/projectcss
import projectcss from "./plasmic_copy_of_feed_presell_ai.module.css"; // plasmic-import: oxby7mL3tramyYPU9d77Uw/projectcss
import sty from "./PlasmicCollection2.module.css"; // plasmic-import: 3Pcud6cfTeZ6/css

createPlasmicElementProxy;

export type PlasmicCollection2__VariantMembers = {};
export type PlasmicCollection2__VariantsArgs = {};
type VariantPropType = keyof PlasmicCollection2__VariantsArgs;
export const PlasmicCollection2__VariantProps = new Array<VariantPropType>();

export type PlasmicCollection2__ArgsType = {};
type ArgPropType = keyof PlasmicCollection2__ArgsType;
export const PlasmicCollection2__ArgProps = new Array<ArgPropType>();

export type PlasmicCollection2__OverridesType = {
  root?: p.Flex<"div">;
  httpRestApiFetcher?: p.Flex<typeof DataFetcher>;
  logo?: p.Flex<typeof p.PlasmicImg>;
  offer?: p.Flex<"div">;
  offer1?: p.Flex<typeof Offer1>;
  offerImage?: p.Flex<typeof p.PlasmicImg>;
  offerVariant1Url?: p.Flex<"a"> & Partial<LinkProps>;
  offerVariant1Image?: p.Flex<typeof p.PlasmicImg>;
  offerVariant1Label?: p.Flex<"div">;
  offerVariant2Url?: p.Flex<"a"> & Partial<LinkProps>;
  offerVariant2Image?: p.Flex<typeof p.PlasmicImg>;
  offerVariant2Label?: p.Flex<"div">;
  offerH1?: p.Flex<"div">;
  offerH2?: p.Flex<"div">;
  offerParagraph?: p.Flex<"div">;
  offerCta?: p.Flex<"div">;
  hiconsH1?: p.Flex<"div">;
  hiconsIcon1?: p.Flex<typeof p.PlasmicImg>;
  hiconsLabel1?: p.Flex<"div">;
  hiconsIcon2?: p.Flex<typeof p.PlasmicImg>;
  hiconsLabel2?: p.Flex<"div">;
  hiconsIcon3?: p.Flex<typeof p.PlasmicImg>;
  hiconsIcon4?: p.Flex<"div">;
  hiconsIcon5?: p.Flex<typeof p.PlasmicImg>;
  hiconsIcon6?: p.Flex<"div">;
  products?: p.Flex<"div">;
  embedHtml?: p.Flex<typeof Embed>;
};

export interface DefaultCollection2Props {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCollection2__RenderFunc(props: {
  variants: PlasmicCollection2__VariantsArgs;
  args: PlasmicCollection2__ArgsType;
  overrides: PlasmicCollection2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscylgZgvvaF7G()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_offer_theme_1_component_css.plasmic_tokens,
            sty.root
          )}
        >
          <DataFetcher
            data-plasmic-name={"httpRestApiFetcher"}
            data-plasmic-override={overrides.httpRestApiFetcher}
            className={classNames("__wab_instance", sty.httpRestApiFetcher)}
            dataName={"fetchDyanamicData" as const}
            errorDisplay={
              <ph.DataCtxReader>
                {$ctx => "Error fetching data"}
              </ph.DataCtxReader>
            }
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json",
              Authorization: "Bearer keyVDvhyVSx5Ntbl3"
            }}
            loadingDisplay={
              <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
            }
            method={"GET" as const}
            noLayout={false}
            url={(() => {
              try {
                return (
                  "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS?filterByFormula=slug=" +
                  "'" +
                  $ctx.params.slug +
                  "'"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "https://api.github.com/users/plasmicapp/repos";
                }
                throw e;
              }
            })()}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___61DxT)}
                  >
                    <p.PlasmicImg
                      data-plasmic-name={"logo"}
                      data-plasmic-override={overrides.logo}
                      alt={""}
                      className={classNames(sty.logo)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"50px" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_feed_presell_ai/images/logopng.png",
                        fullWidth: 276,
                        fullHeight: 46,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"offer"}
                    data-plasmic-override={overrides.offer}
                    className={classNames(projectcss.all, sty.offer)}
                  >
                    {true ? (
                      <Offer1
                        data-plasmic-name={"offer1"}
                        data-plasmic-override={overrides.offer1}
                        className={classNames("__wab_instance", sty.offer1)}
                        slot={
                          <React.Fragment>
                            <p.PlasmicLink
                              data-plasmic-name={"offerVariant1Url"}
                              data-plasmic-override={overrides.offerVariant1Url}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.offerVariant1Url
                              )}
                              component={Link}
                              href={
                                "https://shop.lifehacksplus.com/discount/FREE?redirect=/cart/39394788108:1,39394868748:1,39394817036:1?note=LHP-cw-offer-widget" as const
                              }
                              platform={"nextjs"}
                            >
                              <p.PlasmicImg
                                data-plasmic-name={"offerVariant1Image"}
                                data-plasmic-override={
                                  overrides.offerVariant1Image
                                }
                                alt={""}
                                className={classNames(sty.offerVariant1Image)}
                                displayHeight={"60px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"60px" as const}
                                loading={"lazy" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.offer_variant_image1[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "https://site-assets.plasmic.app/c63d1d2e518b2d80727ede4d7588f173.svg";
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            </p.PlasmicLink>
                            <div
                              data-plasmic-name={"offerVariant1Label"}
                              data-plasmic-override={
                                overrides.offerVariant1Label
                              }
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.offerVariant1Label
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.offer_variant_label1;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Strawberry";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </React.Fragment>
                        }
                        slot2={
                          <React.Fragment>
                            <p.PlasmicLink
                              data-plasmic-name={"offerVariant2Url"}
                              data-plasmic-override={overrides.offerVariant2Url}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.offerVariant2Url
                              )}
                              component={Link}
                              href={
                                "https://shop.lifehacksplus.com/discount/FREE?redirect=/cart/39394788236:1,39394868940:1,39394817164:1?discount=FREE&note=LHP-cw-offer-widget" as const
                              }
                              platform={"nextjs"}
                            >
                              <p.PlasmicImg
                                data-plasmic-name={"offerVariant2Image"}
                                data-plasmic-override={
                                  overrides.offerVariant2Image
                                }
                                alt={""}
                                className={classNames(sty.offerVariant2Image)}
                                displayHeight={"60px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"60px" as const}
                                loading={"lazy" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.offer_variant_image2[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "https://site-assets.plasmic.app/eac11844e4f24b6cdb55891eb5d2951d.svg";
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            </p.PlasmicLink>
                            <div
                              data-plasmic-name={"offerVariant2Label"}
                              data-plasmic-override={
                                overrides.offerVariant2Label
                              }
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.offerVariant2Label
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.offer_variant_label2;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Vanilla";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </React.Fragment>
                        }
                        slot3={
                          <div
                            data-plasmic-name={"offerH1"}
                            data-plasmic-override={overrides.offerH1}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.offerH1
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.offer_h1;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "SPECIAL OFFER";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        slot4={
                          <div
                            data-plasmic-name={"offerH2"}
                            data-plasmic-override={overrides.offerH2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.offerH2
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.offer_h2;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "FREE VITAMIN AIR";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        slot5={
                          <div
                            data-plasmic-name={"offerParagraph"}
                            data-plasmic-override={overrides.offerParagraph}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.offerParagraph
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.offer_paragraph;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Money-Back Guarantee: Better Flavor & Harder Hits or Your Money Back.";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        slot6={
                          <div
                            data-plasmic-name={"offerCta"}
                            data-plasmic-override={overrides.offerCta}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.offerCta
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.offer_cta;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "CHOOSE FLAVOR";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___5ThRh
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"offerImage"}
                            data-plasmic-override={overrides.offerImage}
                            alt={""}
                            className={classNames(sty.offerImage)}
                            displayHeight={"423px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields
                                  .offer_image[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://site-assets.plasmic.app/6187c6867888745d6599b0c2b977be87.svg";
                                }
                                throw e;
                              }
                            })()}
                          />
                        </p.PlasmicLink>
                      </Offer1>
                    ) : null}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bsSy)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hdBte
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qqIc2
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__miLiz)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("100%" as const)
                                  : ("auto" as const)
                              }
                              displayMaxHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("none" as const)
                                  : ("425px" as const)
                              }
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={"eager" as const}
                              src={(() => {
                                try {
                                  return $ctx.fetchedData.records[0].fields
                                    .offer_image[0].url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "https://site-assets.plasmic.app/3953bb4d0c4e841edc565fe320ed09af.png";
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__maolz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qSkHq
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchedData.records[0].fields
                                    .offer_h1;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "SPECIAL OFFER";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchedData.records[0].fields
                                    .offer_h1;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "SPECIAL OFFER";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pKcC
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.records[0].fields
                                  .offer_h2;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "FREE VITAMIN AIR";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hrDf1
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.records[0].fields
                                  .offer_paragraph;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Money-Back Guarantee: Better Flavor & Harder Hits or Your Money Back.";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__moRwd
                          )}
                          component={Link}
                          href={(() => {
                            try {
                              return $ctx.fetchedData.records[0].fields[
                                "Step 2 URL"
                              ];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          platform={"nextjs"}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.records[0].fields
                                  .offer_cta;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "CHOOSE FLAVOR";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </p.PlasmicLink>
                      </div>
                    </div>
                  </div>
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6PcNx
                      )}
                    >
                      <div
                        data-plasmic-name={"hiconsH1"}
                        data-plasmic-override={overrides.hiconsH1}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.hiconsH1
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.fetchDyanamicData.records[0].fields
                                .hicons_h1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "BREATHE VITAMIN AIR®";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mvyqR
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sbKpT
                          )}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"hiconsIcon1"}
                            data-plasmic-override={overrides.hiconsIcon1}
                            alt={""}
                            className={classNames(sty.hiconsIcon1)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields
                                  .hicons_icon1[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://site-assets.plasmic.app/6e42147b488b5ca87759208eede507e2.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            data-plasmic-name={"hiconsLabel1"}
                            data-plasmic-override={overrides.hiconsLabel1}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.hiconsLabel1
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.hicons_label_1;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "0% Nicotine";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oNghn
                          )}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"hiconsIcon2"}
                            data-plasmic-override={overrides.hiconsIcon2}
                            alt={""}
                            className={classNames(sty.hiconsIcon2)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields
                                  .hicons_icon_2[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://site-assets.plasmic.app/9d995ea0affc51c4faaeacafd85b5294.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            data-plasmic-name={"hiconsLabel2"}
                            data-plasmic-override={overrides.hiconsLabel2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.hiconsLabel2
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.hicons_label_2;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Lab-Tested";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tbHra
                          )}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"hiconsIcon3"}
                            data-plasmic-override={overrides.hiconsIcon3}
                            alt={""}
                            className={classNames(sty.hiconsIcon3)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields
                                  .hicons_icon_3[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://site-assets.plasmic.app/c7ff4dd82964e5ed55ed8e02cffad8aa.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            data-plasmic-name={"hiconsIcon4"}
                            data-plasmic-override={overrides.hiconsIcon4}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.hiconsIcon4
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.hicons_label_3;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Vitamins";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__toRCv
                          )}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"hiconsIcon5"}
                            data-plasmic-override={overrides.hiconsIcon5}
                            alt={""}
                            className={classNames(sty.hiconsIcon5)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields
                                  .hicons_icon_4[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://site-assets.plasmic.app/5c825a2405e0e04e2cec44d1082488b6.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            data-plasmic-name={"hiconsIcon6"}
                            data-plasmic-override={overrides.hiconsIcon6}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.hiconsIcon6
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.hicons_label_4;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Recyclable";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"products"}
                    data-plasmic-override={overrides.products}
                    className={classNames(projectcss.all, sty.products)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__pyuZv)}
                    >
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.column__aaYW
                        )}
                        component={Link}
                        href={
                          "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/3-pack?variant=31099464122437" as const
                        }
                        platform={"nextjs"}
                      >
                        <Collection1
                          className={classNames(
                            "__wab_instance",
                            sty.collection1___5XWaS
                          )}
                          slot9={"$56"}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___7Qjpq)}
                            displayHeight={"441px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"387px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/copy_of_feed_presell_ai/images/_3PacKsvg.svg",
                              fullWidth: 131,
                              fullHeight: 150,
                              aspectRatio: 0.875566
                            }}
                          />
                        </Collection1>
                        <Collection1Cta
                          className={classNames(
                            "__wab_instance",
                            sty.collection1Cta__yfUR
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nDvgu
                            )}
                          >
                            {"SHOP NOW"}
                          </div>
                        </Collection1Cta>
                      </p.PlasmicLink>
                      {true ? (
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.column__gE7C
                          )}
                          component={Link}
                          href={
                            "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/variety-pack" as const
                          }
                          platform={"nextjs"}
                        >
                          <Collection1
                            className={classNames(
                              "__wab_instance",
                              sty.collection1___2Gt8M
                            )}
                            slot={"VARIETY PACK"}
                            slot9={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__g2EH
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>{"$98 "}</React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ color: "#FF0000" }}
                                  >
                                    {"+ FREE SHIPPING"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__xYzop)}
                              displayHeight={"441px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"387px" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_feed_presell_ai/images/varietYsvg.svg",
                                fullWidth: 131,
                                fullHeight: 150,
                                aspectRatio: 0.87471
                              }}
                            />
                          </Collection1>
                          <Collection1Cta
                            className={classNames(
                              "__wab_instance",
                              sty.collection1Cta___1GHtS
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__os3X7
                              )}
                            >
                              {"SHOP NOW"}
                            </div>
                          </Collection1Cta>
                        </p.PlasmicLink>
                      ) : null}
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.column__bcTX
                        )}
                        component={Link}
                        href={
                          "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/fuel?variant=39394788108" as const
                        }
                        platform={"nextjs"}
                      >
                        <Collection1
                          className={classNames(
                            "__wab_instance",
                            sty.collection1__iGyCq
                          )}
                          slot={"FUEL"}
                          slot3={"Energy-Enhancing"}
                          slot9={"$20"}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___2AsgP)}
                            displayHeight={"441px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"387px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/copy_of_feed_presell_ai/images/fueLsvg.svg",
                              fullWidth: 132,
                              fullHeight: 150,
                              aspectRatio: 0.877551
                            }}
                          />
                        </Collection1>
                        <Collection1Cta
                          className={classNames(
                            "__wab_instance",
                            sty.collection1Cta__qnh3
                          )}
                        />
                      </p.PlasmicLink>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.columns__nbFv)}
                    >
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.column__qt9Vi
                        )}
                        component={Link}
                        href={
                          "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/pure?variant=39394817036" as const
                        }
                        platform={"nextjs"}
                      >
                        <Collection1
                          className={classNames(
                            "__wab_instance",
                            sty.collection1__ebEix
                          )}
                          slot={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jTCzP
                              )}
                            >
                              {"PURE"}
                            </div>
                          }
                          slot3={"Age-Defying"}
                          slot9={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ykJD
                              )}
                            >
                              {"$20"}
                            </div>
                          }
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__pN2S0)}
                            displayHeight={"441px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"387px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/copy_of_feed_presell_ai/images/purEsvg.svg",
                              fullWidth: 132,
                              fullHeight: 150,
                              aspectRatio: 0.877551
                            }}
                          />
                        </Collection1>
                        <Collection1Cta
                          className={classNames(
                            "__wab_instance",
                            sty.collection1Cta__iWfw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7GAo
                            )}
                          >
                            {"SHOP NOW"}
                          </div>
                        </Collection1Cta>
                      </p.PlasmicLink>
                      {true ? (
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.column__ziix9
                          )}
                          component={Link}
                          href={
                            "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/melt?variant=39394868748" as const
                          }
                          platform={"nextjs"}
                        >
                          <Collection1
                            className={classNames(
                              "__wab_instance",
                              sty.collection1__mTfqO
                            )}
                            slot={"MELT"}
                            slot3={"Metabolism-Boosting"}
                            slot9={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__e3J5Q
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ color: "#000000" }}
                                  >
                                    {"$20"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__dn7VF)}
                              displayHeight={"441px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"387px" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_feed_presell_ai/images/melTsvg.svg",
                                fullWidth: 132,
                                fullHeight: 150,
                                aspectRatio: 0.877551
                              }}
                            />
                          </Collection1>
                          <Collection1Cta
                            className={classNames(
                              "__wab_instance",
                              sty.collection1Cta__wNdkA
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tbCSl
                              )}
                            >
                              {"SHOP NOW"}
                            </div>
                          </Collection1Cta>
                        </p.PlasmicLink>
                      ) : null}
                      {true ? (
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.column__kxDf
                          )}
                          component={Link}
                          href={
                            "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/fuel?variant=39394788108" as const
                          }
                          platform={"nextjs"}
                        >
                          <Collection1
                            className={classNames(
                              "__wab_instance",
                              sty.collection1__sxcH9
                            )}
                            slot={"FUEL"}
                            slot3={"Energy-Enhancing"}
                            slot9={"$20"}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__sqzR)}
                              displayHeight={"441px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"387px" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_feed_presell_ai/images/fueLsvg.svg",
                                fullWidth: 132,
                                fullHeight: 150,
                                aspectRatio: 0.877551
                              }}
                            />
                          </Collection1>
                          <Collection1Cta
                            className={classNames(
                              "__wab_instance",
                              sty.collection1Cta___6RP9E
                            )}
                          />
                        </p.PlasmicLink>
                      ) : null}
                    </div>
                  </div>
                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                    code={(() => {
                      try {
                        return $ctx.fetchDyanamicData.records[0].fields[
                          "scripts (from Brands)"
                        ][0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </DataFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "httpRestApiFetcher",
    "logo",
    "offer",
    "offer1",
    "offerImage",
    "offerVariant1Url",
    "offerVariant1Image",
    "offerVariant1Label",
    "offerVariant2Url",
    "offerVariant2Image",
    "offerVariant2Label",
    "offerH1",
    "offerH2",
    "offerParagraph",
    "offerCta",
    "hiconsH1",
    "hiconsIcon1",
    "hiconsLabel1",
    "hiconsIcon2",
    "hiconsLabel2",
    "hiconsIcon3",
    "hiconsIcon4",
    "hiconsIcon5",
    "hiconsIcon6",
    "products",
    "embedHtml"
  ],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "logo",
    "offer",
    "offer1",
    "offerImage",
    "offerVariant1Url",
    "offerVariant1Image",
    "offerVariant1Label",
    "offerVariant2Url",
    "offerVariant2Image",
    "offerVariant2Label",
    "offerH1",
    "offerH2",
    "offerParagraph",
    "offerCta",
    "hiconsH1",
    "hiconsIcon1",
    "hiconsLabel1",
    "hiconsIcon2",
    "hiconsLabel2",
    "hiconsIcon3",
    "hiconsIcon4",
    "hiconsIcon5",
    "hiconsIcon6",
    "products",
    "embedHtml"
  ],
  logo: ["logo"],
  offer: [
    "offer",
    "offer1",
    "offerImage",
    "offerVariant1Url",
    "offerVariant1Image",
    "offerVariant1Label",
    "offerVariant2Url",
    "offerVariant2Image",
    "offerVariant2Label",
    "offerH1",
    "offerH2",
    "offerParagraph",
    "offerCta"
  ],
  offer1: [
    "offer1",
    "offerImage",
    "offerVariant1Url",
    "offerVariant1Image",
    "offerVariant1Label",
    "offerVariant2Url",
    "offerVariant2Image",
    "offerVariant2Label",
    "offerH1",
    "offerH2",
    "offerParagraph",
    "offerCta"
  ],
  offerImage: ["offerImage"],
  offerVariant1Url: ["offerVariant1Url", "offerVariant1Image"],
  offerVariant1Image: ["offerVariant1Image"],
  offerVariant1Label: ["offerVariant1Label"],
  offerVariant2Url: ["offerVariant2Url", "offerVariant2Image"],
  offerVariant2Image: ["offerVariant2Image"],
  offerVariant2Label: ["offerVariant2Label"],
  offerH1: ["offerH1"],
  offerH2: ["offerH2"],
  offerParagraph: ["offerParagraph"],
  offerCta: ["offerCta"],
  hiconsH1: ["hiconsH1"],
  hiconsIcon1: ["hiconsIcon1"],
  hiconsLabel1: ["hiconsLabel1"],
  hiconsIcon2: ["hiconsIcon2"],
  hiconsLabel2: ["hiconsLabel2"],
  hiconsIcon3: ["hiconsIcon3"],
  hiconsIcon4: ["hiconsIcon4"],
  hiconsIcon5: ["hiconsIcon5"],
  hiconsIcon6: ["hiconsIcon6"],
  products: ["products"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpRestApiFetcher: typeof DataFetcher;
  logo: typeof p.PlasmicImg;
  offer: "div";
  offer1: typeof Offer1;
  offerImage: typeof p.PlasmicImg;
  offerVariant1Url: "a";
  offerVariant1Image: typeof p.PlasmicImg;
  offerVariant1Label: "div";
  offerVariant2Url: "a";
  offerVariant2Image: typeof p.PlasmicImg;
  offerVariant2Label: "div";
  offerH1: "div";
  offerH2: "div";
  offerParagraph: "div";
  offerCta: "div";
  hiconsH1: "div";
  hiconsIcon1: typeof p.PlasmicImg;
  hiconsLabel1: "div";
  hiconsIcon2: typeof p.PlasmicImg;
  hiconsLabel2: "div";
  hiconsIcon3: typeof p.PlasmicImg;
  hiconsIcon4: "div";
  hiconsIcon5: typeof p.PlasmicImg;
  hiconsIcon6: "div";
  products: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCollection2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCollection2__VariantsArgs;
    args?: PlasmicCollection2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCollection2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCollection2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCollection2__ArgProps,
          internalVariantPropNames: PlasmicCollection2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCollection2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCollection2";
  } else {
    func.displayName = `PlasmicCollection2.${nodeName}`;
  }
  return func;
}

export const PlasmicCollection2 = Object.assign(
  // Top-level PlasmicCollection2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    logo: makeNodeComponent("logo"),
    offer: makeNodeComponent("offer"),
    offer1: makeNodeComponent("offer1"),
    offerImage: makeNodeComponent("offerImage"),
    offerVariant1Url: makeNodeComponent("offerVariant1Url"),
    offerVariant1Image: makeNodeComponent("offerVariant1Image"),
    offerVariant1Label: makeNodeComponent("offerVariant1Label"),
    offerVariant2Url: makeNodeComponent("offerVariant2Url"),
    offerVariant2Image: makeNodeComponent("offerVariant2Image"),
    offerVariant2Label: makeNodeComponent("offerVariant2Label"),
    offerH1: makeNodeComponent("offerH1"),
    offerH2: makeNodeComponent("offerH2"),
    offerParagraph: makeNodeComponent("offerParagraph"),
    offerCta: makeNodeComponent("offerCta"),
    hiconsH1: makeNodeComponent("hiconsH1"),
    hiconsIcon1: makeNodeComponent("hiconsIcon1"),
    hiconsLabel1: makeNodeComponent("hiconsLabel1"),
    hiconsIcon2: makeNodeComponent("hiconsIcon2"),
    hiconsLabel2: makeNodeComponent("hiconsLabel2"),
    hiconsIcon3: makeNodeComponent("hiconsIcon3"),
    hiconsIcon4: makeNodeComponent("hiconsIcon4"),
    hiconsIcon5: makeNodeComponent("hiconsIcon5"),
    hiconsIcon6: makeNodeComponent("hiconsIcon6"),
    products: makeNodeComponent("products"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicCollection2
    internalVariantProps: PlasmicCollection2__VariantProps,
    internalArgProps: PlasmicCollection2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCollection2;
/* prettier-ignore-end */
