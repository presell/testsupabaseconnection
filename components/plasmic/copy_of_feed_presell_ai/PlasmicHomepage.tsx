// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oxby7mL3tramyYPU9d77Uw
// Component: 1fpTsSSCiL49

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import Button from "../../Button"; // plasmic-import: yMoBdfbbg__/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import { useScreenVariants as useScreenVariantscylgZgvvaF7G } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CYLGZgvvaF7G/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_offer_theme_1_component_css from "../offer_theme_1_component/plasmic_offer_theme_1_component.module.css"; // plasmic-import: 8JEXBqjqN3wJGHTHZ9qf9H/projectcss
import projectcss from "./plasmic_copy_of_feed_presell_ai.module.css"; // plasmic-import: oxby7mL3tramyYPU9d77Uw/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 1fpTsSSCiL49/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: sjZzIvGN1Ocq/icon
import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: vW99545MxFrr/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  httpRestApiFetcher?: p.Flex<typeof DataFetcher>;
  h4?: p.Flex<"h4">;
  button?: p.Flex<typeof Button>;
  embedHtml?: p.Flex<typeof Embed>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscylgZgvvaF7G()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_offer_theme_1_component_css.plasmic_tokens,
              sty.root
            )}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___3F0Ff)}>
                <div className={classNames(projectcss.all, sty.freeBox__dzbg8)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kqrQv)}
                  >
                    <DataFetcher
                      data-plasmic-name={"httpRestApiFetcher"}
                      data-plasmic-override={overrides.httpRestApiFetcher}
                      className={classNames(
                        "__wab_instance",
                        sty.httpRestApiFetcher
                      )}
                      dataName={"fetchedData" as const}
                      errorDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Error fetching data"}
                        </ph.DataCtxReader>
                      }
                      headers={{
                        "Content-Type": "application/json",
                        Accept: "application/json",
                        Authorization: "Bearer keyVDvhyVSx5Ntbl3"
                      }}
                      loadingDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Loading..."}
                        </ph.DataCtxReader>
                      }
                      method={"GET" as const}
                      noLayout={false}
                      url={
                        "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS " as const
                      }
                    >
                      <ph.DataCtxReader>
                        {$ctx => (
                          <React.Fragment>
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.columns__ojZSy
                              )}
                            >
                              {(
                                (() => {
                                  try {
                                    return $ctx.fetchedData.records;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })() ?? []
                              ).map((currentItem, currentIndex) => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__v2JpA
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.columns___331Em
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__bqPWh
                                      )}
                                    >
                                      <p.PlasmicImg
                                        alt={""}
                                        className={classNames(sty.img___9UBkw)}
                                        displayHeight={"100%" as const}
                                        displayMaxHeight={"none" as const}
                                        displayMaxWidth={"100%" as const}
                                        displayMinHeight={"0" as const}
                                        displayMinWidth={"0" as const}
                                        displayWidth={"100%" as const}
                                        loading={"lazy" as const}
                                        src={(() => {
                                          try {
                                            return currentItem.fields
                                              .heroImage[0].url;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "https://site-assets.plasmic.app/c66d37fd7c3b428bab7c10b83a77c7c8.jpg";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.column__uStxJ
                                      )}
                                    >
                                      <p.PlasmicImg
                                        alt={""}
                                        className={classNames(sty.img__w4Xbk)}
                                        displayHeight={"auto" as const}
                                        displayMaxHeight={"none" as const}
                                        displayMaxWidth={"100%" as const}
                                        displayMinHeight={"0" as const}
                                        displayMinWidth={"0" as const}
                                        displayWidth={"auto" as const}
                                        loading={"lazy" as const}
                                        src={(() => {
                                          try {
                                            return currentItem.fields.logo[0]
                                              .url;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__cKmP1
                                        )}
                                      >
                                        <h4
                                          data-plasmic-name={"h4"}
                                          data-plasmic-override={overrides.h4}
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.h4,
                                            projectcss.__wab_text,
                                            sty.h4
                                          )}
                                        >
                                          {hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          ) ? (
                                            "Customer Loyalty Programs That Stick"
                                          ) : (
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.fields
                                                    .heroHeadline;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "Blog heading dummy";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          )}
                                        </h4>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___2CJv2
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.fields
                                                  .heroSubHeadline;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor ...";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        {true ? (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__iSAta
                                            )}
                                          >
                                            <Button
                                              data-plasmic-name={"button"}
                                              data-plasmic-override={
                                                overrides.button
                                              }
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button
                                              )}
                                              color={"blue" as const}
                                              endIcon={
                                                <ArrowRightsvgIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg___7NMa5
                                                  )}
                                                  role={"img"}
                                                />
                                              }
                                              link={`/article/1/${(() => {
                                                try {
                                                  return currentItem.fields
                                                    .slug;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "article-1";
                                                  }
                                                  throw e;
                                                }
                                              })()}`}
                                              shape={"rounded" as const}
                                              showEndIcon={true}
                                              startIcon={
                                                <ChecksvgIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__aaeeD
                                                  )}
                                                  role={"img"}
                                                />
                                              }
                                              submitsForm={true}
                                            >
                                              <p.PlasmicLink
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.a,
                                                  projectcss.__wab_text,
                                                  sty.link___1IMQo
                                                )}
                                                component={Link}
                                                href={`/article/1/${(() => {
                                                  try {
                                                    return currentItem.fields
                                                      .slug;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "rec2g2aZndnbC3igs";
                                                    }
                                                    throw e;
                                                  }
                                                })()}`}
                                                platform={"nextjs"}
                                              >
                                                {"Article-1"}
                                              </p.PlasmicLink>
                                            </Button>
                                          </div>
                                        ) : null}
                                        <p.PlasmicLink
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.a,
                                            projectcss.__wab_text,
                                            sty.link__dLuP
                                          )}
                                          component={Link}
                                          href={`/squeeze/1/${(() => {
                                            try {
                                              return currentItem.fields.slug;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "recv3gYlFYc1L0KHG";
                                              }
                                              throw e;
                                            }
                                          })()}`}
                                          platform={"nextjs"}
                                        >
                                          {"Squeez"}
                                        </p.PlasmicLink>
                                        <p.PlasmicLink
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.a,
                                            projectcss.__wab_text,
                                            sty.link__keu4J
                                          )}
                                          component={Link}
                                          href={`/book/${(() => {
                                            try {
                                              return currentItem.fields.slug;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "article-1";
                                              }
                                              throw e;
                                            }
                                          })()}`}
                                          platform={"nextjs"}
                                        >
                                          {"Book"}
                                        </p.PlasmicLink>
                                        <p.PlasmicLink
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.a,
                                            projectcss.__wab_text,
                                            sty.link___8GxGm
                                          )}
                                          component={Link}
                                          href={`/collection/${(() => {
                                            try {
                                              return currentItem.fields.slug;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "article-1";
                                              }
                                              throw e;
                                            }
                                          })()}`}
                                          platform={"nextjs"}
                                        >
                                          {"Collection"}
                                        </p.PlasmicLink>
                                        <p.PlasmicLink
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.a,
                                            projectcss.__wab_text,
                                            sty.link__h8WyX
                                          )}
                                          component={Link}
                                          platform={"nextjs"}
                                        >
                                          {"Article-2"}
                                        </p.PlasmicLink>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              ))}

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__hggN9
                                )}
                              />
                            </p.Stack>
                            <Embed
                              data-plasmic-name={"embedHtml"}
                              data-plasmic-override={overrides.embedHtml}
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml
                              )}
                              code={(() => {
                                try {
                                  return $ctx.fetchedData.records[32].fields[
                                    "scripts (from Brands)"
                                  ][0];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </React.Fragment>
                        )}
                      </ph.DataCtxReader>
                    </DataFetcher>
                  </div>
                </div>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__gTvOf)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gije)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6MQOj
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__nqV4I)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ns633
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xXmb9
                            )}
                          >
                            {"Advertorial Theme 1"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qrz8K
                            )}
                          >
                            {"Enter some text"}
                          </div>
                        </div>
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8T7Ko
                            )}
                          >
                            {"Enter some text"}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "httpRestApiFetcher", "h4", "button", "embedHtml"],
  httpRestApiFetcher: ["httpRestApiFetcher", "h4", "button", "embedHtml"],
  h4: ["h4"],
  button: ["button"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpRestApiFetcher: typeof DataFetcher;
  h4: "h4";
  button: typeof Button;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    h4: makeNodeComponent("h4"),
    button: makeNodeComponent("button"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
