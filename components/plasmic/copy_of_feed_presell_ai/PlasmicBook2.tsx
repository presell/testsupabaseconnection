// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oxby7mL3tramyYPU9d77Uw
// Component: Wtu2hHV-C_7Q

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import { useScreenVariants as useScreenVariantscylgZgvvaF7G } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CYLGZgvvaF7G/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_offer_theme_1_component_css from "../offer_theme_1_component/plasmic_offer_theme_1_component.module.css"; // plasmic-import: 8JEXBqjqN3wJGHTHZ9qf9H/projectcss
import projectcss from "./plasmic_copy_of_feed_presell_ai.module.css"; // plasmic-import: oxby7mL3tramyYPU9d77Uw/projectcss
import sty from "./PlasmicBook2.module.css"; // plasmic-import: Wtu2hHV-C_7Q/css

import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: bGBEAPi1FWgjz/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: ZHu8cCKZexS4p/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: PCfXgJKSynGwl/icon

createPlasmicElementProxy;

export type PlasmicBook2__VariantMembers = {};
export type PlasmicBook2__VariantsArgs = {};
type VariantPropType = keyof PlasmicBook2__VariantsArgs;
export const PlasmicBook2__VariantProps = new Array<VariantPropType>();

export type PlasmicBook2__ArgsType = {};
type ArgPropType = keyof PlasmicBook2__ArgsType;
export const PlasmicBook2__ArgProps = new Array<ArgPropType>();

export type PlasmicBook2__OverridesType = {
  root?: p.Flex<"div">;
  httpRestApiFetcher?: p.Flex<typeof DataFetcher>;
  desktop?: p.Flex<"div">;
  logo?: p.Flex<typeof p.PlasmicImg>;
  squeezeNav?: p.Flex<"div">;
  squeezeC1H1?: p.Flex<"div">;
  squeezeC1H2?: p.Flex<"div">;
  squeezeC2Thumbnail?: p.Flex<typeof p.PlasmicImg>;
  squeezeC2H1?: p.Flex<"div">;
  squeezeC2H12?: p.Flex<"div">;
  iconValue1?: p.Flex<"div">;
  squeezeC2Icon1?: p.Flex<typeof p.PlasmicImg>;
  squeezeC2Icon1Value1?: p.Flex<"div">;
  iconValue2?: p.Flex<"div">;
  squeezeC2Icon2?: p.Flex<typeof p.PlasmicImg>;
  squeezeC2Icon1Value2?: p.Flex<"div">;
  iconValue3?: p.Flex<"div">;
  squeezeC2Icon3?: p.Flex<typeof p.PlasmicImg>;
  squeezeC2Icon1Value3?: p.Flex<"div">;
  squeezeC2CtaH1?: p.Flex<"div">;
  squeezeC2CtaH2?: p.Flex<"div">;
  squeezeC2Proof?: p.Flex<"div">;
  squeezeC2OfferH1?: p.Flex<"div">;
  squeezeC2OfferThumbnail?: p.Flex<typeof p.PlasmicImg>;
  squeezeC2ValueH1?: p.Flex<"div">;
  squeezeC2ValueH2?: p.Flex<"div">;
  squeezeC2ValueH3?: p.Flex<"div">;
  mobile?: p.Flex<"div">;
  logo3?: p.Flex<typeof p.PlasmicImg>;
  squeezeC2Thumbnail2?: p.Flex<typeof p.PlasmicImg>;
  squeezeC2H13?: p.Flex<"div">;
  squeezeC2H14?: p.Flex<"div">;
  iconValue4?: p.Flex<"div">;
  squeezeC2Icon12?: p.Flex<typeof p.PlasmicImg>;
  squeezeC2Icon1Value12?: p.Flex<"div">;
  iconValue5?: p.Flex<"div">;
  squeezeC2Icon22?: p.Flex<typeof p.PlasmicImg>;
  squeezeC2Icon1Value22?: p.Flex<"div">;
  iconValue6?: p.Flex<"div">;
  squeezeC2Icon32?: p.Flex<typeof p.PlasmicImg>;
  squeezeC2Icon1Value32?: p.Flex<"div">;
  squeezeC2CtaH12?: p.Flex<"div">;
  squeezeC2CtaH22?: p.Flex<"div">;
  squeezeC2Proof2?: p.Flex<"div">;
  squeezeC2OfferH12?: p.Flex<"div">;
  squeezeC2OfferThumbnail2?: p.Flex<typeof p.PlasmicImg>;
  squeezeC2ValueH12?: p.Flex<"div">;
  squeezeC2ValueH22?: p.Flex<"div">;
  squeezeC2ValueH32?: p.Flex<"div">;
  logo2?: p.Flex<typeof p.PlasmicImg>;
  squeezeNav2?: p.Flex<"div">;
  squeezeC1H12?: p.Flex<"div">;
  squeezeC1H22?: p.Flex<"div">;
  discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4?: p.Flex<"div">;
  divlpPomRoot?: p.Flex<"div">;
  divlpPomBlock11?: p.Flex<"div">;
  divlpPomBlock21?: p.Flex<"div">;
  divlpPositionedContent?: p.Flex<"div">;
  divlpPomBox32?: p.Flex<"div">;
  divlpPomForm19?: p.Flex<"div">;
  inputfirstname?: p.Flex<"div">;
  divplaceholder?: p.Flex<"div">;
  yourFirstName?: p.Flex<"div">;
  inputlastname?: p.Flex<"div">;
  divplaceholder2?: p.Flex<"div">;
  yourLastName?: p.Flex<"div">;
  inputemail?: p.Flex<"div">;
  divplaceholder3?: p.Flex<"div">;
  yourEmailAddress?: p.Flex<"div">;
  inputphone?: p.Flex<"div">;
  divplaceholder4?: p.Flex<"div">;
  yourPhoneNumber?: p.Flex<"div">;
  divcontainerQualification?: p.Flex<"div">;
  yourQualification?: p.Flex<"div">;
  selectqualification?: p.Flex<"div">;
  div?: p.Flex<"div">;
  nurseRnOrNp?: p.Flex<"div">;
  buttonlpPomButton20?: p.Flex<"div">;
  _continue?: p.Flex<"div">;
  divlpPomBox26?: p.Flex<"div">;
  divlpPomImageContainer?: p.Flex<"div">;
  _6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png?: p.Flex<"div">;
  divlpPomImageContainer2?: p.Flex<"div">;
  c510588BTrainingCenterGifPreview2Gif?: p.Flex<"div">;
  divlpPomBox46?: p.Flex<"div">;
  divlpPomImageContainer3?: p.Flex<"div">;
  d33EfddcPinkChecksvg?: p.Flex<"div">;
  d33EfddcPinkChecksvg2?: p.Flex<"div">;
  learnFacialAnatomyBotulinumToxinScience?: p.Flex<"div">;
  divlpPomBox52?: p.Flex<"div">;
  divlpPomImageContainer4?: p.Flex<"div">;
  d33EfddcPinkChecksvg3?: p.Flex<"div">;
  d33EfddcPinkChecksvg4?: p.Flex<"div">;
  smallClassSizeWithDedicated11Support?: p.Flex<"div">;
  divlpPomBox55?: p.Flex<"div">;
  divlpPomImageContainer5?: p.Flex<"div">;
  d33EfddcPinkChecksvg5?: p.Flex<"div">;
  d33EfddcPinkChecksvg6?: p.Flex<"div">;
  strong?: p.Flex<"div">;
  divlpPomImageContainer6?: p.Flex<"div">;
  _3628940ACheckoutTrainingCenterPart210El08G000000000000028Png?: p.Flex<"div">;
  divlpPomImageContainer7?: p.Flex<"div">;
  c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png?: p.Flex<"div">;
  getPricingDetails?: p.Flex<"div">;
  divlpPomImageContainer8?: p.Flex<"div">;
  _046F157ALogo250X104X01P04X01L000002028Png?: p.Flex<"div">;
  span?: p.Flex<"div">;
  submitToRequestAdditionalInformation?: p.Flex<"div">;
  divlpPomBox33?: p.Flex<"div">;
  p?: p.Flex<"div">;
  iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg?: p.Flex<"div">;
  cartRemindersAtThePhoneNumberProvidedConsentIsNotA?: p.Flex<"div">;
  conditionToPurchaseMsgDataRatesMayApplyMsgFrequency?: p.Flex<"div">;
  variesReplyHelpForHelpAndStopToCancelViewOurPrivacy?: p.Flex<"div">;
  policyAndTermsOfService?: p.Flex<"div">;
};

export interface DefaultBook2Props {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBook2__RenderFunc(props: {
  variants: PlasmicBook2__VariantsArgs;
  args: PlasmicBook2__ArgsType;
  overrides: PlasmicBook2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscylgZgvvaF7G()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_offer_theme_1_component_css.plasmic_tokens,
            sty.root
          )}
        >
          <DataFetcher
            data-plasmic-name={"httpRestApiFetcher"}
            data-plasmic-override={overrides.httpRestApiFetcher}
            className={classNames("__wab_instance", sty.httpRestApiFetcher)}
            dataName={"fetchDyanamicData" as const}
            errorDisplay={
              <ph.DataCtxReader>
                {$ctx => "Error fetching data"}
              </ph.DataCtxReader>
            }
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json",
              Authorization: "Bearer keyVDvhyVSx5Ntbl3"
            }}
            loadingDisplay={
              <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
            }
            method={"GET" as const}
            noLayout={false}
            url={(() => {
              try {
                return (
                  "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS?filterByFormula=slug=" +
                  "'" +
                  $ctx.params.slug +
                  "'"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS?filterByFormula=slug=";
                }
                throw e;
              }
            })()}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      data-plasmic-name={"desktop"}
                      data-plasmic-override={overrides.desktop}
                      className={classNames(projectcss.all, sty.desktop)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__txx3E
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__fYf4W
                          )}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"logo"}
                            data-plasmic-override={overrides.logo}
                            alt={""}
                            className={classNames(sty.logo)}
                            displayHeight={"auto" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"175px" as const}
                            loading={"eager" as const}
                            src={
                              $ctx.fetchDyanamicData.records[0].fields.logo[0]
                                .url
                            }
                          />

                          <div
                            data-plasmic-name={"squeezeNav"}
                            data-plasmic-override={overrides.squeezeNav}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.squeezeNav
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.squeeze_c1_nav;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Unlock Discount > Easy Checkout ";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"squeezeC1H1"}
                            data-plasmic-override={overrides.squeezeC1H1}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.squeezeC1H1
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.squeeze_c1_h1;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Get Pricing Details";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"squeezeC1H2"}
                            data-plasmic-override={overrides.squeezeC1H2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.squeezeC1H2
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.squeeze_c1_h2;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Submit to Request Additional Information";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yxYpm
                            )}
                          >
                            <Embed
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml__nTygd
                              )}
                              code={(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields["Custom Embed"];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__eYy6Q
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___6JeGe
                            )}
                          >
                            <p.PlasmicImg
                              data-plasmic-name={"squeezeC2Thumbnail"}
                              data-plasmic-override={
                                overrides.squeezeC2Thumbnail
                              }
                              alt={""}
                              className={classNames(sty.squeezeC2Thumbnail)}
                              displayHeight={"auto" as const}
                              displayMaxHeight={"190px" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"173px" as const}
                              loading={"eager" as const}
                              src={(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.squeeze_c2_thumbnail[0].url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__q8VPq
                              )}
                            >
                              <div
                                data-plasmic-name={"squeezeC2H1"}
                                data-plasmic-override={overrides.squeezeC2H1}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2H1
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_h1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Main Headline Goes Here";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                data-plasmic-name={"squeezeC2H12"}
                                data-plasmic-override={overrides.squeezeC2H12}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2H12
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_h2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Secondary Headline Goes Here";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yJo0F
                            )}
                          />

                          <div
                            data-plasmic-name={"iconValue1"}
                            data-plasmic-override={overrides.iconValue1}
                            className={classNames(
                              projectcss.all,
                              sty.iconValue1
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xvv8N
                              )}
                            >
                              <p.PlasmicImg
                                data-plasmic-name={"squeezeC2Icon1"}
                                data-plasmic-override={overrides.squeezeC2Icon1}
                                alt={""}
                                className={classNames(sty.squeezeC2Icon1)}
                                displayHeight={"40px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"40px" as const}
                                loading={"eager" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.squeeze_c2_icon1[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                data-plasmic-name={"squeezeC2Icon1Value1"}
                                data-plasmic-override={
                                  overrides.squeezeC2Icon1Value1
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2Icon1Value1
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_icon1_value1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Icon Value 1";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"iconValue2"}
                            data-plasmic-override={overrides.iconValue2}
                            className={classNames(
                              projectcss.all,
                              sty.iconValue2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__w2J
                              )}
                            >
                              <p.PlasmicImg
                                data-plasmic-name={"squeezeC2Icon2"}
                                data-plasmic-override={overrides.squeezeC2Icon2}
                                alt={""}
                                className={classNames(sty.squeezeC2Icon2)}
                                displayHeight={"40px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"40px" as const}
                                loading={"eager" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.squeeze_c2_icon2[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                data-plasmic-name={"squeezeC2Icon1Value2"}
                                data-plasmic-override={
                                  overrides.squeezeC2Icon1Value2
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2Icon1Value2
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_icon2_value2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Icon Value 2";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"iconValue3"}
                            data-plasmic-override={overrides.iconValue3}
                            className={classNames(
                              projectcss.all,
                              sty.iconValue3
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__n96Xs
                              )}
                            >
                              <p.PlasmicImg
                                data-plasmic-name={"squeezeC2Icon3"}
                                data-plasmic-override={overrides.squeezeC2Icon3}
                                alt={""}
                                className={classNames(sty.squeezeC2Icon3)}
                                displayHeight={"40px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"40px" as const}
                                loading={"eager" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.squeeze_c2_icon3[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                data-plasmic-name={"squeezeC2Icon1Value3"}
                                data-plasmic-override={
                                  overrides.squeezeC2Icon1Value3
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2Icon1Value3
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_icon3_value3;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Icon Value 3";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___3VDbr
                              )}
                            />
                          ) : null}
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gDvWg
                              )}
                            >
                              <div
                                data-plasmic-name={"squeezeC2CtaH1"}
                                data-plasmic-override={overrides.squeezeC2CtaH1}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2CtaH1
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_cta_h1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "CTA Headline 1";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                data-plasmic-name={"squeezeC2CtaH2"}
                                data-plasmic-override={overrides.squeezeC2CtaH2}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2CtaH2
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_cta_h2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "CTA Headline 2";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          ) : null}
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vzxkg
                              )}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ggmw8
                            )}
                          >
                            <div
                              data-plasmic-name={"squeezeC2Proof"}
                              data-plasmic-override={overrides.squeezeC2Proof}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.squeezeC2Proof
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.squeeze_c2_proof;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Enter some text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__t5Ger
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ogzEi
                              )}
                            >
                              <div
                                data-plasmic-name={"squeezeC2OfferH1"}
                                data-plasmic-override={
                                  overrides.squeezeC2OfferH1
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2OfferH1
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_offer_h1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Enter some text:";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <p.PlasmicImg
                                data-plasmic-name={"squeezeC2OfferThumbnail"}
                                data-plasmic-override={
                                  overrides.squeezeC2OfferThumbnail
                                }
                                alt={""}
                                className={classNames(
                                  sty.squeezeC2OfferThumbnail
                                )}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"50px" as const}
                                displayMaxWidth={"none" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"eager" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.squeeze_c2_offer_thumbnail[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fwJx3
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_offer_h2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__on7Zu
                              )}
                            >
                              <div
                                data-plasmic-name={"squeezeC2ValueH1"}
                                data-plasmic-override={
                                  overrides.squeezeC2ValueH1
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2ValueH1
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_value_h1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                data-plasmic-name={"squeezeC2ValueH2"}
                                data-plasmic-override={
                                  overrides.squeezeC2ValueH2
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2ValueH2
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_value_h2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                data-plasmic-name={"squeezeC2ValueH3"}
                                data-plasmic-override={
                                  overrides.squeezeC2ValueH3
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2ValueH3
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_value_h3;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <div
                      data-plasmic-name={"mobile"}
                      data-plasmic-override={overrides.mobile}
                      className={classNames(projectcss.all, sty.mobile)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0Vdjh
                        )}
                      >
                        <p.PlasmicImg
                          data-plasmic-name={"logo3"}
                          data-plasmic-override={overrides.logo3}
                          alt={""}
                          className={classNames(sty.logo3)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"175px" as const}
                          loading={"eager" as const}
                          src={(() => {
                            try {
                              return $ctx.fetchDyanamicData.records[0].fields
                                .logo[0].url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__bdC2S
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__r8EEi
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gPyAb
                            )}
                          >
                            <p.PlasmicImg
                              data-plasmic-name={"squeezeC2Thumbnail2"}
                              data-plasmic-override={
                                overrides.squeezeC2Thumbnail2
                              }
                              alt={""}
                              className={classNames(sty.squeezeC2Thumbnail2)}
                              displayHeight={"auto" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"125px" as const}
                              loading={"eager" as const}
                              src={(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.squeeze_c2_thumbnail[0].url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pyzAo
                              )}
                            >
                              <div
                                data-plasmic-name={"squeezeC2H13"}
                                data-plasmic-override={overrides.squeezeC2H13}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2H13
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_h1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Main Headline Goes Here";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                data-plasmic-name={"squeezeC2H14"}
                                data-plasmic-override={overrides.squeezeC2H14}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2H14
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_h2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Secondary Headline Goes Here";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uV1Y0
                            )}
                          />

                          <div
                            data-plasmic-name={"iconValue4"}
                            data-plasmic-override={overrides.iconValue4}
                            className={classNames(
                              projectcss.all,
                              sty.iconValue4
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___6A4G
                              )}
                            >
                              <p.PlasmicImg
                                data-plasmic-name={"squeezeC2Icon12"}
                                data-plasmic-override={
                                  overrides.squeezeC2Icon12
                                }
                                alt={""}
                                className={classNames(sty.squeezeC2Icon12)}
                                displayHeight={"40px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"40px" as const}
                                loading={"eager" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.squeeze_c2_icon1[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                data-plasmic-name={"squeezeC2Icon1Value12"}
                                data-plasmic-override={
                                  overrides.squeezeC2Icon1Value12
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2Icon1Value12
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_icon1_value1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Icon Value 1";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"iconValue5"}
                            data-plasmic-override={overrides.iconValue5}
                            className={classNames(
                              projectcss.all,
                              sty.iconValue5
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xogzP
                              )}
                            >
                              <p.PlasmicImg
                                data-plasmic-name={"squeezeC2Icon22"}
                                data-plasmic-override={
                                  overrides.squeezeC2Icon22
                                }
                                alt={""}
                                className={classNames(sty.squeezeC2Icon22)}
                                displayHeight={"40px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"40px" as const}
                                loading={"eager" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.squeeze_c2_icon2[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                data-plasmic-name={"squeezeC2Icon1Value22"}
                                data-plasmic-override={
                                  overrides.squeezeC2Icon1Value22
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2Icon1Value22
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_icon2_value2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Icon Value 2";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"iconValue6"}
                            data-plasmic-override={overrides.iconValue6}
                            className={classNames(
                              projectcss.all,
                              sty.iconValue6
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___5Mv6
                              )}
                            >
                              <p.PlasmicImg
                                data-plasmic-name={"squeezeC2Icon32"}
                                data-plasmic-override={
                                  overrides.squeezeC2Icon32
                                }
                                alt={""}
                                className={classNames(sty.squeezeC2Icon32)}
                                displayHeight={"40px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"40px" as const}
                                loading={"eager" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.squeeze_c2_icon3[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                data-plasmic-name={"squeezeC2Icon1Value32"}
                                data-plasmic-override={
                                  overrides.squeezeC2Icon1Value32
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2Icon1Value32
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_icon3_value3;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Icon Value 3";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eqXth
                              )}
                            />
                          ) : null}
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eSAe
                              )}
                            >
                              <div
                                data-plasmic-name={"squeezeC2CtaH12"}
                                data-plasmic-override={
                                  overrides.squeezeC2CtaH12
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2CtaH12
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_cta_h1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "CTA Headline 1";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                data-plasmic-name={"squeezeC2CtaH22"}
                                data-plasmic-override={
                                  overrides.squeezeC2CtaH22
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2CtaH22
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_cta_h2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "CTA Headline 2";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          ) : null}
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ktV00
                              )}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___8Qu1W
                            )}
                          >
                            <div
                              data-plasmic-name={"squeezeC2Proof2"}
                              data-plasmic-override={overrides.squeezeC2Proof2}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.squeezeC2Proof2
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.squeeze_c2_proof;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Enter some text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hIfPz
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oBlgF
                              )}
                            >
                              <div
                                data-plasmic-name={"squeezeC2OfferH12"}
                                data-plasmic-override={
                                  overrides.squeezeC2OfferH12
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2OfferH12
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_offer_h1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Enter some text:";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <p.PlasmicImg
                                data-plasmic-name={"squeezeC2OfferThumbnail2"}
                                data-plasmic-override={
                                  overrides.squeezeC2OfferThumbnail2
                                }
                                alt={""}
                                className={classNames(
                                  sty.squeezeC2OfferThumbnail2
                                )}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"50px" as const}
                                displayMaxWidth={"none" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"eager" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.squeeze_c2_offer_thumbnail[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7MfIu
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_offer_h2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___4NoP0
                              )}
                            >
                              <div
                                data-plasmic-name={"squeezeC2ValueH12"}
                                data-plasmic-override={
                                  overrides.squeezeC2ValueH12
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2ValueH12
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_value_h1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                data-plasmic-name={"squeezeC2ValueH22"}
                                data-plasmic-override={
                                  overrides.squeezeC2ValueH22
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2ValueH22
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_value_h2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                data-plasmic-name={"squeezeC2ValueH32"}
                                data-plasmic-override={
                                  overrides.squeezeC2ValueH32
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC2ValueH32
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c2_value_h3;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__qgh4Y
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <p.PlasmicImg
                              data-plasmic-name={"logo2"}
                              data-plasmic-override={overrides.logo2}
                              alt={""}
                              className={classNames(sty.logo2)}
                              displayHeight={"auto" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_feed_presell_ai/images/_046F157ALogo250X104X01P04X01L000002028Png.png",
                                fullWidth: 177,
                                fullHeight: 57,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                          <div
                            data-plasmic-name={"squeezeNav2"}
                            data-plasmic-override={overrides.squeezeNav2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.squeezeNav2
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.squeeze_c1_nav;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"squeezeC1H12"}
                            data-plasmic-override={overrides.squeezeC1H12}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.squeezeC1H12
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.squeeze_c1_h1;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Get Pricing Details";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"squeezeC1H22"}
                            data-plasmic-override={overrides.squeezeC1H22}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.squeezeC1H22
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.squeeze_c1_h2;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Submit to Request Additional Information";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___7Un4G
                            )}
                          >
                            <Embed
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml__pfIpm
                              )}
                              code={(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields["Custom Embed"];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      data-plasmic-name={
                        "discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4"
                      }
                      data-plasmic-override={
                        overrides.discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4
                      }
                      className={classNames(
                        projectcss.all,
                        sty.discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4
                      )}
                    >
                      <div
                        data-plasmic-name={"divlpPomRoot"}
                        data-plasmic-override={overrides.divlpPomRoot}
                        className={classNames(projectcss.all, sty.divlpPomRoot)}
                      >
                        <div
                          data-plasmic-name={"divlpPomBlock11"}
                          data-plasmic-override={overrides.divlpPomBlock11}
                          className={classNames(
                            projectcss.all,
                            sty.divlpPomBlock11
                          )}
                        />

                        <div
                          data-plasmic-name={"divlpPomBlock21"}
                          data-plasmic-override={overrides.divlpPomBlock21}
                          className={classNames(
                            projectcss.all,
                            sty.divlpPomBlock21
                          )}
                        />

                        <div
                          data-plasmic-name={"divlpPositionedContent"}
                          data-plasmic-override={
                            overrides.divlpPositionedContent
                          }
                          className={classNames(
                            projectcss.all,
                            sty.divlpPositionedContent
                          )}
                        >
                          <div
                            data-plasmic-name={"divlpPomBox32"}
                            data-plasmic-override={overrides.divlpPomBox32}
                            className={classNames(
                              projectcss.all,
                              sty.divlpPomBox32
                            )}
                          >
                            <div
                              data-plasmic-name={"divlpPomForm19"}
                              data-plasmic-override={overrides.divlpPomForm19}
                              className={classNames(
                                projectcss.all,
                                sty.divlpPomForm19
                              )}
                            >
                              <div
                                data-plasmic-name={"inputfirstname"}
                                data-plasmic-override={overrides.inputfirstname}
                                className={classNames(
                                  projectcss.all,
                                  sty.inputfirstname
                                )}
                              >
                                <div
                                  data-plasmic-name={"divplaceholder"}
                                  data-plasmic-override={
                                    overrides.divplaceholder
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.divplaceholder
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"yourFirstName"}
                                    data-plasmic-override={
                                      overrides.yourFirstName
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.yourFirstName
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__dcThA
                                      )}
                                    >
                                      {"Your First Name"}
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"inputlastname"}
                                data-plasmic-override={overrides.inputlastname}
                                className={classNames(
                                  projectcss.all,
                                  sty.inputlastname
                                )}
                              >
                                <div
                                  data-plasmic-name={"divplaceholder2"}
                                  data-plasmic-override={
                                    overrides.divplaceholder2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.divplaceholder2
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"yourLastName"}
                                    data-plasmic-override={
                                      overrides.yourLastName
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.yourLastName
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___6YpHy
                                      )}
                                    >
                                      {"Your Last Name"}
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"inputemail"}
                                data-plasmic-override={overrides.inputemail}
                                className={classNames(
                                  projectcss.all,
                                  sty.inputemail
                                )}
                              >
                                <div
                                  data-plasmic-name={"divplaceholder3"}
                                  data-plasmic-override={
                                    overrides.divplaceholder3
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.divplaceholder3
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"yourEmailAddress"}
                                    data-plasmic-override={
                                      overrides.yourEmailAddress
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.yourEmailAddress
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__cdqYs
                                      )}
                                    >
                                      {"Your Email Address"}
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"inputphone"}
                                data-plasmic-override={overrides.inputphone}
                                className={classNames(
                                  projectcss.all,
                                  sty.inputphone
                                )}
                              >
                                <div
                                  data-plasmic-name={"divplaceholder4"}
                                  data-plasmic-override={
                                    overrides.divplaceholder4
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.divplaceholder4
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"yourPhoneNumber"}
                                    data-plasmic-override={
                                      overrides.yourPhoneNumber
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.yourPhoneNumber
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__a43G4
                                      )}
                                    >
                                      {"Your Phone Number"}
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"divcontainerQualification"}
                                data-plasmic-override={
                                  overrides.divcontainerQualification
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.divcontainerQualification
                                )}
                              >
                                <div
                                  data-plasmic-name={"yourQualification"}
                                  data-plasmic-override={
                                    overrides.yourQualification
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.yourQualification
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__z0VYd
                                    )}
                                  >
                                    {"Your Qualification"}
                                  </div>
                                </div>
                                <div
                                  data-plasmic-name={"selectqualification"}
                                  data-plasmic-override={
                                    overrides.selectqualification
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.selectqualification
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"div"}
                                    data-plasmic-override={overrides.div}
                                    className={classNames(
                                      projectcss.all,
                                      sty.div
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"nurseRnOrNp"}
                                      data-plasmic-override={
                                        overrides.nurseRnOrNp
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.nurseRnOrNp
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__bM59
                                        )}
                                      >
                                        {"Nurse ( RN or NP)"}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"buttonlpPomButton20"}
                                data-plasmic-override={
                                  overrides.buttonlpPomButton20
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.buttonlpPomButton20
                                )}
                              >
                                <div
                                  data-plasmic-name={"_continue"}
                                  data-plasmic-override={overrides._continue}
                                  className={classNames(
                                    projectcss.all,
                                    sty._continue
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__h0NWr
                                    )}
                                  >
                                    {"CONTINUE"}
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"divlpPomBox26"}
                            data-plasmic-override={overrides.divlpPomBox26}
                            className={classNames(
                              projectcss.all,
                              sty.divlpPomBox26
                            )}
                          >
                            <div
                              data-plasmic-name={"divlpPomImageContainer"}
                              data-plasmic-override={
                                overrides.divlpPomImageContainer
                              }
                              className={classNames(
                                projectcss.all,
                                sty.divlpPomImageContainer
                              )}
                            >
                              <div
                                data-plasmic-name={
                                  "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png"
                                }
                                data-plasmic-override={
                                  overrides._6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty._6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png
                                )}
                              />
                            </div>
                            <div
                              data-plasmic-name={"divlpPomImageContainer2"}
                              data-plasmic-override={
                                overrides.divlpPomImageContainer2
                              }
                              className={classNames(
                                projectcss.all,
                                sty.divlpPomImageContainer2
                              )}
                            >
                              <div
                                data-plasmic-name={
                                  "c510588BTrainingCenterGifPreview2Gif"
                                }
                                data-plasmic-override={
                                  overrides.c510588BTrainingCenterGifPreview2Gif
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.c510588BTrainingCenterGifPreview2Gif
                                )}
                              />
                            </div>
                            <div
                              data-plasmic-name={"divlpPomBox46"}
                              data-plasmic-override={overrides.divlpPomBox46}
                              className={classNames(
                                projectcss.all,
                                sty.divlpPomBox46
                              )}
                            >
                              <div
                                data-plasmic-name={"divlpPomImageContainer3"}
                                data-plasmic-override={
                                  overrides.divlpPomImageContainer3
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.divlpPomImageContainer3
                                )}
                              >
                                <div
                                  data-plasmic-name={"d33EfddcPinkChecksvg"}
                                  data-plasmic-override={
                                    overrides.d33EfddcPinkChecksvg
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.d33EfddcPinkChecksvg
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"d33EfddcPinkChecksvg2"}
                                    data-plasmic-override={
                                      overrides.d33EfddcPinkChecksvg2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.d33EfddcPinkChecksvg2
                                    )}
                                  >
                                    <VectorIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__ksUr
                                      )}
                                      role={"img"}
                                    />

                                    <Vector2Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__lAqih
                                      )}
                                      role={"img"}
                                    />

                                    <GroupIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__uJsCr
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={
                                  "learnFacialAnatomyBotulinumToxinScience"
                                }
                                data-plasmic-override={
                                  overrides.learnFacialAnatomyBotulinumToxinScience
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.learnFacialAnatomyBotulinumToxinScience
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__sDigS
                                  )}
                                >
                                  {
                                    "Learn Facial Anatomy & Botulinum Toxin Science"
                                  }
                                </div>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"divlpPomBox52"}
                              data-plasmic-override={overrides.divlpPomBox52}
                              className={classNames(
                                projectcss.all,
                                sty.divlpPomBox52
                              )}
                            >
                              <div
                                data-plasmic-name={"divlpPomImageContainer4"}
                                data-plasmic-override={
                                  overrides.divlpPomImageContainer4
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.divlpPomImageContainer4
                                )}
                              >
                                <div
                                  data-plasmic-name={"d33EfddcPinkChecksvg3"}
                                  data-plasmic-override={
                                    overrides.d33EfddcPinkChecksvg3
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.d33EfddcPinkChecksvg3
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"d33EfddcPinkChecksvg4"}
                                    data-plasmic-override={
                                      overrides.d33EfddcPinkChecksvg4
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.d33EfddcPinkChecksvg4
                                    )}
                                  >
                                    <VectorIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__mhOk3
                                      )}
                                      role={"img"}
                                    />

                                    <Vector2Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__wnq1M
                                      )}
                                      role={"img"}
                                    />

                                    <GroupIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___4WuXe
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={
                                  "smallClassSizeWithDedicated11Support"
                                }
                                data-plasmic-override={
                                  overrides.smallClassSizeWithDedicated11Support
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.smallClassSizeWithDedicated11Support
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__cdyku
                                  )}
                                >
                                  {
                                    "Small Class Size With Dedicated 1:1 Support"
                                  }
                                </div>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"divlpPomBox55"}
                              data-plasmic-override={overrides.divlpPomBox55}
                              className={classNames(
                                projectcss.all,
                                sty.divlpPomBox55
                              )}
                            >
                              <div
                                data-plasmic-name={"divlpPomImageContainer5"}
                                data-plasmic-override={
                                  overrides.divlpPomImageContainer5
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.divlpPomImageContainer5
                                )}
                              >
                                <div
                                  data-plasmic-name={"d33EfddcPinkChecksvg5"}
                                  data-plasmic-override={
                                    overrides.d33EfddcPinkChecksvg5
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.d33EfddcPinkChecksvg5
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"d33EfddcPinkChecksvg6"}
                                    data-plasmic-override={
                                      overrides.d33EfddcPinkChecksvg6
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.d33EfddcPinkChecksvg6
                                    )}
                                  >
                                    <VectorIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__wgFhs
                                      )}
                                      role={"img"}
                                    />

                                    <Vector2Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__vp815
                                      )}
                                      role={"img"}
                                    />

                                    <GroupIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__jCtT
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"strong"}
                                data-plasmic-override={overrides.strong}
                                className={classNames(
                                  projectcss.all,
                                  sty.strong
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3CU1
                                  )}
                                >
                                  {"$151,109 Medium Annual Salary - Glassdoor"}
                                </div>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"divlpPomImageContainer6"}
                              data-plasmic-override={
                                overrides.divlpPomImageContainer6
                              }
                              className={classNames(
                                projectcss.all,
                                sty.divlpPomImageContainer6
                              )}
                            >
                              <div
                                data-plasmic-name={
                                  "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png"
                                }
                                data-plasmic-override={
                                  overrides._3628940ACheckoutTrainingCenterPart210El08G000000000000028Png
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty._3628940ACheckoutTrainingCenterPart210El08G000000000000028Png
                                )}
                              />
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"divlpPomImageContainer7"}
                            data-plasmic-override={
                              overrides.divlpPomImageContainer7
                            }
                            className={classNames(
                              projectcss.all,
                              sty.divlpPomImageContainer7
                            )}
                          >
                            <div
                              data-plasmic-name={
                                "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png"
                              }
                              data-plasmic-override={
                                overrides.c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png
                              }
                              className={classNames(
                                projectcss.all,
                                sty.c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png
                              )}
                            />
                          </div>
                          <div
                            data-plasmic-name={"getPricingDetails"}
                            data-plasmic-override={overrides.getPricingDetails}
                            className={classNames(
                              projectcss.all,
                              sty.getPricingDetails
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5NZe9
                              )}
                            >
                              {"Get Pricing Details"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"divlpPomImageContainer8"}
                            data-plasmic-override={
                              overrides.divlpPomImageContainer8
                            }
                            className={classNames(
                              projectcss.all,
                              sty.divlpPomImageContainer8
                            )}
                          >
                            <div
                              data-plasmic-name={
                                "_046F157ALogo250X104X01P04X01L000002028Png"
                              }
                              data-plasmic-override={
                                overrides._046F157ALogo250X104X01P04X01L000002028Png
                              }
                              className={classNames(
                                projectcss.all,
                                sty._046F157ALogo250X104X01P04X01L000002028Png
                              )}
                            />
                          </div>
                          <div
                            data-plasmic-name={"span"}
                            data-plasmic-override={overrides.span}
                            className={classNames(projectcss.all, sty.span)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lF1BK
                              )}
                            >
                              {
                                "Unlock Course Pricing\u00a0\u00a0>\u00a0\u00a0Access\u00a0Curriculum & Syllabus"
                              }
                            </div>
                          </div>
                          <div
                            data-plasmic-name={
                              "submitToRequestAdditionalInformation"
                            }
                            data-plasmic-override={
                              overrides.submitToRequestAdditionalInformation
                            }
                            className={classNames(
                              projectcss.all,
                              sty.submitToRequestAdditionalInformation
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6AbAo
                              )}
                            >
                              {"Submit to Request Additional Information"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"divlpPomBox33"}
                            data-plasmic-override={overrides.divlpPomBox33}
                            className={classNames(
                              projectcss.all,
                              sty.divlpPomBox33
                            )}
                          />

                          <div
                            data-plasmic-name={"p"}
                            data-plasmic-override={overrides.p}
                            className={classNames(projectcss.all, sty.p)}
                          >
                            <div
                              data-plasmic-name={
                                "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg"
                              }
                              data-plasmic-override={
                                overrides.iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg
                              }
                              className={classNames(
                                projectcss.all,
                                sty.iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vHHg6
                                )}
                              >
                                {
                                  "I agree to receive recurring automated marketing text messages (e.g."
                                }
                              </div>
                            </div>
                            <div
                              data-plasmic-name={
                                "cartRemindersAtThePhoneNumberProvidedConsentIsNotA"
                              }
                              data-plasmic-override={
                                overrides.cartRemindersAtThePhoneNumberProvidedConsentIsNotA
                              }
                              className={classNames(
                                projectcss.all,
                                sty.cartRemindersAtThePhoneNumberProvidedConsentIsNotA
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uksXm
                                )}
                              >
                                {
                                  "cart reminders) at the phone number provided. Consent is not a"
                                }
                              </div>
                            </div>
                            <div
                              data-plasmic-name={
                                "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency"
                              }
                              data-plasmic-override={
                                overrides.conditionToPurchaseMsgDataRatesMayApplyMsgFrequency
                              }
                              className={classNames(
                                projectcss.all,
                                sty.conditionToPurchaseMsgDataRatesMayApplyMsgFrequency
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__aNme1
                                )}
                              >
                                {
                                  "condition to purchase. Msg & data rates may apply. Msg frequency"
                                }
                              </div>
                            </div>
                            <div
                              data-plasmic-name={
                                "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy"
                              }
                              data-plasmic-override={
                                overrides.variesReplyHelpForHelpAndStopToCancelViewOurPrivacy
                              }
                              className={classNames(
                                projectcss.all,
                                sty.variesReplyHelpForHelpAndStopToCancelViewOurPrivacy
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__v3Mct
                                )}
                              >
                                {
                                  "varies. Reply HELP for help and STOP to cancel. View our\u00a0Privacy"
                                }
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"policyAndTermsOfService"}
                              data-plasmic-override={
                                overrides.policyAndTermsOfService
                              }
                              className={classNames(
                                projectcss.all,
                                sty.policyAndTermsOfService
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__j07Mb
                                )}
                              >
                                {"Policy\u00a0and\u00a0Terms of Service."}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : null}
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__pnIej
                    )}
                  />
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </DataFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "httpRestApiFetcher",
    "desktop",
    "logo",
    "squeezeNav",
    "squeezeC1H1",
    "squeezeC1H2",
    "squeezeC2Thumbnail",
    "squeezeC2H1",
    "squeezeC2H12",
    "iconValue1",
    "squeezeC2Icon1",
    "squeezeC2Icon1Value1",
    "iconValue2",
    "squeezeC2Icon2",
    "squeezeC2Icon1Value2",
    "iconValue3",
    "squeezeC2Icon3",
    "squeezeC2Icon1Value3",
    "squeezeC2CtaH1",
    "squeezeC2CtaH2",
    "squeezeC2Proof",
    "squeezeC2OfferH1",
    "squeezeC2OfferThumbnail",
    "squeezeC2ValueH1",
    "squeezeC2ValueH2",
    "squeezeC2ValueH3",
    "mobile",
    "logo3",
    "squeezeC2Thumbnail2",
    "squeezeC2H13",
    "squeezeC2H14",
    "iconValue4",
    "squeezeC2Icon12",
    "squeezeC2Icon1Value12",
    "iconValue5",
    "squeezeC2Icon22",
    "squeezeC2Icon1Value22",
    "iconValue6",
    "squeezeC2Icon32",
    "squeezeC2Icon1Value32",
    "squeezeC2CtaH12",
    "squeezeC2CtaH22",
    "squeezeC2Proof2",
    "squeezeC2OfferH12",
    "squeezeC2OfferThumbnail2",
    "squeezeC2ValueH12",
    "squeezeC2ValueH22",
    "squeezeC2ValueH32",
    "logo2",
    "squeezeNav2",
    "squeezeC1H12",
    "squeezeC1H22",
    "discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4",
    "divlpPomRoot",
    "divlpPomBlock11",
    "divlpPomBlock21",
    "divlpPositionedContent",
    "divlpPomBox32",
    "divlpPomForm19",
    "inputfirstname",
    "divplaceholder",
    "yourFirstName",
    "inputlastname",
    "divplaceholder2",
    "yourLastName",
    "inputemail",
    "divplaceholder3",
    "yourEmailAddress",
    "inputphone",
    "divplaceholder4",
    "yourPhoneNumber",
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp",
    "buttonlpPomButton20",
    "_continue",
    "divlpPomBox26",
    "divlpPomImageContainer",
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png",
    "divlpPomImageContainer2",
    "c510588BTrainingCenterGifPreview2Gif",
    "divlpPomBox46",
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2",
    "learnFacialAnatomyBotulinumToxinScience",
    "divlpPomBox52",
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4",
    "smallClassSizeWithDedicated11Support",
    "divlpPomBox55",
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6",
    "strong",
    "divlpPomImageContainer6",
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png",
    "divlpPomImageContainer7",
    "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png",
    "getPricingDetails",
    "divlpPomImageContainer8",
    "_046F157ALogo250X104X01P04X01L000002028Png",
    "span",
    "submitToRequestAdditionalInformation",
    "divlpPomBox33",
    "p",
    "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg",
    "cartRemindersAtThePhoneNumberProvidedConsentIsNotA",
    "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency",
    "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy",
    "policyAndTermsOfService"
  ],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "desktop",
    "logo",
    "squeezeNav",
    "squeezeC1H1",
    "squeezeC1H2",
    "squeezeC2Thumbnail",
    "squeezeC2H1",
    "squeezeC2H12",
    "iconValue1",
    "squeezeC2Icon1",
    "squeezeC2Icon1Value1",
    "iconValue2",
    "squeezeC2Icon2",
    "squeezeC2Icon1Value2",
    "iconValue3",
    "squeezeC2Icon3",
    "squeezeC2Icon1Value3",
    "squeezeC2CtaH1",
    "squeezeC2CtaH2",
    "squeezeC2Proof",
    "squeezeC2OfferH1",
    "squeezeC2OfferThumbnail",
    "squeezeC2ValueH1",
    "squeezeC2ValueH2",
    "squeezeC2ValueH3",
    "mobile",
    "logo3",
    "squeezeC2Thumbnail2",
    "squeezeC2H13",
    "squeezeC2H14",
    "iconValue4",
    "squeezeC2Icon12",
    "squeezeC2Icon1Value12",
    "iconValue5",
    "squeezeC2Icon22",
    "squeezeC2Icon1Value22",
    "iconValue6",
    "squeezeC2Icon32",
    "squeezeC2Icon1Value32",
    "squeezeC2CtaH12",
    "squeezeC2CtaH22",
    "squeezeC2Proof2",
    "squeezeC2OfferH12",
    "squeezeC2OfferThumbnail2",
    "squeezeC2ValueH12",
    "squeezeC2ValueH22",
    "squeezeC2ValueH32",
    "logo2",
    "squeezeNav2",
    "squeezeC1H12",
    "squeezeC1H22",
    "discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4",
    "divlpPomRoot",
    "divlpPomBlock11",
    "divlpPomBlock21",
    "divlpPositionedContent",
    "divlpPomBox32",
    "divlpPomForm19",
    "inputfirstname",
    "divplaceholder",
    "yourFirstName",
    "inputlastname",
    "divplaceholder2",
    "yourLastName",
    "inputemail",
    "divplaceholder3",
    "yourEmailAddress",
    "inputphone",
    "divplaceholder4",
    "yourPhoneNumber",
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp",
    "buttonlpPomButton20",
    "_continue",
    "divlpPomBox26",
    "divlpPomImageContainer",
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png",
    "divlpPomImageContainer2",
    "c510588BTrainingCenterGifPreview2Gif",
    "divlpPomBox46",
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2",
    "learnFacialAnatomyBotulinumToxinScience",
    "divlpPomBox52",
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4",
    "smallClassSizeWithDedicated11Support",
    "divlpPomBox55",
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6",
    "strong",
    "divlpPomImageContainer6",
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png",
    "divlpPomImageContainer7",
    "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png",
    "getPricingDetails",
    "divlpPomImageContainer8",
    "_046F157ALogo250X104X01P04X01L000002028Png",
    "span",
    "submitToRequestAdditionalInformation",
    "divlpPomBox33",
    "p",
    "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg",
    "cartRemindersAtThePhoneNumberProvidedConsentIsNotA",
    "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency",
    "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy",
    "policyAndTermsOfService"
  ],
  desktop: [
    "desktop",
    "logo",
    "squeezeNav",
    "squeezeC1H1",
    "squeezeC1H2",
    "squeezeC2Thumbnail",
    "squeezeC2H1",
    "squeezeC2H12",
    "iconValue1",
    "squeezeC2Icon1",
    "squeezeC2Icon1Value1",
    "iconValue2",
    "squeezeC2Icon2",
    "squeezeC2Icon1Value2",
    "iconValue3",
    "squeezeC2Icon3",
    "squeezeC2Icon1Value3",
    "squeezeC2CtaH1",
    "squeezeC2CtaH2",
    "squeezeC2Proof",
    "squeezeC2OfferH1",
    "squeezeC2OfferThumbnail",
    "squeezeC2ValueH1",
    "squeezeC2ValueH2",
    "squeezeC2ValueH3"
  ],
  logo: ["logo"],
  squeezeNav: ["squeezeNav"],
  squeezeC1H1: ["squeezeC1H1"],
  squeezeC1H2: ["squeezeC1H2"],
  squeezeC2Thumbnail: ["squeezeC2Thumbnail"],
  squeezeC2H1: ["squeezeC2H1"],
  squeezeC2H12: ["squeezeC2H12"],
  iconValue1: ["iconValue1", "squeezeC2Icon1", "squeezeC2Icon1Value1"],
  squeezeC2Icon1: ["squeezeC2Icon1"],
  squeezeC2Icon1Value1: ["squeezeC2Icon1Value1"],
  iconValue2: ["iconValue2", "squeezeC2Icon2", "squeezeC2Icon1Value2"],
  squeezeC2Icon2: ["squeezeC2Icon2"],
  squeezeC2Icon1Value2: ["squeezeC2Icon1Value2"],
  iconValue3: ["iconValue3", "squeezeC2Icon3", "squeezeC2Icon1Value3"],
  squeezeC2Icon3: ["squeezeC2Icon3"],
  squeezeC2Icon1Value3: ["squeezeC2Icon1Value3"],
  squeezeC2CtaH1: ["squeezeC2CtaH1"],
  squeezeC2CtaH2: ["squeezeC2CtaH2"],
  squeezeC2Proof: ["squeezeC2Proof"],
  squeezeC2OfferH1: ["squeezeC2OfferH1"],
  squeezeC2OfferThumbnail: ["squeezeC2OfferThumbnail"],
  squeezeC2ValueH1: ["squeezeC2ValueH1"],
  squeezeC2ValueH2: ["squeezeC2ValueH2"],
  squeezeC2ValueH3: ["squeezeC2ValueH3"],
  mobile: [
    "mobile",
    "logo3",
    "squeezeC2Thumbnail2",
    "squeezeC2H13",
    "squeezeC2H14",
    "iconValue4",
    "squeezeC2Icon12",
    "squeezeC2Icon1Value12",
    "iconValue5",
    "squeezeC2Icon22",
    "squeezeC2Icon1Value22",
    "iconValue6",
    "squeezeC2Icon32",
    "squeezeC2Icon1Value32",
    "squeezeC2CtaH12",
    "squeezeC2CtaH22",
    "squeezeC2Proof2",
    "squeezeC2OfferH12",
    "squeezeC2OfferThumbnail2",
    "squeezeC2ValueH12",
    "squeezeC2ValueH22",
    "squeezeC2ValueH32",
    "logo2",
    "squeezeNav2",
    "squeezeC1H12",
    "squeezeC1H22"
  ],
  logo3: ["logo3"],
  squeezeC2Thumbnail2: ["squeezeC2Thumbnail2"],
  squeezeC2H13: ["squeezeC2H13"],
  squeezeC2H14: ["squeezeC2H14"],
  iconValue4: ["iconValue4", "squeezeC2Icon12", "squeezeC2Icon1Value12"],
  squeezeC2Icon12: ["squeezeC2Icon12"],
  squeezeC2Icon1Value12: ["squeezeC2Icon1Value12"],
  iconValue5: ["iconValue5", "squeezeC2Icon22", "squeezeC2Icon1Value22"],
  squeezeC2Icon22: ["squeezeC2Icon22"],
  squeezeC2Icon1Value22: ["squeezeC2Icon1Value22"],
  iconValue6: ["iconValue6", "squeezeC2Icon32", "squeezeC2Icon1Value32"],
  squeezeC2Icon32: ["squeezeC2Icon32"],
  squeezeC2Icon1Value32: ["squeezeC2Icon1Value32"],
  squeezeC2CtaH12: ["squeezeC2CtaH12"],
  squeezeC2CtaH22: ["squeezeC2CtaH22"],
  squeezeC2Proof2: ["squeezeC2Proof2"],
  squeezeC2OfferH12: ["squeezeC2OfferH12"],
  squeezeC2OfferThumbnail2: ["squeezeC2OfferThumbnail2"],
  squeezeC2ValueH12: ["squeezeC2ValueH12"],
  squeezeC2ValueH22: ["squeezeC2ValueH22"],
  squeezeC2ValueH32: ["squeezeC2ValueH32"],
  logo2: ["logo2"],
  squeezeNav2: ["squeezeNav2"],
  squeezeC1H12: ["squeezeC1H12"],
  squeezeC1H22: ["squeezeC1H22"],
  discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4: [
    "discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4",
    "divlpPomRoot",
    "divlpPomBlock11",
    "divlpPomBlock21",
    "divlpPositionedContent",
    "divlpPomBox32",
    "divlpPomForm19",
    "inputfirstname",
    "divplaceholder",
    "yourFirstName",
    "inputlastname",
    "divplaceholder2",
    "yourLastName",
    "inputemail",
    "divplaceholder3",
    "yourEmailAddress",
    "inputphone",
    "divplaceholder4",
    "yourPhoneNumber",
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp",
    "buttonlpPomButton20",
    "_continue",
    "divlpPomBox26",
    "divlpPomImageContainer",
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png",
    "divlpPomImageContainer2",
    "c510588BTrainingCenterGifPreview2Gif",
    "divlpPomBox46",
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2",
    "learnFacialAnatomyBotulinumToxinScience",
    "divlpPomBox52",
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4",
    "smallClassSizeWithDedicated11Support",
    "divlpPomBox55",
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6",
    "strong",
    "divlpPomImageContainer6",
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png",
    "divlpPomImageContainer7",
    "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png",
    "getPricingDetails",
    "divlpPomImageContainer8",
    "_046F157ALogo250X104X01P04X01L000002028Png",
    "span",
    "submitToRequestAdditionalInformation",
    "divlpPomBox33",
    "p",
    "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg",
    "cartRemindersAtThePhoneNumberProvidedConsentIsNotA",
    "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency",
    "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy",
    "policyAndTermsOfService"
  ],
  divlpPomRoot: [
    "divlpPomRoot",
    "divlpPomBlock11",
    "divlpPomBlock21",
    "divlpPositionedContent",
    "divlpPomBox32",
    "divlpPomForm19",
    "inputfirstname",
    "divplaceholder",
    "yourFirstName",
    "inputlastname",
    "divplaceholder2",
    "yourLastName",
    "inputemail",
    "divplaceholder3",
    "yourEmailAddress",
    "inputphone",
    "divplaceholder4",
    "yourPhoneNumber",
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp",
    "buttonlpPomButton20",
    "_continue",
    "divlpPomBox26",
    "divlpPomImageContainer",
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png",
    "divlpPomImageContainer2",
    "c510588BTrainingCenterGifPreview2Gif",
    "divlpPomBox46",
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2",
    "learnFacialAnatomyBotulinumToxinScience",
    "divlpPomBox52",
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4",
    "smallClassSizeWithDedicated11Support",
    "divlpPomBox55",
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6",
    "strong",
    "divlpPomImageContainer6",
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png",
    "divlpPomImageContainer7",
    "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png",
    "getPricingDetails",
    "divlpPomImageContainer8",
    "_046F157ALogo250X104X01P04X01L000002028Png",
    "span",
    "submitToRequestAdditionalInformation",
    "divlpPomBox33",
    "p",
    "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg",
    "cartRemindersAtThePhoneNumberProvidedConsentIsNotA",
    "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency",
    "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy",
    "policyAndTermsOfService"
  ],
  divlpPomBlock11: ["divlpPomBlock11"],
  divlpPomBlock21: ["divlpPomBlock21"],
  divlpPositionedContent: [
    "divlpPositionedContent",
    "divlpPomBox32",
    "divlpPomForm19",
    "inputfirstname",
    "divplaceholder",
    "yourFirstName",
    "inputlastname",
    "divplaceholder2",
    "yourLastName",
    "inputemail",
    "divplaceholder3",
    "yourEmailAddress",
    "inputphone",
    "divplaceholder4",
    "yourPhoneNumber",
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp",
    "buttonlpPomButton20",
    "_continue",
    "divlpPomBox26",
    "divlpPomImageContainer",
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png",
    "divlpPomImageContainer2",
    "c510588BTrainingCenterGifPreview2Gif",
    "divlpPomBox46",
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2",
    "learnFacialAnatomyBotulinumToxinScience",
    "divlpPomBox52",
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4",
    "smallClassSizeWithDedicated11Support",
    "divlpPomBox55",
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6",
    "strong",
    "divlpPomImageContainer6",
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png",
    "divlpPomImageContainer7",
    "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png",
    "getPricingDetails",
    "divlpPomImageContainer8",
    "_046F157ALogo250X104X01P04X01L000002028Png",
    "span",
    "submitToRequestAdditionalInformation",
    "divlpPomBox33",
    "p",
    "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg",
    "cartRemindersAtThePhoneNumberProvidedConsentIsNotA",
    "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency",
    "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy",
    "policyAndTermsOfService"
  ],
  divlpPomBox32: [
    "divlpPomBox32",
    "divlpPomForm19",
    "inputfirstname",
    "divplaceholder",
    "yourFirstName",
    "inputlastname",
    "divplaceholder2",
    "yourLastName",
    "inputemail",
    "divplaceholder3",
    "yourEmailAddress",
    "inputphone",
    "divplaceholder4",
    "yourPhoneNumber",
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp",
    "buttonlpPomButton20",
    "_continue"
  ],
  divlpPomForm19: [
    "divlpPomForm19",
    "inputfirstname",
    "divplaceholder",
    "yourFirstName",
    "inputlastname",
    "divplaceholder2",
    "yourLastName",
    "inputemail",
    "divplaceholder3",
    "yourEmailAddress",
    "inputphone",
    "divplaceholder4",
    "yourPhoneNumber",
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp",
    "buttonlpPomButton20",
    "_continue"
  ],
  inputfirstname: ["inputfirstname", "divplaceholder", "yourFirstName"],
  divplaceholder: ["divplaceholder", "yourFirstName"],
  yourFirstName: ["yourFirstName"],
  inputlastname: ["inputlastname", "divplaceholder2", "yourLastName"],
  divplaceholder2: ["divplaceholder2", "yourLastName"],
  yourLastName: ["yourLastName"],
  inputemail: ["inputemail", "divplaceholder3", "yourEmailAddress"],
  divplaceholder3: ["divplaceholder3", "yourEmailAddress"],
  yourEmailAddress: ["yourEmailAddress"],
  inputphone: ["inputphone", "divplaceholder4", "yourPhoneNumber"],
  divplaceholder4: ["divplaceholder4", "yourPhoneNumber"],
  yourPhoneNumber: ["yourPhoneNumber"],
  divcontainerQualification: [
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp"
  ],
  yourQualification: ["yourQualification"],
  selectqualification: ["selectqualification", "div", "nurseRnOrNp"],
  div: ["div", "nurseRnOrNp"],
  nurseRnOrNp: ["nurseRnOrNp"],
  buttonlpPomButton20: ["buttonlpPomButton20", "_continue"],
  _continue: ["_continue"],
  divlpPomBox26: [
    "divlpPomBox26",
    "divlpPomImageContainer",
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png",
    "divlpPomImageContainer2",
    "c510588BTrainingCenterGifPreview2Gif",
    "divlpPomBox46",
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2",
    "learnFacialAnatomyBotulinumToxinScience",
    "divlpPomBox52",
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4",
    "smallClassSizeWithDedicated11Support",
    "divlpPomBox55",
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6",
    "strong",
    "divlpPomImageContainer6",
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png"
  ],
  divlpPomImageContainer: [
    "divlpPomImageContainer",
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png"
  ],
  _6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png: [
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png"
  ],
  divlpPomImageContainer2: [
    "divlpPomImageContainer2",
    "c510588BTrainingCenterGifPreview2Gif"
  ],
  c510588BTrainingCenterGifPreview2Gif: [
    "c510588BTrainingCenterGifPreview2Gif"
  ],
  divlpPomBox46: [
    "divlpPomBox46",
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2",
    "learnFacialAnatomyBotulinumToxinScience"
  ],
  divlpPomImageContainer3: [
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2"
  ],
  d33EfddcPinkChecksvg: ["d33EfddcPinkChecksvg", "d33EfddcPinkChecksvg2"],
  d33EfddcPinkChecksvg2: ["d33EfddcPinkChecksvg2"],
  learnFacialAnatomyBotulinumToxinScience: [
    "learnFacialAnatomyBotulinumToxinScience"
  ],
  divlpPomBox52: [
    "divlpPomBox52",
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4",
    "smallClassSizeWithDedicated11Support"
  ],
  divlpPomImageContainer4: [
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4"
  ],
  d33EfddcPinkChecksvg3: ["d33EfddcPinkChecksvg3", "d33EfddcPinkChecksvg4"],
  d33EfddcPinkChecksvg4: ["d33EfddcPinkChecksvg4"],
  smallClassSizeWithDedicated11Support: [
    "smallClassSizeWithDedicated11Support"
  ],
  divlpPomBox55: [
    "divlpPomBox55",
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6",
    "strong"
  ],
  divlpPomImageContainer5: [
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6"
  ],
  d33EfddcPinkChecksvg5: ["d33EfddcPinkChecksvg5", "d33EfddcPinkChecksvg6"],
  d33EfddcPinkChecksvg6: ["d33EfddcPinkChecksvg6"],
  strong: ["strong"],
  divlpPomImageContainer6: [
    "divlpPomImageContainer6",
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png"
  ],
  _3628940ACheckoutTrainingCenterPart210El08G000000000000028Png: [
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png"
  ],
  divlpPomImageContainer7: [
    "divlpPomImageContainer7",
    "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png"
  ],
  c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png: [
    "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png"
  ],
  getPricingDetails: ["getPricingDetails"],
  divlpPomImageContainer8: [
    "divlpPomImageContainer8",
    "_046F157ALogo250X104X01P04X01L000002028Png"
  ],
  _046F157ALogo250X104X01P04X01L000002028Png: [
    "_046F157ALogo250X104X01P04X01L000002028Png"
  ],
  span: ["span"],
  submitToRequestAdditionalInformation: [
    "submitToRequestAdditionalInformation"
  ],
  divlpPomBox33: ["divlpPomBox33"],
  p: [
    "p",
    "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg",
    "cartRemindersAtThePhoneNumberProvidedConsentIsNotA",
    "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency",
    "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy",
    "policyAndTermsOfService"
  ],
  iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg: [
    "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg"
  ],
  cartRemindersAtThePhoneNumberProvidedConsentIsNotA: [
    "cartRemindersAtThePhoneNumberProvidedConsentIsNotA"
  ],
  conditionToPurchaseMsgDataRatesMayApplyMsgFrequency: [
    "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency"
  ],
  variesReplyHelpForHelpAndStopToCancelViewOurPrivacy: [
    "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy"
  ],
  policyAndTermsOfService: ["policyAndTermsOfService"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpRestApiFetcher: typeof DataFetcher;
  desktop: "div";
  logo: typeof p.PlasmicImg;
  squeezeNav: "div";
  squeezeC1H1: "div";
  squeezeC1H2: "div";
  squeezeC2Thumbnail: typeof p.PlasmicImg;
  squeezeC2H1: "div";
  squeezeC2H12: "div";
  iconValue1: "div";
  squeezeC2Icon1: typeof p.PlasmicImg;
  squeezeC2Icon1Value1: "div";
  iconValue2: "div";
  squeezeC2Icon2: typeof p.PlasmicImg;
  squeezeC2Icon1Value2: "div";
  iconValue3: "div";
  squeezeC2Icon3: typeof p.PlasmicImg;
  squeezeC2Icon1Value3: "div";
  squeezeC2CtaH1: "div";
  squeezeC2CtaH2: "div";
  squeezeC2Proof: "div";
  squeezeC2OfferH1: "div";
  squeezeC2OfferThumbnail: typeof p.PlasmicImg;
  squeezeC2ValueH1: "div";
  squeezeC2ValueH2: "div";
  squeezeC2ValueH3: "div";
  mobile: "div";
  logo3: typeof p.PlasmicImg;
  squeezeC2Thumbnail2: typeof p.PlasmicImg;
  squeezeC2H13: "div";
  squeezeC2H14: "div";
  iconValue4: "div";
  squeezeC2Icon12: typeof p.PlasmicImg;
  squeezeC2Icon1Value12: "div";
  iconValue5: "div";
  squeezeC2Icon22: typeof p.PlasmicImg;
  squeezeC2Icon1Value22: "div";
  iconValue6: "div";
  squeezeC2Icon32: typeof p.PlasmicImg;
  squeezeC2Icon1Value32: "div";
  squeezeC2CtaH12: "div";
  squeezeC2CtaH22: "div";
  squeezeC2Proof2: "div";
  squeezeC2OfferH12: "div";
  squeezeC2OfferThumbnail2: typeof p.PlasmicImg;
  squeezeC2ValueH12: "div";
  squeezeC2ValueH22: "div";
  squeezeC2ValueH32: "div";
  logo2: typeof p.PlasmicImg;
  squeezeNav2: "div";
  squeezeC1H12: "div";
  squeezeC1H22: "div";
  discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4: "div";
  divlpPomRoot: "div";
  divlpPomBlock11: "div";
  divlpPomBlock21: "div";
  divlpPositionedContent: "div";
  divlpPomBox32: "div";
  divlpPomForm19: "div";
  inputfirstname: "div";
  divplaceholder: "div";
  yourFirstName: "div";
  inputlastname: "div";
  divplaceholder2: "div";
  yourLastName: "div";
  inputemail: "div";
  divplaceholder3: "div";
  yourEmailAddress: "div";
  inputphone: "div";
  divplaceholder4: "div";
  yourPhoneNumber: "div";
  divcontainerQualification: "div";
  yourQualification: "div";
  selectqualification: "div";
  div: "div";
  nurseRnOrNp: "div";
  buttonlpPomButton20: "div";
  _continue: "div";
  divlpPomBox26: "div";
  divlpPomImageContainer: "div";
  _6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png: "div";
  divlpPomImageContainer2: "div";
  c510588BTrainingCenterGifPreview2Gif: "div";
  divlpPomBox46: "div";
  divlpPomImageContainer3: "div";
  d33EfddcPinkChecksvg: "div";
  d33EfddcPinkChecksvg2: "div";
  learnFacialAnatomyBotulinumToxinScience: "div";
  divlpPomBox52: "div";
  divlpPomImageContainer4: "div";
  d33EfddcPinkChecksvg3: "div";
  d33EfddcPinkChecksvg4: "div";
  smallClassSizeWithDedicated11Support: "div";
  divlpPomBox55: "div";
  divlpPomImageContainer5: "div";
  d33EfddcPinkChecksvg5: "div";
  d33EfddcPinkChecksvg6: "div";
  strong: "div";
  divlpPomImageContainer6: "div";
  _3628940ACheckoutTrainingCenterPart210El08G000000000000028Png: "div";
  divlpPomImageContainer7: "div";
  c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png: "div";
  getPricingDetails: "div";
  divlpPomImageContainer8: "div";
  _046F157ALogo250X104X01P04X01L000002028Png: "div";
  span: "div";
  submitToRequestAdditionalInformation: "div";
  divlpPomBox33: "div";
  p: "div";
  iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg: "div";
  cartRemindersAtThePhoneNumberProvidedConsentIsNotA: "div";
  conditionToPurchaseMsgDataRatesMayApplyMsgFrequency: "div";
  variesReplyHelpForHelpAndStopToCancelViewOurPrivacy: "div";
  policyAndTermsOfService: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBook2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBook2__VariantsArgs;
    args?: PlasmicBook2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBook2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBook2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBook2__ArgProps,
          internalVariantPropNames: PlasmicBook2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBook2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBook2";
  } else {
    func.displayName = `PlasmicBook2.${nodeName}`;
  }
  return func;
}

export const PlasmicBook2 = Object.assign(
  // Top-level PlasmicBook2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    desktop: makeNodeComponent("desktop"),
    logo: makeNodeComponent("logo"),
    squeezeNav: makeNodeComponent("squeezeNav"),
    squeezeC1H1: makeNodeComponent("squeezeC1H1"),
    squeezeC1H2: makeNodeComponent("squeezeC1H2"),
    squeezeC2Thumbnail: makeNodeComponent("squeezeC2Thumbnail"),
    squeezeC2H1: makeNodeComponent("squeezeC2H1"),
    squeezeC2H12: makeNodeComponent("squeezeC2H12"),
    iconValue1: makeNodeComponent("iconValue1"),
    squeezeC2Icon1: makeNodeComponent("squeezeC2Icon1"),
    squeezeC2Icon1Value1: makeNodeComponent("squeezeC2Icon1Value1"),
    iconValue2: makeNodeComponent("iconValue2"),
    squeezeC2Icon2: makeNodeComponent("squeezeC2Icon2"),
    squeezeC2Icon1Value2: makeNodeComponent("squeezeC2Icon1Value2"),
    iconValue3: makeNodeComponent("iconValue3"),
    squeezeC2Icon3: makeNodeComponent("squeezeC2Icon3"),
    squeezeC2Icon1Value3: makeNodeComponent("squeezeC2Icon1Value3"),
    squeezeC2CtaH1: makeNodeComponent("squeezeC2CtaH1"),
    squeezeC2CtaH2: makeNodeComponent("squeezeC2CtaH2"),
    squeezeC2Proof: makeNodeComponent("squeezeC2Proof"),
    squeezeC2OfferH1: makeNodeComponent("squeezeC2OfferH1"),
    squeezeC2OfferThumbnail: makeNodeComponent("squeezeC2OfferThumbnail"),
    squeezeC2ValueH1: makeNodeComponent("squeezeC2ValueH1"),
    squeezeC2ValueH2: makeNodeComponent("squeezeC2ValueH2"),
    squeezeC2ValueH3: makeNodeComponent("squeezeC2ValueH3"),
    mobile: makeNodeComponent("mobile"),
    logo3: makeNodeComponent("logo3"),
    squeezeC2Thumbnail2: makeNodeComponent("squeezeC2Thumbnail2"),
    squeezeC2H13: makeNodeComponent("squeezeC2H13"),
    squeezeC2H14: makeNodeComponent("squeezeC2H14"),
    iconValue4: makeNodeComponent("iconValue4"),
    squeezeC2Icon12: makeNodeComponent("squeezeC2Icon12"),
    squeezeC2Icon1Value12: makeNodeComponent("squeezeC2Icon1Value12"),
    iconValue5: makeNodeComponent("iconValue5"),
    squeezeC2Icon22: makeNodeComponent("squeezeC2Icon22"),
    squeezeC2Icon1Value22: makeNodeComponent("squeezeC2Icon1Value22"),
    iconValue6: makeNodeComponent("iconValue6"),
    squeezeC2Icon32: makeNodeComponent("squeezeC2Icon32"),
    squeezeC2Icon1Value32: makeNodeComponent("squeezeC2Icon1Value32"),
    squeezeC2CtaH12: makeNodeComponent("squeezeC2CtaH12"),
    squeezeC2CtaH22: makeNodeComponent("squeezeC2CtaH22"),
    squeezeC2Proof2: makeNodeComponent("squeezeC2Proof2"),
    squeezeC2OfferH12: makeNodeComponent("squeezeC2OfferH12"),
    squeezeC2OfferThumbnail2: makeNodeComponent("squeezeC2OfferThumbnail2"),
    squeezeC2ValueH12: makeNodeComponent("squeezeC2ValueH12"),
    squeezeC2ValueH22: makeNodeComponent("squeezeC2ValueH22"),
    squeezeC2ValueH32: makeNodeComponent("squeezeC2ValueH32"),
    logo2: makeNodeComponent("logo2"),
    squeezeNav2: makeNodeComponent("squeezeNav2"),
    squeezeC1H12: makeNodeComponent("squeezeC1H12"),
    squeezeC1H22: makeNodeComponent("squeezeC1H22"),
    discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4:
      makeNodeComponent(
        "discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4"
      ),
    divlpPomRoot: makeNodeComponent("divlpPomRoot"),
    divlpPomBlock11: makeNodeComponent("divlpPomBlock11"),
    divlpPomBlock21: makeNodeComponent("divlpPomBlock21"),
    divlpPositionedContent: makeNodeComponent("divlpPositionedContent"),
    divlpPomBox32: makeNodeComponent("divlpPomBox32"),
    divlpPomForm19: makeNodeComponent("divlpPomForm19"),
    inputfirstname: makeNodeComponent("inputfirstname"),
    divplaceholder: makeNodeComponent("divplaceholder"),
    yourFirstName: makeNodeComponent("yourFirstName"),
    inputlastname: makeNodeComponent("inputlastname"),
    divplaceholder2: makeNodeComponent("divplaceholder2"),
    yourLastName: makeNodeComponent("yourLastName"),
    inputemail: makeNodeComponent("inputemail"),
    divplaceholder3: makeNodeComponent("divplaceholder3"),
    yourEmailAddress: makeNodeComponent("yourEmailAddress"),
    inputphone: makeNodeComponent("inputphone"),
    divplaceholder4: makeNodeComponent("divplaceholder4"),
    yourPhoneNumber: makeNodeComponent("yourPhoneNumber"),
    divcontainerQualification: makeNodeComponent("divcontainerQualification"),
    yourQualification: makeNodeComponent("yourQualification"),
    selectqualification: makeNodeComponent("selectqualification"),
    div: makeNodeComponent("div"),
    nurseRnOrNp: makeNodeComponent("nurseRnOrNp"),
    buttonlpPomButton20: makeNodeComponent("buttonlpPomButton20"),
    _continue: makeNodeComponent("_continue"),
    divlpPomBox26: makeNodeComponent("divlpPomBox26"),
    divlpPomImageContainer: makeNodeComponent("divlpPomImageContainer"),
    _6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png:
      makeNodeComponent(
        "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png"
      ),
    divlpPomImageContainer2: makeNodeComponent("divlpPomImageContainer2"),
    c510588BTrainingCenterGifPreview2Gif: makeNodeComponent(
      "c510588BTrainingCenterGifPreview2Gif"
    ),
    divlpPomBox46: makeNodeComponent("divlpPomBox46"),
    divlpPomImageContainer3: makeNodeComponent("divlpPomImageContainer3"),
    d33EfddcPinkChecksvg: makeNodeComponent("d33EfddcPinkChecksvg"),
    d33EfddcPinkChecksvg2: makeNodeComponent("d33EfddcPinkChecksvg2"),
    learnFacialAnatomyBotulinumToxinScience: makeNodeComponent(
      "learnFacialAnatomyBotulinumToxinScience"
    ),
    divlpPomBox52: makeNodeComponent("divlpPomBox52"),
    divlpPomImageContainer4: makeNodeComponent("divlpPomImageContainer4"),
    d33EfddcPinkChecksvg3: makeNodeComponent("d33EfddcPinkChecksvg3"),
    d33EfddcPinkChecksvg4: makeNodeComponent("d33EfddcPinkChecksvg4"),
    smallClassSizeWithDedicated11Support: makeNodeComponent(
      "smallClassSizeWithDedicated11Support"
    ),
    divlpPomBox55: makeNodeComponent("divlpPomBox55"),
    divlpPomImageContainer5: makeNodeComponent("divlpPomImageContainer5"),
    d33EfddcPinkChecksvg5: makeNodeComponent("d33EfddcPinkChecksvg5"),
    d33EfddcPinkChecksvg6: makeNodeComponent("d33EfddcPinkChecksvg6"),
    strong: makeNodeComponent("strong"),
    divlpPomImageContainer6: makeNodeComponent("divlpPomImageContainer6"),
    _3628940ACheckoutTrainingCenterPart210El08G000000000000028Png:
      makeNodeComponent(
        "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png"
      ),
    divlpPomImageContainer7: makeNodeComponent("divlpPomImageContainer7"),
    c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png: makeNodeComponent(
      "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png"
    ),
    getPricingDetails: makeNodeComponent("getPricingDetails"),
    divlpPomImageContainer8: makeNodeComponent("divlpPomImageContainer8"),
    _046F157ALogo250X104X01P04X01L000002028Png: makeNodeComponent(
      "_046F157ALogo250X104X01P04X01L000002028Png"
    ),
    span: makeNodeComponent("span"),
    submitToRequestAdditionalInformation: makeNodeComponent(
      "submitToRequestAdditionalInformation"
    ),
    divlpPomBox33: makeNodeComponent("divlpPomBox33"),
    p: makeNodeComponent("p"),
    iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg: makeNodeComponent(
      "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg"
    ),
    cartRemindersAtThePhoneNumberProvidedConsentIsNotA: makeNodeComponent(
      "cartRemindersAtThePhoneNumberProvidedConsentIsNotA"
    ),
    conditionToPurchaseMsgDataRatesMayApplyMsgFrequency: makeNodeComponent(
      "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency"
    ),
    variesReplyHelpForHelpAndStopToCancelViewOurPrivacy: makeNodeComponent(
      "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy"
    ),
    policyAndTermsOfService: makeNodeComponent("policyAndTermsOfService"),

    // Metadata about props expected for PlasmicBook2
    internalVariantProps: PlasmicBook2__VariantProps,
    internalArgProps: PlasmicBook2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBook2;
/* prettier-ignore-end */
