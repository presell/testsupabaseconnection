// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oxby7mL3tramyYPU9d77Uw
// Component: D-70OYRHSE35

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Offer2 from "../../Offer2"; // plasmic-import: 310BF2BT4t8y/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import BodyArticle1 from "../../BodyArticle1"; // plasmic-import: 7kZ0eP42r4Ge/component
import BodyArticle2 from "../../BodyArticle2"; // plasmic-import: 51q5_iAULU1e/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import { useScreenVariants as useScreenVariantscylgZgvvaF7G } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CYLGZgvvaF7G/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_offer_theme_1_component_css from "../offer_theme_1_component/plasmic_offer_theme_1_component.module.css"; // plasmic-import: 8JEXBqjqN3wJGHTHZ9qf9H/projectcss
import projectcss from "./plasmic_copy_of_feed_presell_ai.module.css"; // plasmic-import: oxby7mL3tramyYPU9d77Uw/projectcss
import sty from "./PlasmicArticleInfo2.module.css"; // plasmic-import: D-70OYRHSE35/css

createPlasmicElementProxy;

export type PlasmicArticleInfo2__VariantMembers = {};
export type PlasmicArticleInfo2__VariantsArgs = {};
type VariantPropType = keyof PlasmicArticleInfo2__VariantsArgs;
export const PlasmicArticleInfo2__VariantProps = new Array<VariantPropType>();

export type PlasmicArticleInfo2__ArgsType = {
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
};
type ArgPropType = keyof PlasmicArticleInfo2__ArgsType;
export const PlasmicArticleInfo2__ArgProps = new Array<ArgPropType>(
  "slot7",
  "slot8",
  "slot9"
);

export type PlasmicArticleInfo2__OverridesType = {
  root?: p.Flex<"div">;
  nav?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  logo?: p.Flex<typeof p.PlasmicImg>;
  aSlogan?: p.Flex<"div">;
  intro?: p.Flex<"div">;
  heroHeadline?: p.Flex<"div">;
  heroSubHeadline?: p.Flex<"div">;
  aCta?: p.Flex<"a"> & Partial<LinkProps>;
  reviewIcon2?: p.Flex<typeof p.PlasmicImg>;
  reviewStatement2?: p.Flex<"div">;
  body?: p.Flex<"div">;
  articleBody?: p.Flex<"div">;
  press?: p.Flex<"div">;
  pressIcons?: p.Flex<typeof p.PlasmicImg>;
  heroImage?: p.Flex<typeof p.PlasmicImg>;
  paragraph1?: p.Flex<"div">;
  h21?: p.Flex<"div">;
  paragraph2?: p.Flex<"div">;
  h22?: p.Flex<"div">;
  image2?: p.Flex<typeof p.PlasmicImg>;
  paragraph3?: p.Flex<"div">;
  h23?: p.Flex<"div">;
  image3?: p.Flex<typeof p.PlasmicImg>;
  paragraph4?: p.Flex<"div">;
  h24?: p.Flex<"div">;
  image4?: p.Flex<typeof p.PlasmicImg>;
  review1?: p.Flex<"div">;
  paragraph42?: p.Flex<"div">;
  paragraph43?: p.Flex<"div">;
  paragraph44?: p.Flex<"div">;
  review2?: p.Flex<"div">;
  paragraph45?: p.Flex<"div">;
  paragraph46?: p.Flex<"div">;
  paragraph47?: p.Flex<"div">;
  review3?: p.Flex<"div">;
  paragraph48?: p.Flex<"div">;
  paragraph49?: p.Flex<"div">;
  paragraph410?: p.Flex<"div">;
  h25?: p.Flex<"div">;
  h35?: p.Flex<"div">;
  offer2?: p.Flex<typeof Offer2>;
  offerH2?: p.Flex<"div">;
  offerParagraph?: p.Flex<"div">;
  image5?: p.Flex<typeof p.PlasmicImg>;
  paragraph6?: p.Flex<"div">;
  h26?: p.Flex<"div">;
  image6?: p.Flex<typeof p.PlasmicImg>;
  paragraph7?: p.Flex<"div">;
  h27?: p.Flex<"div">;
  image7?: p.Flex<typeof p.PlasmicImg>;
  aOutroH1?: p.Flex<"a"> & Partial<LinkProps>;
  aCta2?: p.Flex<"a"> & Partial<LinkProps>;
  aOutroH2?: p.Flex<"div">;
  reviewIcon?: p.Flex<typeof p.PlasmicImg>;
  aOutroH3?: p.Flex<"div">;
  aOutroImage?: p.Flex<typeof p.PlasmicImg>;
  reviewMugshot1?: p.Flex<typeof p.PlasmicImg>;
  reviewName1?: p.Flex<"div">;
  reviewIcon3?: p.Flex<typeof p.PlasmicImg>;
  reviewH11?: p.Flex<"div">;
  reviewP1?: p.Flex<"div">;
  reviewMugshot2?: p.Flex<typeof p.PlasmicImg>;
  reviewName2?: p.Flex<"div">;
  reviewIcon4?: p.Flex<typeof p.PlasmicImg>;
  reviewH12?: p.Flex<"div">;
  reviewP2?: p.Flex<"div">;
  reviewMugshot3?: p.Flex<typeof p.PlasmicImg>;
  reviewName3?: p.Flex<"div">;
  reviewIcon5?: p.Flex<typeof p.PlasmicImg>;
  reviewH122?: p.Flex<"div">;
  reviewP3?: p.Flex<"div">;
  reviewIcon6?: p.Flex<typeof p.PlasmicImg>;
  reviewStatement?: p.Flex<"div">;
  ctaCardH1?: p.Flex<"div">;
  ctaCardH2?: p.Flex<"div">;
  aCta3?: p.Flex<"a"> & Partial<LinkProps>;
  httpRestApiFetcher?: p.Flex<typeof DataFetcher>;
  _1554Px?: p.Flex<"div">;
  div2?: p.Flex<"div">;
  div3?: p.Flex<"div">;
  div4?: p.Flex<"div">;
  h1?: p.Flex<"div">;
  div5?: p.Flex<"div">;
  rated49StarsBy100000Customers?: p.Flex<"div">;
  button?: p.Flex<"button">;
  fingericonpng?: p.Flex<"div">;
  div6?: p.Flex<"div">;
  bodyArticle1?: p.Flex<typeof BodyArticle1>;
  div30?: p.Flex<"div">;
  div31?: p.Flex<"div">;
  div32?: p.Flex<"div">;
  sidereview1Png?: p.Flex<"div">;
  starpng2?: p.Flex<"div">;
  bestAlternativeToSmoking?: p.Flex<"div">;
  iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife?: p.Flex<"div">;
  div33?: p.Flex<"div">;
  div34?: p.Flex<"div">;
  sidereview2Png?: p.Flex<"div">;
  starpng3?: p.Flex<"div">;
  awesome?: p.Flex<"div">;
  excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe?: p.Flex<"div">;
  div36?: p.Flex<"div">;
  div37?: p.Flex<"div">;
  sidereview3Png?: p.Flex<"div">;
  starpng4?: p.Flex<"div">;
  loveLove?: p.Flex<"div">;
  p?: p.Flex<"div">;
  br4?: p.Flex<"div">;
  br5?: p.Flex<"div">;
  _414Px?: p.Flex<"div">;
  div41?: p.Flex<"div">;
  logopng3?: p.Flex<"div">;
  thisIsAnAdvertorial2?: p.Flex<"div">;
  div42?: p.Flex<"div">;
  div43?: p.Flex<"div">;
  div44?: p.Flex<"div">;
  aget12?: p.Flex<"div">;
  fingericonpng5?: p.Flex<"div">;
  div45?: p.Flex<"div">;
  starpng6?: p.Flex<"div">;
  rated49StarsBy100000Customers3?: p.Flex<"div">;
  a3?: p.Flex<"div">;
  fingericonpng4?: p.Flex<"div">;
  div46?: p.Flex<"div">;
  div47?: p.Flex<"div">;
  div48?: p.Flex<"div">;
  div49?: p.Flex<"div">;
  div50?: p.Flex<"div">;
  nwMobbrand1Png?: p.Flex<"div">;
  nwMobbrand2Png?: p.Flex<"div">;
  nwMobbrand3Png?: p.Flex<"div">;
  midbannerjpg2?: p.Flex<"div">;
  whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2?: p.Flex<"div">;
  withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2?: p.Flex<"div">;
  youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2?: p.Flex<"div">;
  sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2?: p.Flex<"div">;
  areYouOneOfTheseTwoTypesOfPeople?: p.Flex<"div">;
  div51?: p.Flex<"div">;
  div52?: p.Flex<"div">;
  div53?: p.Flex<"div">;
  sparqHasTheAnswersYoureLookingFor?: p.Flex<"div">;
  ul2?: p.Flex<"div">;
  li7?: p.Flex<"div">;
  getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit?: p.Flex<"div">;
  li8?: p.Flex<"div">;
  satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals?: p.Flex<"div">;
  li9?: p.Flex<"div">;
  replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals?: p.Flex<"div">;
  li10?: p.Flex<"div">;
  promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation?: p.Flex<"div">;
  li11?: p.Flex<"div">;
  enjoyAHealthierAlternativeWithoutGivingUpYourHabit?: p.Flex<"div">;
  li12?: p.Flex<"div">;
  tbody2?: p.Flex<"div">;
  tr7?: p.Flex<"div">;
  th4?: p.Flex<"div">;
  th5?: p.Flex<"div">;
  th6?: p.Flex<"div">;
  tr8?: p.Flex<"div">;
  td16?: p.Flex<"div">;
  td17?: p.Flex<"div">;
  tickpng6?: p.Flex<"div">;
  td18?: p.Flex<"div">;
  crosspng6?: p.Flex<"div">;
  tr9?: p.Flex<"div">;
  td19?: p.Flex<"div">;
  td20?: p.Flex<"div">;
  tickpng7?: p.Flex<"div">;
  td21?: p.Flex<"div">;
  crosspng7?: p.Flex<"div">;
  tr10?: p.Flex<"div">;
  td22?: p.Flex<"div">;
  td23?: p.Flex<"div">;
  tickpng8?: p.Flex<"div">;
  td24?: p.Flex<"div">;
  crosspng8?: p.Flex<"div">;
  tr11?: p.Flex<"div">;
  td25?: p.Flex<"div">;
  td26?: p.Flex<"div">;
  tickpng9?: p.Flex<"div">;
  td27?: p.Flex<"div">;
  crosspng9?: p.Flex<"div">;
  tr12?: p.Flex<"div">;
  td28?: p.Flex<"div">;
  td29?: p.Flex<"div">;
  tickpng10?: p.Flex<"div">;
  td30?: p.Flex<"div">;
  crosspng10?: p.Flex<"div">;
  happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2?: p.Flex<"div">;
  reviewjpg2?: p.Flex<"div">;
  nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2?: p.Flex<"div">;
  youCanHaveBothAndAPlusOneForFree2?: p.Flex<"div">;
  divprodarea2?: p.Flex<"div">;
  div54?: p.Flex<"div">;
  div55?: p.Flex<"div">;
  prodimagepng2?: p.Flex<"div">;
  div56?: p.Flex<"div">;
  buy2Get2?: p.Flex<"div">;
  free2?: p.Flex<"div">;
  div57?: p.Flex<"div">;
  div58?: p.Flex<"div">;
  div59?: p.Flex<"div">;
  div60?: p.Flex<"div">;
  div61?: p.Flex<"div">;
  div62?: p.Flex<"div">;
  strawberry2?: p.Flex<"div">;
  div63?: p.Flex<"div">;
  div64?: p.Flex<"div">;
  div65?: p.Flex<"div">;
  vanila2?: p.Flex<"div">;
  div66?: p.Flex<"div">;
  aget2?: p.Flex<"div">;
  fingericonpng6?: p.Flex<"div">;
  paymentcardpng2?: p.Flex<"div">;
  faQs2?: p.Flex<"div">;
  div67?: p.Flex<"div">;
  div68?: p.Flex<"div">;
  div69?: p.Flex<"div">;
  div70?: p.Flex<"div">;
  div71?: p.Flex<"div">;
  div72?: p.Flex<"div">;
  div73?: p.Flex<"div">;
  starpng7?: p.Flex<"div">;
  rated49StarsBy100000Customers4?: p.Flex<"div">;
  h33?: p.Flex<"div">;
  soWhatAre2?: p.Flex<"div">;
  takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2?: p.Flex<"div">;
  aget3?: p.Flex<"div">;
  fingericonpng7?: p.Flex<"div">;
  div74?: p.Flex<"div">;
  logopng4?: p.Flex<"div">;
  copyrights2022AllRightsReserved2?: p.Flex<"div">;
  div75?: p.Flex<"div">;
  embedHtml?: p.Flex<typeof Embed>;
};

export interface DefaultArticleInfo2Props {
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicArticleInfo2__RenderFunc(props: {
  variants: PlasmicArticleInfo2__VariantsArgs;
  args: PlasmicArticleInfo2__ArgsType;
  overrides: PlasmicArticleInfo2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscylgZgvvaF7G()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_offer_theme_1_component_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"nav"}
        data-plasmic-override={overrides.nav}
        className={classNames(projectcss.all, sty.nav)}
      >
        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column___4IxXh)}>
            <p.PlasmicImg
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              alt={""}
              className={classNames(sty.logo)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"125px" as const}
              loading={"eager" as const}
              src={(() => {
                try {
                  return $ctx.fetchedData.records[0].fields.logo[0].url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "https://site-assets.plasmic.app/32203f47b3f548c263bd85bea8e83af5.png";
                  }
                  throw e;
                }
              })()}
            />
          </div>
          <div className={classNames(projectcss.all, sty.column__yK7)}>
            <div
              data-plasmic-name={"aSlogan"}
              data-plasmic-override={overrides.aSlogan}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.aSlogan
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.aSlogan;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return '"The Evolution of Inhalation"';
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"intro"}
        data-plasmic-override={overrides.intro}
        className={classNames(projectcss.all, sty.intro)}
      >
        <div
          data-plasmic-name={"heroHeadline"}
          data-plasmic-override={overrides.heroHeadline}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.heroHeadline
          )}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly") ? (
            <React.Fragment>
              {(() => {
                try {
                  return $ctx.fetchedData.records[0].fields.heroHeadline;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Want All The Joy Of Inhalation, But None Of The Health Compromises?";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          ) : (
            <React.Fragment>
              {(() => {
                try {
                  return $ctx.fetchedData.records[0].fields.heroHeadline;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Want All The Joy Of Inhalation, But None Of The Health Compromises?";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          )}
        </div>
        <div
          data-plasmic-name={"heroSubHeadline"}
          data-plasmic-override={overrides.heroSubHeadline}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.heroSubHeadline
          )}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly") ? (
            <React.Fragment>
              {(() => {
                try {
                  return $ctx.fetchedData.records[0].fields.heroSubHeadline;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          ) : (
            <React.Fragment>
              {(() => {
                try {
                  return $ctx.fetchedData.records[0].fields.heroSubHeadline;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          )}
        </div>
        <p.PlasmicLink
          data-plasmic-name={"aCta"}
          data-plasmic-override={overrides.aCta}
          className={classNames(projectcss.all, projectcss.a, sty.aCta)}
          component={Link}
          href={(() => {
            try {
              return $ctx.fetchedData.records[0].fields["Step 2 URL"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onClick={async event => {
            const $steps = {};
            $steps["setVariable"] = true
              ? (() => {
                  const actionArgs = {};
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "TDSNw16NfpY8",
                      componentUuid: "D-70OYRHSE35"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        undefined;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["setVariable"] === "object" &&
              typeof $steps["setVariable"].then === "function"
            ) {
              $steps["setVariable"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "TDSNw16NfpY8",
                  componentUuid: "D-70OYRHSE35"
                },
                $steps["setVariable"]
              );
            }
          }}
          platform={"nextjs"}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.aCTA;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "CLAIM FREE DEVICE 👉";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ),
            value: args.slot8,
            className: classNames(sty.slotTargetSlot8)
          })}
        </p.PlasmicLink>
        <div className={classNames(projectcss.all, sty.freeBox__upqQ)}>
          <p.PlasmicImg
            data-plasmic-name={"reviewIcon2"}
            data-plasmic-override={overrides.reviewIcon2}
            alt={""}
            className={classNames(sty.reviewIcon2)}
            displayHeight={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("11px" as const)
                : ("auto" as const)
            }
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={(() => {
              try {
                return $ctx.fetchedData.records[0].fields.review_icon[0].url;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "https://site-assets.plasmic.app/d0f731318d778a7cb293f95dc3f20a95.png";
                }
                throw e;
              }
            })()}
          />

          <div
            data-plasmic-name={"reviewStatement2"}
            data-plasmic-override={overrides.reviewStatement2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.reviewStatement2
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $ctx.fetchedData.records[0].fields.review_statement;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(projectcss.all, sty.body)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__b2Tws)}>
          <div
            data-plasmic-name={"articleBody"}
            data-plasmic-override={overrides.articleBody}
            className={classNames(projectcss.all, sty.articleBody)}
          >
            {true ? (
              <div
                data-plasmic-name={"press"}
                data-plasmic-override={overrides.press}
                className={classNames(projectcss.all, sty.press)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e9NLm
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.featured_text;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "As Featured In:";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <p.PlasmicImg
                  data-plasmic-name={"pressIcons"}
                  data-plasmic-override={overrides.pressIcons}
                  alt={""}
                  className={classNames(sty.pressIcons)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"35px" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("300px" as const)
                      : ("475px" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.press_icons[0]
                        .url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://site-assets.plasmic.app/59dfa617677d4eee7872eb46f13efdc6.svg";
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            ) : null}
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__mmuRp
              )}
              component={Link}
              href={(() => {
                try {
                  return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                data-plasmic-name={"heroImage"}
                data-plasmic-override={overrides.heroImage}
                alt={""}
                className={classNames(sty.heroImage)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"eager" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.heroImage[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/137d79ffe4aa81a9b6e17f8782fd698b.png";
                    }
                    throw e;
                  }
                })()}
              />
            </p.PlasmicLink>
            <div
              data-plasmic-name={"paragraph1"}
              data-plasmic-override={overrides.paragraph1}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.paragraph1
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.paragraph1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Imagine a world where you could inhale vitamins, minerals, and antioxidants to improve your well-being.\n\nThink about what it would be like to never have to suffer again through the jitters and anxiety that traditional inhalation methods bring.\n\nWhat if you’ll no longer have to choose between your habit or quitting, or feel like you are compromising on health just to get the throat hit and flavor you enjoy?";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"h21"}
              data-plasmic-override={overrides.h21}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.h21
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.h2_1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "All Of The Above Is Possible…With Sparq’s Vitamin Air®.";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__yFLrF
              )}
              component={Link}
              href={(() => {
                try {
                  return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ljNv)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"eager" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.image1[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </p.PlasmicLink>
            <div
              data-plasmic-name={"paragraph2"}
              data-plasmic-override={overrides.paragraph2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.paragraph2
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.paragraph2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "When you make the switch to Sparq, you're choosing to go beyond your typical inhalation experience.\n\nWith Sparq’s Vitamin Air, you don’t have to choose between staying healthy and treating yourself. Instead, you can lead a healthy lifestyle while also quenching your thirst for that truly satisfying hit.\n\nYou can enjoy delicious hitting flavors in the form of a slim, compact, and odorless device while delivering nutrients and botanicals to your body. They will give you energy, mental clarity, boost your metabolism, and protect your body against aging.\n\nSparq provides a satisfying inhalation experience without any of the harmful chemicals or stimulants.";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"h22"}
              data-plasmic-override={overrides.h22}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.h22
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.h2_2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Are YOU One Of These Two Types Of People?";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___2NbjH
              )}
              component={Link}
              href={(() => {
                try {
                  return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                data-plasmic-name={"image2"}
                data-plasmic-override={overrides.image2}
                alt={""}
                className={classNames(sty.image2)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"eager" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.image2[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/137d79ffe4aa81a9b6e17f8782fd698b.png";
                    }
                    throw e;
                  }
                })()}
              />
            </p.PlasmicLink>
            <div
              data-plasmic-name={"paragraph3"}
              data-plasmic-override={overrides.paragraph3}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.paragraph3
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.paragraph3;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "If you're trying to quit, it can feel like every craving is another insurmountable problem to face.. Even if you've managed to go several days, weeks, or months without caving, you still crave that puff…that throat hit…that oh so satisfying flavor.\n\nWe know nicotine is addictive…but did you know it’s the oral fixation that keeps bringing you back? When you drop the habit, nicotine is out of your system in 72 hours but the oral fixation can last in the brain for up to 10 years!\n\nThat's why no matter how many times you try, you find yourself going back to your old habit again and again. Fortunately, we've got the alternative that will break this repetitive pattern!\n\nThe world is your oyster, and you want nothing less than to enjoy it to the fullest extent. Maybe you're not into using inhalation devices but you've always been curious as to what all the hype is about. Sparq offers the perfect option for the curious spirit: all of the enjoyment and flavors of traditional products/devices but without the harmful chemicals or addictive stimulants!\n\nNatural flavoring that is intensely delicious, vitamins, amino acids and botanicals, all wrapped in a device designed to provide a superior inhalation experience.";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"h23"}
              data-plasmic-override={overrides.h23}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.h23
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.h2_3;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Sparq Has The Answers You’re Looking for:";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__iGfAv
              )}
              component={Link}
              href={(() => {
                try {
                  return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                data-plasmic-name={"image3"}
                data-plasmic-override={overrides.image3}
                alt={""}
                className={classNames(sty.image3)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"eager" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.image3[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/137d79ffe4aa81a9b6e17f8782fd698b.png";
                    }
                    throw e;
                  }
                })()}
              />
            </p.PlasmicLink>
            <div
              data-plasmic-name={"paragraph4"}
              data-plasmic-override={overrides.paragraph4}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.paragraph4
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.paragraph4;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Get rid of those nicotine cravings whilst still enjoying that strong and intense throat hit.\n\nSatisfy your oral fixation without consuming toxic substances or harmful chemicals.\n\nReplace those harmful chemicals with vitamins, amino acids, and botanicals.\n\nPromote deep-breathing and relieve anxiety with each vitamin infused inhalation.\n\nEnjoy a healthier alternative without giving up your habit.\n\nTake your device everywhere with its ultramodern and compact design and use it anytime you want.";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"h24"}
              data-plasmic-override={overrides.h24}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.h24
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.h2_4;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Happy Quitters, Vitamin Lovers, And Healthy Choice Followers Can't Stop Talking About Vitamin Air:";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__n3Br
              )}
              component={Link}
              href={(() => {
                try {
                  return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                data-plasmic-name={"image4"}
                data-plasmic-override={overrides.image4}
                alt={""}
                className={classNames(sty.image4)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"eager" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.image4[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/5b4aa8dfa112312a25d7bd1785ea2ec3.png";
                    }
                    throw e;
                  }
                })()}
              />
            </p.PlasmicLink>
            <div
              data-plasmic-name={"review1"}
              data-plasmic-override={overrides.review1}
              className={classNames(projectcss.all, sty.review1)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__fb6G9)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.review_icon[0]
                      .url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/d0f731318d778a7cb293f95dc3f20a95.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"paragraph42"}
                data-plasmic-override={overrides.paragraph42}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph42
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.paragraph4_2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Amazing product for an amazing price";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"paragraph43"}
                data-plasmic-override={overrides.paragraph43}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph43
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.paragraph4_3;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "If you are trying to quit then this is the product for you its amazing and worth every penny.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"paragraph44"}
                data-plasmic-override={overrides.paragraph44}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph44
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.paragraph4_4;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Todd S.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div
              data-plasmic-name={"review2"}
              data-plasmic-override={overrides.review2}
              className={classNames(projectcss.all, sty.review2)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__q0K7)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.review_icon[0]
                      .url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/d0f731318d778a7cb293f95dc3f20a95.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"paragraph45"}
                data-plasmic-override={overrides.paragraph45}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph45
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.paragraph4_5;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Best friend as I quit cigs!";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"paragraph46"}
                data-plasmic-override={overrides.paragraph46}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph46
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.paragraph4_6;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "I love the taste and it doesnt make me cough at all! Super nice product and cool packaging! I will be ordering again!";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"paragraph47"}
                data-plasmic-override={overrides.paragraph47}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph47
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.paragraph4_7;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Jessica M.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div
              data-plasmic-name={"review3"}
              data-plasmic-override={overrides.review3}
              className={classNames(projectcss.all, sty.review3)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__pLoze)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.review_icon[0]
                      .url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/d0f731318d778a7cb293f95dc3f20a95.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"paragraph48"}
                data-plasmic-override={overrides.paragraph48}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph48
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.paragraph4_8;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Sparq was very refreshing and awesome";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"paragraph49"}
                data-plasmic-override={overrides.paragraph49}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph49
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.paragraph4_9;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "My overall experience was fantastic. I loved the cleanliness of the vapor and how it tasted naturally fruity.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"paragraph410"}
                data-plasmic-override={overrides.paragraph410}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.paragraph410
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.paragraph4_10;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Philip G.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div
              data-plasmic-name={"h25"}
              data-plasmic-override={overrides.h25}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.h25
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.h2_5;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Now you don't have to choose between either Strawberry or Vanilla flavor. ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"h35"}
              data-plasmic-override={overrides.h35}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.h35
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.h3_5;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {true ? (
              <Offer2
                data-plasmic-name={"offer2"}
                data-plasmic-override={overrides.offer2}
                className={classNames("__wab_instance", sty.offer2)}
                slot3={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zfskD
                    )}
                  >
                    {"SPECIAL OFFER"}
                  </div>
                }
                slot4={
                  <div
                    data-plasmic-name={"offerH2"}
                    data-plasmic-override={overrides.offerH2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.offerH2
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return $ctx.fetchedData.records[0].fields.offer_h2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "FREE VITAMIN AIR";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                }
                slot5={
                  <div
                    data-plasmic-name={"offerParagraph"}
                    data-plasmic-override={overrides.offerParagraph}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.offerParagraph
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return $ctx.fetchedData.records[0].fields
                              .offer_paragraph;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Money-Back Guarantee: Better Flavor & Harder Hits or Your Money Back.";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                }
                slot7={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__riKeg
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      "CLAIM FREE DEVICE \ud83d\udc49"
                    ) : (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return $ctx.fetchedData.records[0].fields
                                .offer_cta;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "CLAIM FREE DEVICE 👉";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    )}
                  </div>
                }
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___2MhIi)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : ("auto" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"eager" as const}
                  src={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.offer_image[0]
                        .url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://site-assets.plasmic.app/6187c6867888745d6599b0c2b977be87.svg";
                      }
                      throw e;
                    }
                  })()}
                />
              </Offer2>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__ysr5A)}>
              <div className={classNames(projectcss.all, sty.freeBox__cc3Q6)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___6Sao3)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"425px" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"eager" as const}
                  src={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.offer_image[0]
                        .url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://site-assets.plasmic.app/3953bb4d0c4e841edc565fe320ed09af.png";
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__id4Um)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z0Rpo
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.fetchedData.records[0].fields.offer_h1;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "SPECIAL OFFER";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.fetchedData.records[0].fields.offer_h1;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "SPECIAL OFFER";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uoYp7
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.offer_h2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "FREE VITAMIN AIR";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h6Ui
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields
                          .offer_paragraph;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Money-Back Guarantee: Better Flavor & Harder Hits or Your Money Back.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__pdhT3
                  )}
                  component={Link}
                  href={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.offer_cta;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "CHOOSE FLAVOR";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </p.PlasmicLink>
              </div>
            </div>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___70IOl
              )}
              component={Link}
              href={(() => {
                try {
                  return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                data-plasmic-name={"image5"}
                data-plasmic-override={overrides.image5}
                alt={""}
                className={classNames(sty.image5)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"eager" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.image5[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/5b4aa8dfa112312a25d7bd1785ea2ec3.png";
                    }
                    throw e;
                  }
                })()}
              />
            </p.PlasmicLink>
            <div
              data-plasmic-name={"paragraph6"}
              data-plasmic-override={overrides.paragraph6}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.paragraph6
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.paragraph6;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Get rid of those nicotine cravings whilst still enjoying that strong and intense throat hit.\n\nSatisfy your oral fixation without consuming toxic substances or harmful chemicals.\n\nReplace those harmful chemicals with vitamins, amino acids, and botanicals.\n\nPromote deep-breathing and relieve anxiety with each vitamin infused inhalation.\n\nEnjoy a healthier alternative without giving up your habit.\n\nTake your device everywhere with its ultramodern and compact design and use it anytime you want.";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"h26"}
              data-plasmic-override={overrides.h26}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.h26
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.h2_6;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Now you don't have to choose between either Strawberry or Vanilla flavor. ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___0KtSr
              )}
              component={Link}
              href={(() => {
                try {
                  return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                data-plasmic-name={"image6"}
                data-plasmic-override={overrides.image6}
                alt={""}
                className={classNames(sty.image6)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"eager" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.image6[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/5b4aa8dfa112312a25d7bd1785ea2ec3.png";
                    }
                    throw e;
                  }
                })()}
              />
            </p.PlasmicLink>
            <div
              data-plasmic-name={"paragraph7"}
              data-plasmic-override={overrides.paragraph7}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.paragraph7
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.paragraph7;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Get rid of those nicotine cravings whilst still enjoying that strong and intense throat hit.\n\nSatisfy your oral fixation without consuming toxic substances or harmful chemicals.\n\nReplace those harmful chemicals with vitamins, amino acids, and botanicals.\n\nPromote deep-breathing and relieve anxiety with each vitamin infused inhalation.\n\nEnjoy a healthier alternative without giving up your habit.\n\nTake your device everywhere with its ultramodern and compact design and use it anytime you want.";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"h27"}
              data-plasmic-override={overrides.h27}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.h27
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.h2_7;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Now you don't have to choose between either Strawberry or Vanilla flavor. ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__lSyX
              )}
              component={Link}
              href={(() => {
                try {
                  return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                data-plasmic-name={"image7"}
                data-plasmic-override={overrides.image7}
                alt={""}
                className={classNames(sty.image7)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"eager" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.image7[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/5b4aa8dfa112312a25d7bd1785ea2ec3.png";
                    }
                    throw e;
                  }
                })()}
              />
            </p.PlasmicLink>
            <p.PlasmicLink
              data-plasmic-name={"aOutroH1"}
              data-plasmic-override={overrides.aOutroH1}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.aOutroH1
              )}
              component={Link}
              href={(() => {
                try {
                  return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.aOutroH1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Click Here To Learn More & Order Vitamin Air Today!";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </p.PlasmicLink>
            <div className={classNames(projectcss.all, sty.freeBox___5Nnz)}>
              <p.PlasmicLink
                data-plasmic-name={"aCta2"}
                data-plasmic-override={overrides.aCta2}
                className={classNames(projectcss.all, projectcss.a, sty.aCta2)}
                component={Link}
                href={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};
                  $steps["setVariable"] = true
                    ? (() => {
                        const actionArgs = {};
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "o1uNruwe8F2M",
                            componentUuid: "D-70OYRHSE35"
                          },
                          () =>
                            (({ variable, value, startIndex, deleteCount }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              undefined;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["setVariable"] === "object" &&
                    typeof $steps["setVariable"].then === "function"
                  ) {
                    $steps["setVariable"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "o1uNruwe8F2M",
                        componentUuid: "D-70OYRHSE35"
                      },
                      $steps["setVariable"]
                    );
                  }
                }}
                platform={"nextjs"}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.fetchedData.records[0].fields.aCTA;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "CLAIM FREE DEVICE 👉";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ),
                  value: args.slot7,
                  className: classNames(sty.slotTargetSlot7)
                })}
              </p.PlasmicLink>
              <div className={classNames(projectcss.all, sty.freeBox__eF3Rw)} />

              <div className={classNames(projectcss.all, sty.freeBox__obiCt)}>
                <div
                  data-plasmic-name={"aOutroH2"}
                  data-plasmic-override={overrides.aOutroH2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.aOutroH2
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.aOutroH2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Fast Same-Day Shipping";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <p.PlasmicImg
                  data-plasmic-name={"reviewIcon"}
                  data-plasmic-override={overrides.reviewIcon}
                  alt={""}
                  className={classNames(sty.reviewIcon)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("11px" as const)
                      : ("auto" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_icon[0]
                        .url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://site-assets.plasmic.app/d0f731318d778a7cb293f95dc3f20a95.png";
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"aOutroH3"}
                  data-plasmic-override={overrides.aOutroH3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.aOutroH3
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.aOutroH3;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___63M8
              )}
              component={Link}
              href={(() => {
                try {
                  return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                data-plasmic-name={"aOutroImage"}
                data-plasmic-override={overrides.aOutroImage}
                alt={""}
                className={classNames(sty.aOutroImage)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"eager" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.aOutroImage[0]
                      .url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/5b4aa8dfa112312a25d7bd1785ea2ec3.png";
                    }
                    throw e;
                  }
                })()}
              />
            </p.PlasmicLink>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__bOe1H)}>
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__cDh3R,
                "block1" as const
              )}
              id={"review1" as const}
            >
              <p.PlasmicImg
                data-plasmic-name={"reviewMugshot1"}
                data-plasmic-override={overrides.reviewMugshot1}
                alt={""}
                className={classNames(sty.reviewMugshot1)}
                displayHeight={"100px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields
                      .review_mugshot_1[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/9d66a0147af3f6573f1a0793389ee16a.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"reviewName1"}
                data-plasmic-override={overrides.reviewName1}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewName1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_name_1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Isaiah S.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <p.PlasmicImg
                data-plasmic-name={"reviewIcon3"}
                data-plasmic-override={overrides.reviewIcon3}
                alt={""}
                className={classNames(sty.reviewIcon3)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.review_icon[0]
                      .url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/d0f731318d778a7cb293f95dc3f20a95.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"reviewH11"}
                data-plasmic-override={overrides.reviewH11}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewH11
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_h1_1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "BEST ALTERNATIVE TO CIGS";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"reviewP1"}
                data-plasmic-override={overrides.reviewP1}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewP1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_p_1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "I smoked for over 29 years and tired to quit several times with no success. Until I came across sparq. Now not only do I not smoke, I’m doing something healthy in place! Great product, I’ll be a user for life!";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__gAzUr)}>
              <p.PlasmicImg
                data-plasmic-name={"reviewMugshot2"}
                data-plasmic-override={overrides.reviewMugshot2}
                alt={""}
                className={classNames(sty.reviewMugshot2)}
                displayHeight={"100px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields
                      .review_mugshot_2[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/9d66a0147af3f6573f1a0793389ee16a.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"reviewName2"}
                data-plasmic-override={overrides.reviewName2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewName2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_name_2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Isaiah S.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <p.PlasmicImg
                data-plasmic-name={"reviewIcon4"}
                data-plasmic-override={overrides.reviewIcon4}
                alt={""}
                className={classNames(sty.reviewIcon4)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.review_icon[0]
                      .url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/d0f731318d778a7cb293f95dc3f20a95.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"reviewH12"}
                data-plasmic-override={overrides.reviewH12}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewH12
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_h1_2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "BEST ALTERNATIVE TO CIGS";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"reviewP2"}
                data-plasmic-override={overrides.reviewP2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewP2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_p_2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "I smoked for over 29 years and tired to quit several times with no success. Until I came across sparq. Now not only do I not smoke, I’m doing something healthy in place! Great product, I’ll be a user for life!";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__j2R0C)}>
              <p.PlasmicImg
                data-plasmic-name={"reviewMugshot3"}
                data-plasmic-override={overrides.reviewMugshot3}
                alt={""}
                className={classNames(sty.reviewMugshot3)}
                displayHeight={"100px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields
                      .review_mugshot_3[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/9d66a0147af3f6573f1a0793389ee16a.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"reviewName3"}
                data-plasmic-override={overrides.reviewName3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewName3
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_name_3;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Isaiah S.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <p.PlasmicImg
                data-plasmic-name={"reviewIcon5"}
                data-plasmic-override={overrides.reviewIcon5}
                alt={""}
                className={classNames(sty.reviewIcon5)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.review_icon[0]
                      .url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/d0f731318d778a7cb293f95dc3f20a95.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"reviewH122"}
                data-plasmic-override={overrides.reviewH122}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewH122
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_h1_3;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "BEST ALTERNATIVE TO CIGS";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"reviewP3"}
                data-plasmic-override={overrides.reviewP3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewP3
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_p_3;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "I smoked for over 29 years and tired to quit several times with no success. Until I came across sparq. Now not only do I not smoke, I’m doing something healthy in place! Great product, I’ll be a user for life!";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__yyAvt)}>
              <p.PlasmicImg
                data-plasmic-name={"reviewIcon6"}
                data-plasmic-override={overrides.reviewIcon6}
                alt={""}
                className={classNames(sty.reviewIcon6)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100px" as const}
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.review_icon[0]
                      .url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://site-assets.plasmic.app/d0f731318d778a7cb293f95dc3f20a95.png";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"reviewStatement"}
                data-plasmic-override={overrides.reviewStatement}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewStatement
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields
                        .review_statement;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"ctaCardH1"}
                data-plasmic-override={overrides.ctaCardH1}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.ctaCardH1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.cta_card_h1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "So What Are You Waiting For?";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"ctaCardH2"}
                data-plasmic-override={overrides.ctaCardH2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.ctaCardH2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.cta_card_h2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Take the first and easiest step towards quitting and receive 15% OFF your first purchase";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <p.PlasmicLink
                data-plasmic-name={"aCta3"}
                data-plasmic-override={overrides.aCta3}
                className={classNames(projectcss.all, projectcss.a, sty.aCta3)}
                component={Link}
                href={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.aCTA;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};
                  $steps["setVariable"] = true
                    ? (() => {
                        const actionArgs = {};
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "aM1UUW8pqZps",
                            componentUuid: "D-70OYRHSE35"
                          },
                          () =>
                            (({ variable, value, startIndex, deleteCount }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              undefined;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["setVariable"] === "object" &&
                    typeof $steps["setVariable"].then === "function"
                  ) {
                    $steps["setVariable"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "aM1UUW8pqZps",
                        componentUuid: "D-70OYRHSE35"
                      },
                      $steps["setVariable"]
                    );
                  }
                }}
                platform={"nextjs"}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.fetchedData.records[0].fields.aCTA;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "CLAIM FREE DEVICE 👉";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ),
                  value: args.slot9,
                  className: classNames(sty.slotTargetSlot9)
                })}
              </p.PlasmicLink>
            </div>
          </div>
        </div>
      </div>
      <DataFetcher
        data-plasmic-name={"httpRestApiFetcher"}
        data-plasmic-override={overrides.httpRestApiFetcher}
        className={classNames("__wab_instance", sty.httpRestApiFetcher)}
        dataName={``}
        errorDisplay={
          <ph.DataCtxReader>{$ctx => "Error fetching data"}</ph.DataCtxReader>
        }
        headers={{
          "Content-Type": "application/json",
          Accept: "application/json"
        }}
        loadingDisplay={
          <ph.DataCtxReader>
            {$ctx =>
              true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mkozN
                  )}
                >
                  {"Loading..."}
                </div>
              ) : null
            }
          </ph.DataCtxReader>
        }
        method={"GET" as const}
        noLayout={false}
        url={
          "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS?filterByFormula=slug=" as const
        }
      >
        <ph.DataCtxReader>
          {$ctx => (
            <React.Fragment>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  data-plasmic-name={"_1554Px"}
                  data-plasmic-override={overrides._1554Px}
                  className={classNames(projectcss.all, sty._1554Px)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"div2"}
                    data-plasmic-override={overrides.div2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.div2)}
                  >
                    <div
                      data-plasmic-name={"div3"}
                      data-plasmic-override={overrides.div3}
                      className={classNames(projectcss.all, sty.div3)}
                    >
                      <div
                        data-plasmic-name={"div4"}
                        data-plasmic-override={overrides.div4}
                        className={classNames(projectcss.all, sty.div4)}
                      >
                        <div
                          data-plasmic-name={"h1"}
                          data-plasmic-override={overrides.h1}
                          className={classNames(projectcss.all, sty.h1)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xEgS
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchedData.records[0].fields
                                    .heroHeadline;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Want All The Joy Of Inhalation, But";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jgCw9
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.records[0].fields
                                  .heroSubHeadline;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Inhale. Relax. Enjoy Your Daily Vitamin Boost!";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          data-plasmic-name={"div5"}
                          data-plasmic-override={overrides.div5}
                          className={classNames(projectcss.all, sty.div5)}
                        >
                          <div
                            data-plasmic-name={"rated49StarsBy100000Customers"}
                            data-plasmic-override={
                              overrides.rated49StarsBy100000Customers
                            }
                            className={classNames(
                              projectcss.all,
                              sty.rated49StarsBy100000Customers
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__s0UZ3
                              )}
                            >
                              {"Rated 4.9 Stars By 100,000+ Customers"}
                            </div>
                          </div>
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__rlpFy)}
                            displayHeight={"auto" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/copy_of_feed_presell_ai/images/image39.webp",
                              fullWidth: 142,
                              fullHeight: 21,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <button
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            sty.button
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eEj6M
                            )}
                          >
                            {"CLAIM FREE PODS \ud83d\udc49"}
                          </div>
                          <div
                            data-plasmic-name={"fingericonpng"}
                            data-plasmic-override={overrides.fingericonpng}
                            className={classNames(
                              projectcss.all,
                              sty.fingericonpng
                            )}
                          />
                        </button>
                      </div>
                    </div>
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"div6"}
                      data-plasmic-override={overrides.div6}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.div6)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dsG4S
                          )}
                        >
                          {true ? (
                            <BodyArticle1
                              data-plasmic-name={"bodyArticle1"}
                              data-plasmic-override={overrides.bodyArticle1}
                              className={classNames(
                                "__wab_instance",
                                sty.bodyArticle1
                              )}
                            />
                          ) : null}
                          <BodyArticle2
                            className={classNames(
                              "__wab_instance",
                              sty.bodyArticle2__pjsuB
                            )}
                          />
                        </div>
                      ) : null}
                      <div
                        data-plasmic-name={"div30"}
                        data-plasmic-override={overrides.div30}
                        className={classNames(projectcss.all, sty.div30)}
                      >
                        <div
                          data-plasmic-name={"div31"}
                          data-plasmic-override={overrides.div31}
                          className={classNames(projectcss.all, sty.div31)}
                        >
                          <div
                            data-plasmic-name={"div32"}
                            data-plasmic-override={overrides.div32}
                            className={classNames(projectcss.all, sty.div32)}
                          >
                            <div
                              data-plasmic-name={"sidereview1Png"}
                              data-plasmic-override={overrides.sidereview1Png}
                              className={classNames(
                                projectcss.all,
                                sty.sidereview1Png
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vLlMe
                            )}
                          >
                            {"Isaiah S."}
                          </div>
                          <div
                            data-plasmic-name={"starpng2"}
                            data-plasmic-override={overrides.starpng2}
                            className={classNames(projectcss.all, sty.starpng2)}
                          />

                          <div
                            data-plasmic-name={"bestAlternativeToSmoking"}
                            data-plasmic-override={
                              overrides.bestAlternativeToSmoking
                            }
                            className={classNames(
                              projectcss.all,
                              sty.bestAlternativeToSmoking
                            )}
                          />

                          <div
                            data-plasmic-name={
                              "iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife"
                            }
                            data-plasmic-override={
                              overrides.iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife
                            }
                            className={classNames(
                              projectcss.all,
                              sty.iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bqGoL
                              )}
                            >
                              {
                                "I smoked for over 29 years and tired to quit several times with no success. Until I came across sparq. Now not only do I not smoke, I\u2019m doing something healthy in place! Great product, I\u2019ll be a user for life!"
                              }
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tx8Qh
                            )}
                          >
                            {"Best alternative to smoking"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"div33"}
                          data-plasmic-override={overrides.div33}
                          className={classNames(projectcss.all, sty.div33)}
                        >
                          <div
                            data-plasmic-name={"div34"}
                            data-plasmic-override={overrides.div34}
                            className={classNames(projectcss.all, sty.div34)}
                          >
                            <div
                              data-plasmic-name={"sidereview2Png"}
                              data-plasmic-override={overrides.sidereview2Png}
                              className={classNames(
                                projectcss.all,
                                sty.sidereview2Png
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__o7Gnv
                            )}
                          >
                            {"Jason G."}
                          </div>
                          <div
                            data-plasmic-name={"starpng3"}
                            data-plasmic-override={overrides.starpng3}
                            className={classNames(projectcss.all, sty.starpng3)}
                          />

                          <div
                            data-plasmic-name={"awesome"}
                            data-plasmic-override={overrides.awesome}
                            className={classNames(projectcss.all, sty.awesome)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fNieK
                              )}
                            >
                              {"Awesome"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={
                              "excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe"
                            }
                            data-plasmic-override={
                              overrides.excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe
                            }
                            className={classNames(
                              projectcss.all,
                              sty.excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gL1AD
                              )}
                            >
                              {
                                "\u201cExcellent. I love this. I quit smoking cigarettes and went to the sparq. I love this device. It is natural, no nicotine. It really does help calm me.\u201d"
                              }
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"div36"}
                          data-plasmic-override={overrides.div36}
                          className={classNames(projectcss.all, sty.div36)}
                        >
                          <div
                            data-plasmic-name={"div37"}
                            data-plasmic-override={overrides.div37}
                            className={classNames(projectcss.all, sty.div37)}
                          >
                            <div
                              data-plasmic-name={"sidereview3Png"}
                              data-plasmic-override={overrides.sidereview3Png}
                              className={classNames(
                                projectcss.all,
                                sty.sidereview3Png
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__vNvgi)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/copy_of_feed_presell_ai/images/sidereview3Png.png",
                                  fullWidth: 119,
                                  fullHeight: 119,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9OzQ5
                            )}
                          >
                            {"Kathy B"}
                          </div>
                          <div
                            data-plasmic-name={"starpng4"}
                            data-plasmic-override={overrides.starpng4}
                            className={classNames(projectcss.all, sty.starpng4)}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__pDjkm)}
                              displayHeight={"auto" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_feed_presell_ai/images/starpng.png",
                                fullWidth: 142,
                                fullHeight: 21,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                          <div
                            data-plasmic-name={"loveLove"}
                            data-plasmic-override={overrides.loveLove}
                            className={classNames(projectcss.all, sty.loveLove)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dCfgF
                              )}
                            >
                              {"Love! LOVE!!"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"p"}
                            data-plasmic-override={overrides.p}
                            className={classNames(projectcss.all, sty.p)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__j2Ayl
                              )}
                            >
                              {"\u201cIm literally obsessed the the elegant"}
                            </div>
                            <div
                              data-plasmic-name={"br4"}
                              data-plasmic-override={overrides.br4}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.br4
                              )}
                            >
                              {"\n"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___87TDp
                              )}
                            >
                              {"design as well as the jaw dropping"}
                            </div>
                            <div
                              data-plasmic-name={"br5"}
                              data-plasmic-override={overrides.br5}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.br5
                              )}
                            >
                              {"\n"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kHKl
                              )}
                            >
                              {"packaging.\u201d"}
                            </div>
                          </div>
                        </div>
                      </div>
                    </p.Stack>
                  </p.Stack>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__xIiJd)}
                    displayHeight={"30px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"180px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_feed_presell_ai/images/logopng.png",
                      fullWidth: 276,
                      fullHeight: 46,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xSxYr
                    )}
                  >
                    {'"The Evolution of Inhalation"\n'}
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  data-plasmic-name={"_414Px"}
                  data-plasmic-override={overrides._414Px}
                  className={classNames(projectcss.all, sty._414Px)}
                >
                  <div
                    data-plasmic-name={"div41"}
                    data-plasmic-override={overrides.div41}
                    className={classNames(projectcss.all, sty.div41)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        data-plasmic-name={"logopng3"}
                        data-plasmic-override={overrides.logopng3}
                        className={classNames(projectcss.all, sty.logopng3)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__zwAnj)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                        />
                      </div>
                    ) : null}
                    <div
                      data-plasmic-name={"thisIsAnAdvertorial2"}
                      data-plasmic-override={overrides.thisIsAnAdvertorial2}
                      className={classNames(
                        projectcss.all,
                        sty.thisIsAnAdvertorial2
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__irTSe
                        )}
                      >
                        {"This is an Advertorial"}
                      </div>
                    </div>
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__qzC)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"132px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_feed_presell_ai/images/logopng.png",
                        fullWidth: 276,
                        fullHeight: 46,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"div42"}
                    data-plasmic-override={overrides.div42}
                    className={classNames(projectcss.all, sty.div42)}
                  >
                    <div
                      data-plasmic-name={"div43"}
                      data-plasmic-override={overrides.div43}
                      className={classNames(projectcss.all, sty.div43)}
                    >
                      <div
                        data-plasmic-name={"div44"}
                        data-plasmic-override={overrides.div44}
                        className={classNames(projectcss.all, sty.div44)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cfGvu
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.records[0].fields
                                  .heroHeadline;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Want All The Joy Of Inhalation, But None Of The Health Compromises?";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mGoMe
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.records[0].fields
                                  .heroSubHeadline;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            data-plasmic-name={"aget12"}
                            data-plasmic-override={overrides.aget12}
                            className={classNames(projectcss.all, sty.aget12)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__x3NVv
                              )}
                            >
                              {"FEEL THE DIFFERENCE"}
                            </div>
                            <div
                              data-plasmic-name={"fingericonpng5"}
                              data-plasmic-override={overrides.fingericonpng5}
                              className={classNames(
                                projectcss.all,
                                sty.fingericonpng5
                              )}
                            />
                          </div>
                        ) : null}
                        <div
                          data-plasmic-name={"div45"}
                          data-plasmic-override={overrides.div45}
                          className={classNames(projectcss.all, sty.div45)}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              data-plasmic-name={"starpng6"}
                              data-plasmic-override={overrides.starpng6}
                              className={classNames(
                                projectcss.all,
                                sty.starpng6
                              )}
                            />
                          ) : null}
                          <div
                            data-plasmic-name={"rated49StarsBy100000Customers3"}
                            data-plasmic-override={
                              overrides.rated49StarsBy100000Customers3
                            }
                            className={classNames(
                              projectcss.all,
                              sty.rated49StarsBy100000Customers3
                            )}
                          />
                        </div>
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__w5Dke)}
                            displayHeight={"auto" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                          />
                        ) : null}
                        <div
                          data-plasmic-name={"a3"}
                          data-plasmic-override={overrides.a3}
                          className={classNames(projectcss.all, sty.a3)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nXrg2
                            )}
                          >
                            {"CLAIM FREE PODS \ud83d\udc49"}
                          </div>
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              data-plasmic-name={"fingericonpng4"}
                              data-plasmic-override={overrides.fingericonpng4}
                              className={classNames(
                                projectcss.all,
                                sty.fingericonpng4
                              )}
                            />
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r7DHu
                          )}
                        >
                          {"Rated 4.9 Stars By 100,000+ Customers"}
                        </div>
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___28Igz)}
                          displayHeight={"19px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"123%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"139px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_feed_presell_ai/images/image39.webp",
                            fullWidth: 142,
                            fullHeight: 21,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"div46"}
                      data-plasmic-override={overrides.div46}
                      className={classNames(projectcss.all, sty.div46)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          data-plasmic-name={"div47"}
                          data-plasmic-override={overrides.div47}
                          className={classNames(projectcss.all, sty.div47)}
                        >
                          <div
                            data-plasmic-name={"div48"}
                            data-plasmic-override={overrides.div48}
                            className={classNames(projectcss.all, sty.div48)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3RUju
                              )}
                            >
                              {"As Featured In:"}
                            </div>
                            <div
                              data-plasmic-name={"div49"}
                              data-plasmic-override={overrides.div49}
                              className={classNames(projectcss.all, sty.div49)}
                            >
                              <div
                                data-plasmic-name={"div50"}
                                data-plasmic-override={overrides.div50}
                                className={classNames(
                                  projectcss.all,
                                  sty.div50
                                )}
                              >
                                <div
                                  data-plasmic-name={"nwMobbrand1Png"}
                                  data-plasmic-override={
                                    overrides.nwMobbrand1Png
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.nwMobbrand1Png
                                  )}
                                />

                                <div
                                  data-plasmic-name={"nwMobbrand2Png"}
                                  data-plasmic-override={
                                    overrides.nwMobbrand2Png
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.nwMobbrand2Png
                                  )}
                                />

                                <div
                                  data-plasmic-name={"nwMobbrand3Png"}
                                  data-plasmic-override={
                                    overrides.nwMobbrand3Png
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.nwMobbrand3Png
                                  )}
                                />
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___23Oi8
                            )}
                          >
                            {
                              "Imagine a world where you could inhale vitamins, minerals, and antioxidants to improve your well-being."
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mL8Y
                            )}
                          >
                            {
                              "Think about what it would be like to never have to suffer again through the jitters and anxiety that traditional inhalation methods bring."
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___32It5
                            )}
                          >
                            {
                              "What if you\u2019ll no longer have to choose between your habit or quitting, or feel like you are compromising on health just to get the throat hit and flavor you enjoy?"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fczot
                            )}
                          >
                            {
                              "All Of The Above Is Possible\u2026With Sparq\u2019s Vitamin Air\u00ae."
                            }
                          </div>
                          <div
                            data-plasmic-name={"midbannerjpg2"}
                            data-plasmic-override={overrides.midbannerjpg2}
                            className={classNames(
                              projectcss.all,
                              sty.midbannerjpg2
                            )}
                          />

                          <div
                            data-plasmic-name={
                              "whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2"
                            }
                            data-plasmic-override={
                              overrides.whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hPnC
                              )}
                            >
                              {
                                "When you make the switch to Sparq, you're choosing to go beyond your typical inhalation experience."
                              }
                            </div>
                          </div>
                          <div
                            data-plasmic-name={
                              "withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2"
                            }
                            data-plasmic-override={
                              overrides.withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uETq
                              )}
                            >
                              {
                                "With Sparq\u2019s Vitamin Air, you don\u2019t have to choose between staying healthy and treating yourself. Instead, you can lead a healthy lifestyle while also quenching your thirst for that truly satisfying hit."
                              }
                            </div>
                          </div>
                          <div
                            data-plasmic-name={
                              "youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2"
                            }
                            data-plasmic-override={
                              overrides.youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hsrB
                              )}
                            >
                              {
                                "You can enjoy delicious hitting flavors in the form of a slim, compact, and odorless device while delivering nutrients and botanicals to your body. They will give you energy, mental clarity, boost your metabolism, and protect your body against aging."
                              }
                            </div>
                          </div>
                          <div
                            data-plasmic-name={
                              "sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2"
                            }
                            data-plasmic-override={
                              overrides.sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zw4Ka
                              )}
                            >
                              {
                                "Sparq provides a satisfying inhalation experience without any of the harmful chemicals or stimulants."
                              }
                            </div>
                          </div>
                          <div
                            data-plasmic-name={
                              "areYouOneOfTheseTwoTypesOfPeople"
                            }
                            data-plasmic-override={
                              overrides.areYouOneOfTheseTwoTypesOfPeople
                            }
                            className={classNames(
                              projectcss.all,
                              sty.areYouOneOfTheseTwoTypesOfPeople
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3BmIa
                              )}
                            >
                              {"Are YOU One Of These Two Types Of People?"}
                            </div>
                          </div>
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"div51"}
                            data-plasmic-override={overrides.div51}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.div51)}
                          >
                            <div
                              data-plasmic-name={"div52"}
                              data-plasmic-override={overrides.div52}
                              className={classNames(projectcss.all, sty.div52)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__aWzPq
                                )}
                              >
                                {
                                  "If you're trying to quit, it can feel like every craving is another insurmountable problem to face.. Even if you've managed to go several days, weeks, or months without caving, you still crave that puff\u2026that throat hit\u2026that oh so satisfying flavor."
                                }
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7VgSi
                                )}
                              >
                                {
                                  "We know nicotine is addictive\u2026but did you know it\u2019s the oral fixation that keeps bringing you back? When you drop the habit, nicotine is out of your system in 72 hours but the oral fixation can last in the brain for up to 10 years!"
                                }
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___2Weog
                                )}
                              >
                                {
                                  "That's why no matter how many times you try, you find yourself going back to your old habit again and again. Fortunately, we've got the alternative that will break this repetitive pattern!"
                                }
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__eHwho
                                )}
                              >
                                {"#1"}
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"div53"}
                              data-plasmic-override={overrides.div53}
                              className={classNames(projectcss.all, sty.div53)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lw1Vv
                                )}
                              >
                                {
                                  "The world is your oyster, and you want nothing less than to enjoy it to the fullest extent. Maybe you're not into using inhalation devices but you've always been curious as to what all the hype is about. Sparq offers the perfect option for the curious spirit: all of the enjoyment and flavors of traditional products/devices but without the harmful chemicals or addictive stimulants!"
                                }
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vZgWh
                                )}
                              >
                                {
                                  "Natural flavoring that is intensely delicious, vitamins, amino acids and botanicals, all wrapped in a device designed to provide a superior inhalation experience."
                                }
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mv2Dh
                                )}
                              >
                                {"#2"}
                              </div>
                            </div>
                          </p.Stack>
                          <div
                            data-plasmic-name={
                              "sparqHasTheAnswersYoureLookingFor"
                            }
                            data-plasmic-override={
                              overrides.sparqHasTheAnswersYoureLookingFor
                            }
                            className={classNames(
                              projectcss.all,
                              sty.sparqHasTheAnswersYoureLookingFor
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__iu2
                              )}
                            >
                              {"Sparq Has The Answers You\u2019re Looking for:"}
                            </div>
                          </div>
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"ul2"}
                            data-plasmic-override={overrides.ul2}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.ul2)}
                          >
                            <div
                              data-plasmic-name={"li7"}
                              data-plasmic-override={overrides.li7}
                              className={classNames(projectcss.all, sty.li7)}
                            >
                              <div
                                data-plasmic-name={
                                  "getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit"
                                }
                                data-plasmic-override={
                                  overrides.getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__vem04
                                  )}
                                >
                                  {
                                    "Get rid of those nicotine cravings whilst still enjoying that strong and intense throat hit."
                                  }
                                </div>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"li8"}
                              data-plasmic-override={overrides.li8}
                              className={classNames(projectcss.all, sty.li8)}
                            >
                              <div
                                data-plasmic-name={
                                  "satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals"
                                }
                                data-plasmic-override={
                                  overrides.satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___2Gon9
                                  )}
                                >
                                  {
                                    "Satisfy your oral fixation without consuming toxic substances or harmful chemicals."
                                  }
                                </div>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"li9"}
                              data-plasmic-override={overrides.li9}
                              className={classNames(projectcss.all, sty.li9)}
                            >
                              <div
                                data-plasmic-name={
                                  "replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals"
                                }
                                data-plasmic-override={
                                  overrides.replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___71WmL
                                  )}
                                >
                                  {
                                    "Replace those harmful chemicals with vitamins, amino acids, and botanicals."
                                  }
                                </div>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"li10"}
                              data-plasmic-override={overrides.li10}
                              className={classNames(projectcss.all, sty.li10)}
                            >
                              <div
                                data-plasmic-name={
                                  "promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation"
                                }
                                data-plasmic-override={
                                  overrides.promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yEvHb
                                  )}
                                >
                                  {
                                    "Promote deep-breathing and relieve anxiety with each vitamin infused inhalation."
                                  }
                                </div>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"li11"}
                              data-plasmic-override={overrides.li11}
                              className={classNames(projectcss.all, sty.li11)}
                            >
                              <div
                                data-plasmic-name={
                                  "enjoyAHealthierAlternativeWithoutGivingUpYourHabit"
                                }
                                data-plasmic-override={
                                  overrides.enjoyAHealthierAlternativeWithoutGivingUpYourHabit
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.enjoyAHealthierAlternativeWithoutGivingUpYourHabit
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__g6E0X
                                  )}
                                >
                                  {
                                    "Enjoy a healthier alternative without giving up your habit."
                                  }
                                </div>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"li12"}
                              data-plasmic-override={overrides.li12}
                              className={classNames(projectcss.all, sty.li12)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hjkS9
                                )}
                              >
                                {
                                  "Take your device everywhere with its ultramodern and compact design and use it anytime you want."
                                }
                              </div>
                            </div>
                          </p.Stack>
                          <div
                            data-plasmic-name={"tbody2"}
                            data-plasmic-override={overrides.tbody2}
                            className={classNames(projectcss.all, sty.tbody2)}
                          >
                            <div
                              data-plasmic-name={"tr7"}
                              data-plasmic-override={overrides.tr7}
                              className={classNames(projectcss.all, sty.tr7)}
                            >
                              <div
                                data-plasmic-name={"th4"}
                                data-plasmic-override={overrides.th4}
                                className={classNames(projectcss.all, sty.th4)}
                              />

                              <div
                                data-plasmic-name={"th5"}
                                data-plasmic-override={overrides.th5}
                                className={classNames(projectcss.all, sty.th5)}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__c7Ra
                                  )}
                                >
                                  {"Sparq"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"th6"}
                                data-plasmic-override={overrides.th6}
                                className={classNames(projectcss.all, sty.th6)}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__cvrPz
                                  )}
                                >
                                  {"Others"}
                                </div>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"tr8"}
                              data-plasmic-override={overrides.tr8}
                              className={classNames(projectcss.all, sty.tr8)}
                            >
                              <div
                                data-plasmic-name={"td16"}
                                data-plasmic-override={overrides.td16}
                                className={classNames(projectcss.all, sty.td16)}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fCygv
                                  )}
                                >
                                  {"No Harmful Chemicals"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"td17"}
                                data-plasmic-override={overrides.td17}
                                className={classNames(projectcss.all, sty.td17)}
                              >
                                <div
                                  data-plasmic-name={"tickpng6"}
                                  data-plasmic-override={overrides.tickpng6}
                                  className={classNames(
                                    projectcss.all,
                                    sty.tickpng6
                                  )}
                                />
                              </div>
                              <div
                                data-plasmic-name={"td18"}
                                data-plasmic-override={overrides.td18}
                                className={classNames(projectcss.all, sty.td18)}
                              >
                                <div
                                  data-plasmic-name={"crosspng6"}
                                  data-plasmic-override={overrides.crosspng6}
                                  className={classNames(
                                    projectcss.all,
                                    sty.crosspng6
                                  )}
                                />
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"tr9"}
                              data-plasmic-override={overrides.tr9}
                              className={classNames(projectcss.all, sty.tr9)}
                            >
                              <div
                                data-plasmic-name={"td19"}
                                data-plasmic-override={overrides.td19}
                                className={classNames(projectcss.all, sty.td19)}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__aNjj5
                                  )}
                                >
                                  {"Eco-friendly and recyclable"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"td20"}
                                data-plasmic-override={overrides.td20}
                                className={classNames(projectcss.all, sty.td20)}
                              >
                                <div
                                  data-plasmic-name={"tickpng7"}
                                  data-plasmic-override={overrides.tickpng7}
                                  className={classNames(
                                    projectcss.all,
                                    sty.tickpng7
                                  )}
                                />
                              </div>
                              <div
                                data-plasmic-name={"td21"}
                                data-plasmic-override={overrides.td21}
                                className={classNames(projectcss.all, sty.td21)}
                              >
                                <div
                                  data-plasmic-name={"crosspng7"}
                                  data-plasmic-override={overrides.crosspng7}
                                  className={classNames(
                                    projectcss.all,
                                    sty.crosspng7
                                  )}
                                />
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"tr10"}
                              data-plasmic-override={overrides.tr10}
                              className={classNames(projectcss.all, sty.tr10)}
                            >
                              <div
                                data-plasmic-name={"td22"}
                                data-plasmic-override={overrides.td22}
                                className={classNames(projectcss.all, sty.td22)}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__sjkix
                                  )}
                                >
                                  {"0% Nicotine, 100% Guilt Free"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"td23"}
                                data-plasmic-override={overrides.td23}
                                className={classNames(projectcss.all, sty.td23)}
                              >
                                <div
                                  data-plasmic-name={"tickpng8"}
                                  data-plasmic-override={overrides.tickpng8}
                                  className={classNames(
                                    projectcss.all,
                                    sty.tickpng8
                                  )}
                                />
                              </div>
                              <div
                                data-plasmic-name={"td24"}
                                data-plasmic-override={overrides.td24}
                                className={classNames(projectcss.all, sty.td24)}
                              >
                                <div
                                  data-plasmic-name={"crosspng8"}
                                  data-plasmic-override={overrides.crosspng8}
                                  className={classNames(
                                    projectcss.all,
                                    sty.crosspng8
                                  )}
                                />
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"tr11"}
                              data-plasmic-override={overrides.tr11}
                              className={classNames(projectcss.all, sty.tr11)}
                            >
                              <div
                                data-plasmic-name={"td25"}
                                data-plasmic-override={overrides.td25}
                                className={classNames(projectcss.all, sty.td25)}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__agxQm
                                  )}
                                >
                                  {"Laboratory-tested"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"td26"}
                                data-plasmic-override={overrides.td26}
                                className={classNames(projectcss.all, sty.td26)}
                              >
                                <div
                                  data-plasmic-name={"tickpng9"}
                                  data-plasmic-override={overrides.tickpng9}
                                  className={classNames(
                                    projectcss.all,
                                    sty.tickpng9
                                  )}
                                />
                              </div>
                              <div
                                data-plasmic-name={"td27"}
                                data-plasmic-override={overrides.td27}
                                className={classNames(projectcss.all, sty.td27)}
                              >
                                <div
                                  data-plasmic-name={"crosspng9"}
                                  data-plasmic-override={overrides.crosspng9}
                                  className={classNames(
                                    projectcss.all,
                                    sty.crosspng9
                                  )}
                                />
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"tr12"}
                              data-plasmic-override={overrides.tr12}
                              className={classNames(projectcss.all, sty.tr12)}
                            >
                              <div
                                data-plasmic-name={"td28"}
                                data-plasmic-override={overrides.td28}
                                className={classNames(projectcss.all, sty.td28)}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__f4UTe
                                  )}
                                >
                                  {"Socially Responsible"}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"td29"}
                                data-plasmic-override={overrides.td29}
                                className={classNames(projectcss.all, sty.td29)}
                              >
                                <div
                                  data-plasmic-name={"tickpng10"}
                                  data-plasmic-override={overrides.tickpng10}
                                  className={classNames(
                                    projectcss.all,
                                    sty.tickpng10
                                  )}
                                />
                              </div>
                              <div
                                data-plasmic-name={"td30"}
                                data-plasmic-override={overrides.td30}
                                className={classNames(projectcss.all, sty.td30)}
                              >
                                <div
                                  data-plasmic-name={"crosspng10"}
                                  data-plasmic-override={overrides.crosspng10}
                                  className={classNames(
                                    projectcss.all,
                                    sty.crosspng10
                                  )}
                                />
                              </div>
                            </div>
                          </div>
                          <div
                            data-plasmic-name={
                              "happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2"
                            }
                            data-plasmic-override={
                              overrides.happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xmWfu
                              )}
                            >
                              {
                                "Happy Quitters, Vitamin Lovers, And Healthy Choice Followers Can't Stop Talking About Vitamin Air:"
                              }
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"reviewjpg2"}
                            data-plasmic-override={overrides.reviewjpg2}
                            className={classNames(
                              projectcss.all,
                              sty.reviewjpg2
                            )}
                          />

                          <div
                            data-plasmic-name={
                              "nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2"
                            }
                            data-plasmic-override={
                              overrides.nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vcrZs
                              )}
                            >
                              {
                                "Now you don't have to choose between either Strawberry or Vanilla flavor."
                              }
                            </div>
                          </div>
                          <div
                            data-plasmic-name={
                              "youCanHaveBothAndAPlusOneForFree2"
                            }
                            data-plasmic-override={
                              overrides.youCanHaveBothAndAPlusOneForFree2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.youCanHaveBothAndAPlusOneForFree2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__miVyQ
                              )}
                            >
                              {"You can have both and a plus one - FOR FREE."}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"divprodarea2"}
                            data-plasmic-override={overrides.divprodarea2}
                            className={classNames(
                              projectcss.all,
                              sty.divprodarea2
                            )}
                          >
                            <div
                              data-plasmic-name={"div54"}
                              data-plasmic-override={overrides.div54}
                              className={classNames(projectcss.all, sty.div54)}
                            >
                              <div
                                data-plasmic-name={"div55"}
                                data-plasmic-override={overrides.div55}
                                className={classNames(
                                  projectcss.all,
                                  sty.div55
                                )}
                              >
                                <div
                                  data-plasmic-name={"prodimagepng2"}
                                  data-plasmic-override={
                                    overrides.prodimagepng2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.prodimagepng2
                                  )}
                                />

                                <div
                                  data-plasmic-name={"div56"}
                                  data-plasmic-override={overrides.div56}
                                  className={classNames(
                                    projectcss.all,
                                    sty.div56
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"buy2Get2"}
                                    data-plasmic-override={overrides.buy2Get2}
                                    className={classNames(
                                      projectcss.all,
                                      sty.buy2Get2
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___6BSkr
                                      )}
                                    >
                                      {"BUY 2, Get 1"}
                                    </div>
                                  </div>
                                  <div
                                    data-plasmic-name={"free2"}
                                    data-plasmic-override={overrides.free2}
                                    className={classNames(
                                      projectcss.all,
                                      sty.free2
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__qrpnJ
                                      )}
                                    >
                                      {"Free"}
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"div57"}
                                data-plasmic-override={overrides.div57}
                                className={classNames(
                                  projectcss.all,
                                  sty.div57
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___1KpfQ
                                  )}
                                >
                                  {"special offer"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xrUUv
                                  )}
                                >
                                  {"free vitamin air"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__kXbmt
                                  )}
                                >
                                  {
                                    "Money-Back Guarantee: Better Flavor & Harder Hits or Your Money Back."
                                  }
                                </div>
                                <div
                                  data-plasmic-name={"div58"}
                                  data-plasmic-override={overrides.div58}
                                  className={classNames(
                                    projectcss.all,
                                    sty.div58
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__dI2OI
                                    )}
                                  >
                                    {"Choose Flavor"}
                                  </div>
                                  <p.Stack
                                    as={"div"}
                                    data-plasmic-name={"div59"}
                                    data-plasmic-override={overrides.div59}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.div59
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"div60"}
                                      data-plasmic-override={overrides.div60}
                                      className={classNames(
                                        projectcss.all,
                                        sty.div60
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"div61"}
                                        data-plasmic-override={overrides.div61}
                                        className={classNames(
                                          projectcss.all,
                                          sty.div61
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={"div62"}
                                          data-plasmic-override={
                                            overrides.div62
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.div62
                                          )}
                                        />
                                      </div>
                                      <div
                                        data-plasmic-name={"strawberry2"}
                                        data-plasmic-override={
                                          overrides.strawberry2
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.strawberry2
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__pEz8Q
                                          )}
                                        >
                                          {"Strawberry"}
                                        </div>
                                      </div>
                                    </div>
                                    <div
                                      data-plasmic-name={"div63"}
                                      data-plasmic-override={overrides.div63}
                                      className={classNames(
                                        projectcss.all,
                                        sty.div63
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"div64"}
                                        data-plasmic-override={overrides.div64}
                                        className={classNames(
                                          projectcss.all,
                                          sty.div64
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={"div65"}
                                          data-plasmic-override={
                                            overrides.div65
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.div65
                                          )}
                                        />
                                      </div>
                                      <div
                                        data-plasmic-name={"vanila2"}
                                        data-plasmic-override={
                                          overrides.vanila2
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.vanila2
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ixc5Y
                                          )}
                                        >
                                          {"Vanila"}
                                        </div>
                                      </div>
                                    </div>
                                  </p.Stack>
                                </div>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"div66"}
                              data-plasmic-override={overrides.div66}
                              className={classNames(projectcss.all, sty.div66)}
                            >
                              <div
                                data-plasmic-name={"aget2"}
                                data-plasmic-override={overrides.aget2}
                                className={classNames(
                                  projectcss.all,
                                  sty.aget2
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__q0U4H
                                  )}
                                >
                                  {"FEEL THE DIFFERENCE"}
                                </div>
                                <div
                                  data-plasmic-name={"fingericonpng6"}
                                  data-plasmic-override={
                                    overrides.fingericonpng6
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.fingericonpng6
                                  )}
                                />
                              </div>
                              <div
                                data-plasmic-name={"paymentcardpng2"}
                                data-plasmic-override={
                                  overrides.paymentcardpng2
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.paymentcardpng2
                                )}
                              />
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"faQs2"}
                            data-plasmic-override={overrides.faQs2}
                            className={classNames(projectcss.all, sty.faQs2)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gUpst
                              )}
                            >
                              {"FAQs"}
                            </div>
                          </div>
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"div67"}
                            data-plasmic-override={overrides.div67}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.div67)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__o5U9
                              )}
                            >
                              {"Is Sparq Vitamin Air safe?"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5EP6E
                              )}
                            >
                              {
                                "Sparq Vitamin Air has been laboratory-tested in an ISO-17025 accredited lab and certified to be free of harmful chemicals. It is only made with organic, natural substances."
                              }
                            </div>
                          </p.Stack>
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"div68"}
                            data-plasmic-override={overrides.div68}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.div68)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ulxJy
                              )}
                            >
                              {
                                "What are the ingredients used in Sparq Vitamin Air?"
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nl8AL
                              )}
                            >
                              {
                                "Our formulations do not contain nicotine or any addictive substances. We only use Organic Vegetable Glycerin and Natural Flavoring as our base, combined with the highest quality, U.S. sourced vitamins, amino acids and botanicals."
                              }
                            </div>
                          </p.Stack>
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"div69"}
                            data-plasmic-override={overrides.div69}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.div69)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__n5PQd
                              )}
                            >
                              {"How do I use Sparq Vitamin Air?"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fS0Bf
                              )}
                            >
                              {
                                "To use Sparq Vitamin Air, simply lift the device from the packaging, remove the protective silicone caps, place the wooden end of the device in your mouth and inhale. The LED will illuminate to indicate suctio."
                              }
                            </div>
                          </p.Stack>
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"div70"}
                            data-plasmic-override={overrides.div70}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.div70)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__msDit
                              )}
                            >
                              {"How long does it last?"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4WSyB
                              )}
                            >
                              {
                                "Each Sparq device will provide 300 puffs or more, depending on how it is used. The built-in LED will blink for 2 seconds when the juice is about to run out."
                              }
                            </div>
                          </p.Stack>
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"div71"}
                            data-plasmic-override={overrides.div71}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.div71)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0SSw9
                              )}
                            >
                              {"What materials is Sparq made from?"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8WYee
                              )}
                            >
                              {
                                "Our Sparq Vitamin Air is 100% recyclable. It is made of a biodegradable body of wood, stainless steel and food-grade silicone and it's powered by a lithium battery."
                              }
                            </div>
                          </p.Stack>
                        </div>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          data-plasmic-name={"div72"}
                          data-plasmic-override={overrides.div72}
                          className={classNames(projectcss.all, sty.div72)}
                        >
                          <div
                            data-plasmic-name={"div73"}
                            data-plasmic-override={overrides.div73}
                            className={classNames(projectcss.all, sty.div73)}
                          >
                            <div
                              data-plasmic-name={"starpng7"}
                              data-plasmic-override={overrides.starpng7}
                              className={classNames(
                                projectcss.all,
                                sty.starpng7
                              )}
                            />

                            <div
                              data-plasmic-name={
                                "rated49StarsBy100000Customers4"
                              }
                              data-plasmic-override={
                                overrides.rated49StarsBy100000Customers4
                              }
                              className={classNames(
                                projectcss.all,
                                sty.rated49StarsBy100000Customers4
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vPbmm
                                )}
                              >
                                {"Rated 4.9 Stars By 100,000+ Customers"}
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"h33"}
                              data-plasmic-override={overrides.h33}
                              className={classNames(projectcss.all, sty.h33)}
                            >
                              <div
                                data-plasmic-name={"soWhatAre2"}
                                data-plasmic-override={overrides.soWhatAre2}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.soWhatAre2
                                )}
                              >
                                {"So What Are\n"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__sdFi4
                                )}
                              >
                                {"You Waiting For?"}
                              </div>
                            </div>
                            <div
                              data-plasmic-name={
                                "takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2"
                              }
                              data-plasmic-override={
                                overrides.takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2
                              }
                              className={classNames(
                                projectcss.all,
                                sty.takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__y64T
                                )}
                              >
                                {
                                  "Take the first and easiest step towards quitting and receive 15% OFF your first purchase"
                                }
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"aget3"}
                              data-plasmic-override={overrides.aget3}
                              className={classNames(projectcss.all, sty.aget3)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gMcmh
                                )}
                              >
                                {"FEEL THE DIFFERENCE"}
                              </div>
                              <div
                                data-plasmic-name={"fingericonpng7"}
                                data-plasmic-override={overrides.fingericonpng7}
                                className={classNames(
                                  projectcss.all,
                                  sty.fingericonpng7
                                )}
                              />
                            </div>
                          </div>
                        </div>
                      ) : null}
                    </div>
                  </div>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      data-plasmic-name={"div74"}
                      data-plasmic-override={overrides.div74}
                      className={classNames(projectcss.all, sty.div74)}
                    >
                      <div
                        data-plasmic-name={"logopng4"}
                        data-plasmic-override={overrides.logopng4}
                        className={classNames(projectcss.all, sty.logopng4)}
                      />

                      <div
                        data-plasmic-name={"copyrights2022AllRightsReserved2"}
                        data-plasmic-override={
                          overrides.copyrights2022AllRightsReserved2
                        }
                        className={classNames(
                          projectcss.all,
                          sty.copyrights2022AllRightsReserved2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__agAd
                          )}
                        >
                          {"Copyrights 2022. All Rights Reserved"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"div75"}
                        data-plasmic-override={overrides.div75}
                        className={classNames(projectcss.all, sty.div75)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jJzn5
                          )}
                        >
                          {"Privacy Policy"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__w9TJr
                          )}
                        >
                          {"-"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__t4Hk
                          )}
                        >
                          {"Terms & Conditions"}
                        </div>
                      </div>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uncdJ)}
                  >
                    <BodyArticle2
                      className={classNames(
                        "__wab_instance",
                        sty.bodyArticle2__man2I
                      )}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__sJmec)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___6BIb)}
                        displayHeight={"100px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_feed_presell_ai/images/sidereview1Png3.png",
                          fullWidth: 119,
                          fullHeight: 119,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0RdVs
                        )}
                      >
                        {"Isaiah S."}
                      </div>
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__sAAbG)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"114px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_feed_presell_ai/images/starpng.png",
                          fullWidth: 142,
                          fullHeight: 21,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d5Vj
                        )}
                      >
                        {"Best alternative to smoking"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rnJw
                        )}
                      >
                        {
                          "I smoked for over 29 years and tired to quit several times with no success. Until I came across sparq. Now not only do I not smoke, I\u2019m doing something healthy in place! Great product, I\u2019ll be a user for life!"
                        }
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kKpa8)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__mXwwL)}
                      displayHeight={"100px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_feed_presell_ai/images/sidereview1Png3.png",
                        fullWidth: 119,
                        fullHeight: 119,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m4Wxq
                      )}
                    >
                      {"Isaiah S."}
                    </div>
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__qe5Xw)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"114px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_feed_presell_ai/images/starpng.png",
                        fullWidth: 142,
                        fullHeight: 21,
                        aspectRatio: undefined
                      }}
                    />

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___5JbQf)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l96Lg
                      )}
                    >
                      {"Best alternative to smoking"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nzyYl
                      )}
                    >
                      {
                        "I smoked for over 29 years and tired to quit several times with no success. Until I came across sparq. Now not only do I not smoke, I\u2019m doing something healthy in place! Great product, I\u2019ll be a user for life!"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rlAjF)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__nGq)}
                      displayHeight={"100px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_feed_presell_ai/images/sidereview1Png3.png",
                        fullWidth: 119,
                        fullHeight: 119,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vsWk
                      )}
                    >
                      {"Isaiah S."}
                    </div>
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__giJlC)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_feed_presell_ai/images/starpng.png",
                        fullWidth: 142,
                        fullHeight: 21,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6MOeh
                      )}
                    >
                      {"Best alternative to smoking"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__d4Wm4
                      )}
                    >
                      {
                        "I smoked for over 29 years and tired to quit several times with no success. Until I came across sparq. Now not only do I not smoke, I\u2019m doing something healthy in place! Great product, I\u2019ll be a user for life!"
                      }
                    </div>
                  </div>
                </div>
              ) : null}
              <Embed
                data-plasmic-name={"embedHtml"}
                data-plasmic-override={overrides.embedHtml}
                className={classNames("__wab_instance", sty.embedHtml)}
                code={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields[
                      "scripts (from Brands)"
                    ][0];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </React.Fragment>
          )}
        </ph.DataCtxReader>
      </DataFetcher>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "nav",
    "columns",
    "logo",
    "aSlogan",
    "intro",
    "heroHeadline",
    "heroSubHeadline",
    "aCta",
    "reviewIcon2",
    "reviewStatement2",
    "body",
    "articleBody",
    "press",
    "pressIcons",
    "heroImage",
    "paragraph1",
    "h21",
    "paragraph2",
    "h22",
    "image2",
    "paragraph3",
    "h23",
    "image3",
    "paragraph4",
    "h24",
    "image4",
    "review1",
    "paragraph42",
    "paragraph43",
    "paragraph44",
    "review2",
    "paragraph45",
    "paragraph46",
    "paragraph47",
    "review3",
    "paragraph48",
    "paragraph49",
    "paragraph410",
    "h25",
    "h35",
    "offer2",
    "offerH2",
    "offerParagraph",
    "image5",
    "paragraph6",
    "h26",
    "image6",
    "paragraph7",
    "h27",
    "image7",
    "aOutroH1",
    "aCta2",
    "aOutroH2",
    "reviewIcon",
    "aOutroH3",
    "aOutroImage",
    "reviewMugshot1",
    "reviewName1",
    "reviewIcon3",
    "reviewH11",
    "reviewP1",
    "reviewMugshot2",
    "reviewName2",
    "reviewIcon4",
    "reviewH12",
    "reviewP2",
    "reviewMugshot3",
    "reviewName3",
    "reviewIcon5",
    "reviewH122",
    "reviewP3",
    "reviewIcon6",
    "reviewStatement",
    "ctaCardH1",
    "ctaCardH2",
    "aCta3",
    "httpRestApiFetcher",
    "_1554Px",
    "div2",
    "div3",
    "div4",
    "h1",
    "div5",
    "rated49StarsBy100000Customers",
    "button",
    "fingericonpng",
    "div6",
    "bodyArticle1",
    "div30",
    "div31",
    "div32",
    "sidereview1Png",
    "starpng2",
    "bestAlternativeToSmoking",
    "iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife",
    "div33",
    "div34",
    "sidereview2Png",
    "starpng3",
    "awesome",
    "excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe",
    "div36",
    "div37",
    "sidereview3Png",
    "starpng4",
    "loveLove",
    "p",
    "br4",
    "br5",
    "_414Px",
    "div41",
    "logopng3",
    "thisIsAnAdvertorial2",
    "div42",
    "div43",
    "div44",
    "aget12",
    "fingericonpng5",
    "div45",
    "starpng6",
    "rated49StarsBy100000Customers3",
    "a3",
    "fingericonpng4",
    "div46",
    "div47",
    "div48",
    "div49",
    "div50",
    "nwMobbrand1Png",
    "nwMobbrand2Png",
    "nwMobbrand3Png",
    "midbannerjpg2",
    "whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2",
    "withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2",
    "youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2",
    "sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2",
    "areYouOneOfTheseTwoTypesOfPeople",
    "div51",
    "div52",
    "div53",
    "sparqHasTheAnswersYoureLookingFor",
    "ul2",
    "li7",
    "getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit",
    "li8",
    "satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals",
    "li9",
    "replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals",
    "li10",
    "promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation",
    "li11",
    "enjoyAHealthierAlternativeWithoutGivingUpYourHabit",
    "li12",
    "tbody2",
    "tr7",
    "th4",
    "th5",
    "th6",
    "tr8",
    "td16",
    "td17",
    "tickpng6",
    "td18",
    "crosspng6",
    "tr9",
    "td19",
    "td20",
    "tickpng7",
    "td21",
    "crosspng7",
    "tr10",
    "td22",
    "td23",
    "tickpng8",
    "td24",
    "crosspng8",
    "tr11",
    "td25",
    "td26",
    "tickpng9",
    "td27",
    "crosspng9",
    "tr12",
    "td28",
    "td29",
    "tickpng10",
    "td30",
    "crosspng10",
    "happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2",
    "reviewjpg2",
    "nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2",
    "youCanHaveBothAndAPlusOneForFree2",
    "divprodarea2",
    "div54",
    "div55",
    "prodimagepng2",
    "div56",
    "buy2Get2",
    "free2",
    "div57",
    "div58",
    "div59",
    "div60",
    "div61",
    "div62",
    "strawberry2",
    "div63",
    "div64",
    "div65",
    "vanila2",
    "div66",
    "aget2",
    "fingericonpng6",
    "paymentcardpng2",
    "faQs2",
    "div67",
    "div68",
    "div69",
    "div70",
    "div71",
    "div72",
    "div73",
    "starpng7",
    "rated49StarsBy100000Customers4",
    "h33",
    "soWhatAre2",
    "takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2",
    "aget3",
    "fingericonpng7",
    "div74",
    "logopng4",
    "copyrights2022AllRightsReserved2",
    "div75",
    "embedHtml"
  ],
  nav: ["nav", "columns", "logo", "aSlogan"],
  columns: ["columns", "logo", "aSlogan"],
  logo: ["logo"],
  aSlogan: ["aSlogan"],
  intro: [
    "intro",
    "heroHeadline",
    "heroSubHeadline",
    "aCta",
    "reviewIcon2",
    "reviewStatement2"
  ],
  heroHeadline: ["heroHeadline"],
  heroSubHeadline: ["heroSubHeadline"],
  aCta: ["aCta"],
  reviewIcon2: ["reviewIcon2"],
  reviewStatement2: ["reviewStatement2"],
  body: [
    "body",
    "articleBody",
    "press",
    "pressIcons",
    "heroImage",
    "paragraph1",
    "h21",
    "paragraph2",
    "h22",
    "image2",
    "paragraph3",
    "h23",
    "image3",
    "paragraph4",
    "h24",
    "image4",
    "review1",
    "paragraph42",
    "paragraph43",
    "paragraph44",
    "review2",
    "paragraph45",
    "paragraph46",
    "paragraph47",
    "review3",
    "paragraph48",
    "paragraph49",
    "paragraph410",
    "h25",
    "h35",
    "offer2",
    "offerH2",
    "offerParagraph",
    "image5",
    "paragraph6",
    "h26",
    "image6",
    "paragraph7",
    "h27",
    "image7",
    "aOutroH1",
    "aCta2",
    "aOutroH2",
    "reviewIcon",
    "aOutroH3",
    "aOutroImage",
    "reviewMugshot1",
    "reviewName1",
    "reviewIcon3",
    "reviewH11",
    "reviewP1",
    "reviewMugshot2",
    "reviewName2",
    "reviewIcon4",
    "reviewH12",
    "reviewP2",
    "reviewMugshot3",
    "reviewName3",
    "reviewIcon5",
    "reviewH122",
    "reviewP3",
    "reviewIcon6",
    "reviewStatement",
    "ctaCardH1",
    "ctaCardH2",
    "aCta3"
  ],
  articleBody: [
    "articleBody",
    "press",
    "pressIcons",
    "heroImage",
    "paragraph1",
    "h21",
    "paragraph2",
    "h22",
    "image2",
    "paragraph3",
    "h23",
    "image3",
    "paragraph4",
    "h24",
    "image4",
    "review1",
    "paragraph42",
    "paragraph43",
    "paragraph44",
    "review2",
    "paragraph45",
    "paragraph46",
    "paragraph47",
    "review3",
    "paragraph48",
    "paragraph49",
    "paragraph410",
    "h25",
    "h35",
    "offer2",
    "offerH2",
    "offerParagraph",
    "image5",
    "paragraph6",
    "h26",
    "image6",
    "paragraph7",
    "h27",
    "image7",
    "aOutroH1",
    "aCta2",
    "aOutroH2",
    "reviewIcon",
    "aOutroH3",
    "aOutroImage"
  ],
  press: ["press", "pressIcons"],
  pressIcons: ["pressIcons"],
  heroImage: ["heroImage"],
  paragraph1: ["paragraph1"],
  h21: ["h21"],
  paragraph2: ["paragraph2"],
  h22: ["h22"],
  image2: ["image2"],
  paragraph3: ["paragraph3"],
  h23: ["h23"],
  image3: ["image3"],
  paragraph4: ["paragraph4"],
  h24: ["h24"],
  image4: ["image4"],
  review1: ["review1", "paragraph42", "paragraph43", "paragraph44"],
  paragraph42: ["paragraph42"],
  paragraph43: ["paragraph43"],
  paragraph44: ["paragraph44"],
  review2: ["review2", "paragraph45", "paragraph46", "paragraph47"],
  paragraph45: ["paragraph45"],
  paragraph46: ["paragraph46"],
  paragraph47: ["paragraph47"],
  review3: ["review3", "paragraph48", "paragraph49", "paragraph410"],
  paragraph48: ["paragraph48"],
  paragraph49: ["paragraph49"],
  paragraph410: ["paragraph410"],
  h25: ["h25"],
  h35: ["h35"],
  offer2: ["offer2", "offerH2", "offerParagraph"],
  offerH2: ["offerH2"],
  offerParagraph: ["offerParagraph"],
  image5: ["image5"],
  paragraph6: ["paragraph6"],
  h26: ["h26"],
  image6: ["image6"],
  paragraph7: ["paragraph7"],
  h27: ["h27"],
  image7: ["image7"],
  aOutroH1: ["aOutroH1"],
  aCta2: ["aCta2"],
  aOutroH2: ["aOutroH2"],
  reviewIcon: ["reviewIcon"],
  aOutroH3: ["aOutroH3"],
  aOutroImage: ["aOutroImage"],
  reviewMugshot1: ["reviewMugshot1"],
  reviewName1: ["reviewName1"],
  reviewIcon3: ["reviewIcon3"],
  reviewH11: ["reviewH11"],
  reviewP1: ["reviewP1"],
  reviewMugshot2: ["reviewMugshot2"],
  reviewName2: ["reviewName2"],
  reviewIcon4: ["reviewIcon4"],
  reviewH12: ["reviewH12"],
  reviewP2: ["reviewP2"],
  reviewMugshot3: ["reviewMugshot3"],
  reviewName3: ["reviewName3"],
  reviewIcon5: ["reviewIcon5"],
  reviewH122: ["reviewH122"],
  reviewP3: ["reviewP3"],
  reviewIcon6: ["reviewIcon6"],
  reviewStatement: ["reviewStatement"],
  ctaCardH1: ["ctaCardH1"],
  ctaCardH2: ["ctaCardH2"],
  aCta3: ["aCta3"],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "_1554Px",
    "div2",
    "div3",
    "div4",
    "h1",
    "div5",
    "rated49StarsBy100000Customers",
    "button",
    "fingericonpng",
    "div6",
    "bodyArticle1",
    "div30",
    "div31",
    "div32",
    "sidereview1Png",
    "starpng2",
    "bestAlternativeToSmoking",
    "iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife",
    "div33",
    "div34",
    "sidereview2Png",
    "starpng3",
    "awesome",
    "excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe",
    "div36",
    "div37",
    "sidereview3Png",
    "starpng4",
    "loveLove",
    "p",
    "br4",
    "br5",
    "_414Px",
    "div41",
    "logopng3",
    "thisIsAnAdvertorial2",
    "div42",
    "div43",
    "div44",
    "aget12",
    "fingericonpng5",
    "div45",
    "starpng6",
    "rated49StarsBy100000Customers3",
    "a3",
    "fingericonpng4",
    "div46",
    "div47",
    "div48",
    "div49",
    "div50",
    "nwMobbrand1Png",
    "nwMobbrand2Png",
    "nwMobbrand3Png",
    "midbannerjpg2",
    "whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2",
    "withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2",
    "youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2",
    "sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2",
    "areYouOneOfTheseTwoTypesOfPeople",
    "div51",
    "div52",
    "div53",
    "sparqHasTheAnswersYoureLookingFor",
    "ul2",
    "li7",
    "getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit",
    "li8",
    "satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals",
    "li9",
    "replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals",
    "li10",
    "promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation",
    "li11",
    "enjoyAHealthierAlternativeWithoutGivingUpYourHabit",
    "li12",
    "tbody2",
    "tr7",
    "th4",
    "th5",
    "th6",
    "tr8",
    "td16",
    "td17",
    "tickpng6",
    "td18",
    "crosspng6",
    "tr9",
    "td19",
    "td20",
    "tickpng7",
    "td21",
    "crosspng7",
    "tr10",
    "td22",
    "td23",
    "tickpng8",
    "td24",
    "crosspng8",
    "tr11",
    "td25",
    "td26",
    "tickpng9",
    "td27",
    "crosspng9",
    "tr12",
    "td28",
    "td29",
    "tickpng10",
    "td30",
    "crosspng10",
    "happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2",
    "reviewjpg2",
    "nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2",
    "youCanHaveBothAndAPlusOneForFree2",
    "divprodarea2",
    "div54",
    "div55",
    "prodimagepng2",
    "div56",
    "buy2Get2",
    "free2",
    "div57",
    "div58",
    "div59",
    "div60",
    "div61",
    "div62",
    "strawberry2",
    "div63",
    "div64",
    "div65",
    "vanila2",
    "div66",
    "aget2",
    "fingericonpng6",
    "paymentcardpng2",
    "faQs2",
    "div67",
    "div68",
    "div69",
    "div70",
    "div71",
    "div72",
    "div73",
    "starpng7",
    "rated49StarsBy100000Customers4",
    "h33",
    "soWhatAre2",
    "takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2",
    "aget3",
    "fingericonpng7",
    "div74",
    "logopng4",
    "copyrights2022AllRightsReserved2",
    "div75",
    "embedHtml"
  ],
  _1554Px: [
    "_1554Px",
    "div2",
    "div3",
    "div4",
    "h1",
    "div5",
    "rated49StarsBy100000Customers",
    "button",
    "fingericonpng",
    "div6",
    "bodyArticle1",
    "div30",
    "div31",
    "div32",
    "sidereview1Png",
    "starpng2",
    "bestAlternativeToSmoking",
    "iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife",
    "div33",
    "div34",
    "sidereview2Png",
    "starpng3",
    "awesome",
    "excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe",
    "div36",
    "div37",
    "sidereview3Png",
    "starpng4",
    "loveLove",
    "p",
    "br4",
    "br5"
  ],
  div2: [
    "div2",
    "div3",
    "div4",
    "h1",
    "div5",
    "rated49StarsBy100000Customers",
    "button",
    "fingericonpng",
    "div6",
    "bodyArticle1",
    "div30",
    "div31",
    "div32",
    "sidereview1Png",
    "starpng2",
    "bestAlternativeToSmoking",
    "iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife",
    "div33",
    "div34",
    "sidereview2Png",
    "starpng3",
    "awesome",
    "excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe",
    "div36",
    "div37",
    "sidereview3Png",
    "starpng4",
    "loveLove",
    "p",
    "br4",
    "br5"
  ],
  div3: [
    "div3",
    "div4",
    "h1",
    "div5",
    "rated49StarsBy100000Customers",
    "button",
    "fingericonpng"
  ],
  div4: [
    "div4",
    "h1",
    "div5",
    "rated49StarsBy100000Customers",
    "button",
    "fingericonpng"
  ],
  h1: ["h1"],
  div5: ["div5", "rated49StarsBy100000Customers"],
  rated49StarsBy100000Customers: ["rated49StarsBy100000Customers"],
  button: ["button", "fingericonpng"],
  fingericonpng: ["fingericonpng"],
  div6: [
    "div6",
    "bodyArticle1",
    "div30",
    "div31",
    "div32",
    "sidereview1Png",
    "starpng2",
    "bestAlternativeToSmoking",
    "iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife",
    "div33",
    "div34",
    "sidereview2Png",
    "starpng3",
    "awesome",
    "excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe",
    "div36",
    "div37",
    "sidereview3Png",
    "starpng4",
    "loveLove",
    "p",
    "br4",
    "br5"
  ],
  bodyArticle1: ["bodyArticle1"],
  div30: [
    "div30",
    "div31",
    "div32",
    "sidereview1Png",
    "starpng2",
    "bestAlternativeToSmoking",
    "iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife",
    "div33",
    "div34",
    "sidereview2Png",
    "starpng3",
    "awesome",
    "excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe",
    "div36",
    "div37",
    "sidereview3Png",
    "starpng4",
    "loveLove",
    "p",
    "br4",
    "br5"
  ],
  div31: [
    "div31",
    "div32",
    "sidereview1Png",
    "starpng2",
    "bestAlternativeToSmoking",
    "iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife"
  ],
  div32: ["div32", "sidereview1Png"],
  sidereview1Png: ["sidereview1Png"],
  starpng2: ["starpng2"],
  bestAlternativeToSmoking: ["bestAlternativeToSmoking"],
  iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife:
    [
      "iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife"
    ],
  div33: [
    "div33",
    "div34",
    "sidereview2Png",
    "starpng3",
    "awesome",
    "excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe"
  ],
  div34: ["div34", "sidereview2Png"],
  sidereview2Png: ["sidereview2Png"],
  starpng3: ["starpng3"],
  awesome: ["awesome"],
  excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe:
    [
      "excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe"
    ],
  div36: [
    "div36",
    "div37",
    "sidereview3Png",
    "starpng4",
    "loveLove",
    "p",
    "br4",
    "br5"
  ],
  div37: ["div37", "sidereview3Png"],
  sidereview3Png: ["sidereview3Png"],
  starpng4: ["starpng4"],
  loveLove: ["loveLove"],
  p: ["p", "br4", "br5"],
  br4: ["br4"],
  br5: ["br5"],
  _414Px: [
    "_414Px",
    "div41",
    "logopng3",
    "thisIsAnAdvertorial2",
    "div42",
    "div43",
    "div44",
    "aget12",
    "fingericonpng5",
    "div45",
    "starpng6",
    "rated49StarsBy100000Customers3",
    "a3",
    "fingericonpng4",
    "div46",
    "div47",
    "div48",
    "div49",
    "div50",
    "nwMobbrand1Png",
    "nwMobbrand2Png",
    "nwMobbrand3Png",
    "midbannerjpg2",
    "whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2",
    "withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2",
    "youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2",
    "sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2",
    "areYouOneOfTheseTwoTypesOfPeople",
    "div51",
    "div52",
    "div53",
    "sparqHasTheAnswersYoureLookingFor",
    "ul2",
    "li7",
    "getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit",
    "li8",
    "satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals",
    "li9",
    "replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals",
    "li10",
    "promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation",
    "li11",
    "enjoyAHealthierAlternativeWithoutGivingUpYourHabit",
    "li12",
    "tbody2",
    "tr7",
    "th4",
    "th5",
    "th6",
    "tr8",
    "td16",
    "td17",
    "tickpng6",
    "td18",
    "crosspng6",
    "tr9",
    "td19",
    "td20",
    "tickpng7",
    "td21",
    "crosspng7",
    "tr10",
    "td22",
    "td23",
    "tickpng8",
    "td24",
    "crosspng8",
    "tr11",
    "td25",
    "td26",
    "tickpng9",
    "td27",
    "crosspng9",
    "tr12",
    "td28",
    "td29",
    "tickpng10",
    "td30",
    "crosspng10",
    "happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2",
    "reviewjpg2",
    "nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2",
    "youCanHaveBothAndAPlusOneForFree2",
    "divprodarea2",
    "div54",
    "div55",
    "prodimagepng2",
    "div56",
    "buy2Get2",
    "free2",
    "div57",
    "div58",
    "div59",
    "div60",
    "div61",
    "div62",
    "strawberry2",
    "div63",
    "div64",
    "div65",
    "vanila2",
    "div66",
    "aget2",
    "fingericonpng6",
    "paymentcardpng2",
    "faQs2",
    "div67",
    "div68",
    "div69",
    "div70",
    "div71",
    "div72",
    "div73",
    "starpng7",
    "rated49StarsBy100000Customers4",
    "h33",
    "soWhatAre2",
    "takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2",
    "aget3",
    "fingericonpng7",
    "div74",
    "logopng4",
    "copyrights2022AllRightsReserved2",
    "div75"
  ],
  div41: ["div41", "logopng3", "thisIsAnAdvertorial2"],
  logopng3: ["logopng3"],
  thisIsAnAdvertorial2: ["thisIsAnAdvertorial2"],
  div42: [
    "div42",
    "div43",
    "div44",
    "aget12",
    "fingericonpng5",
    "div45",
    "starpng6",
    "rated49StarsBy100000Customers3",
    "a3",
    "fingericonpng4",
    "div46",
    "div47",
    "div48",
    "div49",
    "div50",
    "nwMobbrand1Png",
    "nwMobbrand2Png",
    "nwMobbrand3Png",
    "midbannerjpg2",
    "whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2",
    "withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2",
    "youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2",
    "sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2",
    "areYouOneOfTheseTwoTypesOfPeople",
    "div51",
    "div52",
    "div53",
    "sparqHasTheAnswersYoureLookingFor",
    "ul2",
    "li7",
    "getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit",
    "li8",
    "satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals",
    "li9",
    "replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals",
    "li10",
    "promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation",
    "li11",
    "enjoyAHealthierAlternativeWithoutGivingUpYourHabit",
    "li12",
    "tbody2",
    "tr7",
    "th4",
    "th5",
    "th6",
    "tr8",
    "td16",
    "td17",
    "tickpng6",
    "td18",
    "crosspng6",
    "tr9",
    "td19",
    "td20",
    "tickpng7",
    "td21",
    "crosspng7",
    "tr10",
    "td22",
    "td23",
    "tickpng8",
    "td24",
    "crosspng8",
    "tr11",
    "td25",
    "td26",
    "tickpng9",
    "td27",
    "crosspng9",
    "tr12",
    "td28",
    "td29",
    "tickpng10",
    "td30",
    "crosspng10",
    "happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2",
    "reviewjpg2",
    "nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2",
    "youCanHaveBothAndAPlusOneForFree2",
    "divprodarea2",
    "div54",
    "div55",
    "prodimagepng2",
    "div56",
    "buy2Get2",
    "free2",
    "div57",
    "div58",
    "div59",
    "div60",
    "div61",
    "div62",
    "strawberry2",
    "div63",
    "div64",
    "div65",
    "vanila2",
    "div66",
    "aget2",
    "fingericonpng6",
    "paymentcardpng2",
    "faQs2",
    "div67",
    "div68",
    "div69",
    "div70",
    "div71",
    "div72",
    "div73",
    "starpng7",
    "rated49StarsBy100000Customers4",
    "h33",
    "soWhatAre2",
    "takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2",
    "aget3",
    "fingericonpng7"
  ],
  div43: [
    "div43",
    "div44",
    "aget12",
    "fingericonpng5",
    "div45",
    "starpng6",
    "rated49StarsBy100000Customers3",
    "a3",
    "fingericonpng4"
  ],
  div44: [
    "div44",
    "aget12",
    "fingericonpng5",
    "div45",
    "starpng6",
    "rated49StarsBy100000Customers3",
    "a3",
    "fingericonpng4"
  ],
  aget12: ["aget12", "fingericonpng5"],
  fingericonpng5: ["fingericonpng5"],
  div45: ["div45", "starpng6", "rated49StarsBy100000Customers3"],
  starpng6: ["starpng6"],
  rated49StarsBy100000Customers3: ["rated49StarsBy100000Customers3"],
  a3: ["a3", "fingericonpng4"],
  fingericonpng4: ["fingericonpng4"],
  div46: [
    "div46",
    "div47",
    "div48",
    "div49",
    "div50",
    "nwMobbrand1Png",
    "nwMobbrand2Png",
    "nwMobbrand3Png",
    "midbannerjpg2",
    "whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2",
    "withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2",
    "youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2",
    "sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2",
    "areYouOneOfTheseTwoTypesOfPeople",
    "div51",
    "div52",
    "div53",
    "sparqHasTheAnswersYoureLookingFor",
    "ul2",
    "li7",
    "getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit",
    "li8",
    "satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals",
    "li9",
    "replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals",
    "li10",
    "promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation",
    "li11",
    "enjoyAHealthierAlternativeWithoutGivingUpYourHabit",
    "li12",
    "tbody2",
    "tr7",
    "th4",
    "th5",
    "th6",
    "tr8",
    "td16",
    "td17",
    "tickpng6",
    "td18",
    "crosspng6",
    "tr9",
    "td19",
    "td20",
    "tickpng7",
    "td21",
    "crosspng7",
    "tr10",
    "td22",
    "td23",
    "tickpng8",
    "td24",
    "crosspng8",
    "tr11",
    "td25",
    "td26",
    "tickpng9",
    "td27",
    "crosspng9",
    "tr12",
    "td28",
    "td29",
    "tickpng10",
    "td30",
    "crosspng10",
    "happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2",
    "reviewjpg2",
    "nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2",
    "youCanHaveBothAndAPlusOneForFree2",
    "divprodarea2",
    "div54",
    "div55",
    "prodimagepng2",
    "div56",
    "buy2Get2",
    "free2",
    "div57",
    "div58",
    "div59",
    "div60",
    "div61",
    "div62",
    "strawberry2",
    "div63",
    "div64",
    "div65",
    "vanila2",
    "div66",
    "aget2",
    "fingericonpng6",
    "paymentcardpng2",
    "faQs2",
    "div67",
    "div68",
    "div69",
    "div70",
    "div71",
    "div72",
    "div73",
    "starpng7",
    "rated49StarsBy100000Customers4",
    "h33",
    "soWhatAre2",
    "takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2",
    "aget3",
    "fingericonpng7"
  ],
  div47: [
    "div47",
    "div48",
    "div49",
    "div50",
    "nwMobbrand1Png",
    "nwMobbrand2Png",
    "nwMobbrand3Png",
    "midbannerjpg2",
    "whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2",
    "withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2",
    "youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2",
    "sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2",
    "areYouOneOfTheseTwoTypesOfPeople",
    "div51",
    "div52",
    "div53",
    "sparqHasTheAnswersYoureLookingFor",
    "ul2",
    "li7",
    "getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit",
    "li8",
    "satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals",
    "li9",
    "replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals",
    "li10",
    "promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation",
    "li11",
    "enjoyAHealthierAlternativeWithoutGivingUpYourHabit",
    "li12",
    "tbody2",
    "tr7",
    "th4",
    "th5",
    "th6",
    "tr8",
    "td16",
    "td17",
    "tickpng6",
    "td18",
    "crosspng6",
    "tr9",
    "td19",
    "td20",
    "tickpng7",
    "td21",
    "crosspng7",
    "tr10",
    "td22",
    "td23",
    "tickpng8",
    "td24",
    "crosspng8",
    "tr11",
    "td25",
    "td26",
    "tickpng9",
    "td27",
    "crosspng9",
    "tr12",
    "td28",
    "td29",
    "tickpng10",
    "td30",
    "crosspng10",
    "happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2",
    "reviewjpg2",
    "nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2",
    "youCanHaveBothAndAPlusOneForFree2",
    "divprodarea2",
    "div54",
    "div55",
    "prodimagepng2",
    "div56",
    "buy2Get2",
    "free2",
    "div57",
    "div58",
    "div59",
    "div60",
    "div61",
    "div62",
    "strawberry2",
    "div63",
    "div64",
    "div65",
    "vanila2",
    "div66",
    "aget2",
    "fingericonpng6",
    "paymentcardpng2",
    "faQs2",
    "div67",
    "div68",
    "div69",
    "div70",
    "div71"
  ],
  div48: [
    "div48",
    "div49",
    "div50",
    "nwMobbrand1Png",
    "nwMobbrand2Png",
    "nwMobbrand3Png"
  ],
  div49: [
    "div49",
    "div50",
    "nwMobbrand1Png",
    "nwMobbrand2Png",
    "nwMobbrand3Png"
  ],
  div50: ["div50", "nwMobbrand1Png", "nwMobbrand2Png", "nwMobbrand3Png"],
  nwMobbrand1Png: ["nwMobbrand1Png"],
  nwMobbrand2Png: ["nwMobbrand2Png"],
  nwMobbrand3Png: ["nwMobbrand3Png"],
  midbannerjpg2: ["midbannerjpg2"],
  whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2:
    [
      "whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2"
    ],
  withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2:
    [
      "withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2"
    ],
  youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2:
    [
      "youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2"
    ],
  sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2:
    [
      "sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2"
    ],
  areYouOneOfTheseTwoTypesOfPeople: ["areYouOneOfTheseTwoTypesOfPeople"],
  div51: ["div51", "div52", "div53"],
  div52: ["div52"],
  div53: ["div53"],
  sparqHasTheAnswersYoureLookingFor: ["sparqHasTheAnswersYoureLookingFor"],
  ul2: [
    "ul2",
    "li7",
    "getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit",
    "li8",
    "satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals",
    "li9",
    "replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals",
    "li10",
    "promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation",
    "li11",
    "enjoyAHealthierAlternativeWithoutGivingUpYourHabit",
    "li12"
  ],
  li7: [
    "li7",
    "getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit"
  ],
  getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit:
    [
      "getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit"
    ],
  li8: [
    "li8",
    "satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals"
  ],
  satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals: [
    "satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals"
  ],
  li9: [
    "li9",
    "replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals"
  ],
  replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals: [
    "replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals"
  ],
  li10: [
    "li10",
    "promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation"
  ],
  promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation: [
    "promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation"
  ],
  li11: ["li11", "enjoyAHealthierAlternativeWithoutGivingUpYourHabit"],
  enjoyAHealthierAlternativeWithoutGivingUpYourHabit: [
    "enjoyAHealthierAlternativeWithoutGivingUpYourHabit"
  ],
  li12: ["li12"],
  tbody2: [
    "tbody2",
    "tr7",
    "th4",
    "th5",
    "th6",
    "tr8",
    "td16",
    "td17",
    "tickpng6",
    "td18",
    "crosspng6",
    "tr9",
    "td19",
    "td20",
    "tickpng7",
    "td21",
    "crosspng7",
    "tr10",
    "td22",
    "td23",
    "tickpng8",
    "td24",
    "crosspng8",
    "tr11",
    "td25",
    "td26",
    "tickpng9",
    "td27",
    "crosspng9",
    "tr12",
    "td28",
    "td29",
    "tickpng10",
    "td30",
    "crosspng10"
  ],
  tr7: ["tr7", "th4", "th5", "th6"],
  th4: ["th4"],
  th5: ["th5"],
  th6: ["th6"],
  tr8: ["tr8", "td16", "td17", "tickpng6", "td18", "crosspng6"],
  td16: ["td16"],
  td17: ["td17", "tickpng6"],
  tickpng6: ["tickpng6"],
  td18: ["td18", "crosspng6"],
  crosspng6: ["crosspng6"],
  tr9: ["tr9", "td19", "td20", "tickpng7", "td21", "crosspng7"],
  td19: ["td19"],
  td20: ["td20", "tickpng7"],
  tickpng7: ["tickpng7"],
  td21: ["td21", "crosspng7"],
  crosspng7: ["crosspng7"],
  tr10: ["tr10", "td22", "td23", "tickpng8", "td24", "crosspng8"],
  td22: ["td22"],
  td23: ["td23", "tickpng8"],
  tickpng8: ["tickpng8"],
  td24: ["td24", "crosspng8"],
  crosspng8: ["crosspng8"],
  tr11: ["tr11", "td25", "td26", "tickpng9", "td27", "crosspng9"],
  td25: ["td25"],
  td26: ["td26", "tickpng9"],
  tickpng9: ["tickpng9"],
  td27: ["td27", "crosspng9"],
  crosspng9: ["crosspng9"],
  tr12: ["tr12", "td28", "td29", "tickpng10", "td30", "crosspng10"],
  td28: ["td28"],
  td29: ["td29", "tickpng10"],
  tickpng10: ["tickpng10"],
  td30: ["td30", "crosspng10"],
  crosspng10: ["crosspng10"],
  happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2:
    [
      "happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2"
    ],
  reviewjpg2: ["reviewjpg2"],
  nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2: [
    "nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2"
  ],
  youCanHaveBothAndAPlusOneForFree2: ["youCanHaveBothAndAPlusOneForFree2"],
  divprodarea2: [
    "divprodarea2",
    "div54",
    "div55",
    "prodimagepng2",
    "div56",
    "buy2Get2",
    "free2",
    "div57",
    "div58",
    "div59",
    "div60",
    "div61",
    "div62",
    "strawberry2",
    "div63",
    "div64",
    "div65",
    "vanila2",
    "div66",
    "aget2",
    "fingericonpng6",
    "paymentcardpng2"
  ],
  div54: [
    "div54",
    "div55",
    "prodimagepng2",
    "div56",
    "buy2Get2",
    "free2",
    "div57",
    "div58",
    "div59",
    "div60",
    "div61",
    "div62",
    "strawberry2",
    "div63",
    "div64",
    "div65",
    "vanila2"
  ],
  div55: ["div55", "prodimagepng2", "div56", "buy2Get2", "free2"],
  prodimagepng2: ["prodimagepng2"],
  div56: ["div56", "buy2Get2", "free2"],
  buy2Get2: ["buy2Get2"],
  free2: ["free2"],
  div57: [
    "div57",
    "div58",
    "div59",
    "div60",
    "div61",
    "div62",
    "strawberry2",
    "div63",
    "div64",
    "div65",
    "vanila2"
  ],
  div58: [
    "div58",
    "div59",
    "div60",
    "div61",
    "div62",
    "strawberry2",
    "div63",
    "div64",
    "div65",
    "vanila2"
  ],
  div59: [
    "div59",
    "div60",
    "div61",
    "div62",
    "strawberry2",
    "div63",
    "div64",
    "div65",
    "vanila2"
  ],
  div60: ["div60", "div61", "div62", "strawberry2"],
  div61: ["div61", "div62"],
  div62: ["div62"],
  strawberry2: ["strawberry2"],
  div63: ["div63", "div64", "div65", "vanila2"],
  div64: ["div64", "div65"],
  div65: ["div65"],
  vanila2: ["vanila2"],
  div66: ["div66", "aget2", "fingericonpng6", "paymentcardpng2"],
  aget2: ["aget2", "fingericonpng6"],
  fingericonpng6: ["fingericonpng6"],
  paymentcardpng2: ["paymentcardpng2"],
  faQs2: ["faQs2"],
  div67: ["div67"],
  div68: ["div68"],
  div69: ["div69"],
  div70: ["div70"],
  div71: ["div71"],
  div72: [
    "div72",
    "div73",
    "starpng7",
    "rated49StarsBy100000Customers4",
    "h33",
    "soWhatAre2",
    "takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2",
    "aget3",
    "fingericonpng7"
  ],
  div73: [
    "div73",
    "starpng7",
    "rated49StarsBy100000Customers4",
    "h33",
    "soWhatAre2",
    "takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2",
    "aget3",
    "fingericonpng7"
  ],
  starpng7: ["starpng7"],
  rated49StarsBy100000Customers4: ["rated49StarsBy100000Customers4"],
  h33: ["h33", "soWhatAre2"],
  soWhatAre2: ["soWhatAre2"],
  takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2: [
    "takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2"
  ],
  aget3: ["aget3", "fingericonpng7"],
  fingericonpng7: ["fingericonpng7"],
  div74: ["div74", "logopng4", "copyrights2022AllRightsReserved2", "div75"],
  logopng4: ["logopng4"],
  copyrights2022AllRightsReserved2: ["copyrights2022AllRightsReserved2"],
  div75: ["div75"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  nav: "div";
  columns: "div";
  logo: typeof p.PlasmicImg;
  aSlogan: "div";
  intro: "div";
  heroHeadline: "div";
  heroSubHeadline: "div";
  aCta: "a";
  reviewIcon2: typeof p.PlasmicImg;
  reviewStatement2: "div";
  body: "div";
  articleBody: "div";
  press: "div";
  pressIcons: typeof p.PlasmicImg;
  heroImage: typeof p.PlasmicImg;
  paragraph1: "div";
  h21: "div";
  paragraph2: "div";
  h22: "div";
  image2: typeof p.PlasmicImg;
  paragraph3: "div";
  h23: "div";
  image3: typeof p.PlasmicImg;
  paragraph4: "div";
  h24: "div";
  image4: typeof p.PlasmicImg;
  review1: "div";
  paragraph42: "div";
  paragraph43: "div";
  paragraph44: "div";
  review2: "div";
  paragraph45: "div";
  paragraph46: "div";
  paragraph47: "div";
  review3: "div";
  paragraph48: "div";
  paragraph49: "div";
  paragraph410: "div";
  h25: "div";
  h35: "div";
  offer2: typeof Offer2;
  offerH2: "div";
  offerParagraph: "div";
  image5: typeof p.PlasmicImg;
  paragraph6: "div";
  h26: "div";
  image6: typeof p.PlasmicImg;
  paragraph7: "div";
  h27: "div";
  image7: typeof p.PlasmicImg;
  aOutroH1: "a";
  aCta2: "a";
  aOutroH2: "div";
  reviewIcon: typeof p.PlasmicImg;
  aOutroH3: "div";
  aOutroImage: typeof p.PlasmicImg;
  reviewMugshot1: typeof p.PlasmicImg;
  reviewName1: "div";
  reviewIcon3: typeof p.PlasmicImg;
  reviewH11: "div";
  reviewP1: "div";
  reviewMugshot2: typeof p.PlasmicImg;
  reviewName2: "div";
  reviewIcon4: typeof p.PlasmicImg;
  reviewH12: "div";
  reviewP2: "div";
  reviewMugshot3: typeof p.PlasmicImg;
  reviewName3: "div";
  reviewIcon5: typeof p.PlasmicImg;
  reviewH122: "div";
  reviewP3: "div";
  reviewIcon6: typeof p.PlasmicImg;
  reviewStatement: "div";
  ctaCardH1: "div";
  ctaCardH2: "div";
  aCta3: "a";
  httpRestApiFetcher: typeof DataFetcher;
  _1554Px: "div";
  div2: "div";
  div3: "div";
  div4: "div";
  h1: "div";
  div5: "div";
  rated49StarsBy100000Customers: "div";
  button: "button";
  fingericonpng: "div";
  div6: "div";
  bodyArticle1: typeof BodyArticle1;
  div30: "div";
  div31: "div";
  div32: "div";
  sidereview1Png: "div";
  starpng2: "div";
  bestAlternativeToSmoking: "div";
  iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife: "div";
  div33: "div";
  div34: "div";
  sidereview2Png: "div";
  starpng3: "div";
  awesome: "div";
  excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe: "div";
  div36: "div";
  div37: "div";
  sidereview3Png: "div";
  starpng4: "div";
  loveLove: "div";
  p: "div";
  br4: "div";
  br5: "div";
  _414Px: "div";
  div41: "div";
  logopng3: "div";
  thisIsAnAdvertorial2: "div";
  div42: "div";
  div43: "div";
  div44: "div";
  aget12: "div";
  fingericonpng5: "div";
  div45: "div";
  starpng6: "div";
  rated49StarsBy100000Customers3: "div";
  a3: "div";
  fingericonpng4: "div";
  div46: "div";
  div47: "div";
  div48: "div";
  div49: "div";
  div50: "div";
  nwMobbrand1Png: "div";
  nwMobbrand2Png: "div";
  nwMobbrand3Png: "div";
  midbannerjpg2: "div";
  whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2: "div";
  withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2: "div";
  youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2: "div";
  sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2: "div";
  areYouOneOfTheseTwoTypesOfPeople: "div";
  div51: "div";
  div52: "div";
  div53: "div";
  sparqHasTheAnswersYoureLookingFor: "div";
  ul2: "div";
  li7: "div";
  getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit: "div";
  li8: "div";
  satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals: "div";
  li9: "div";
  replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals: "div";
  li10: "div";
  promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation: "div";
  li11: "div";
  enjoyAHealthierAlternativeWithoutGivingUpYourHabit: "div";
  li12: "div";
  tbody2: "div";
  tr7: "div";
  th4: "div";
  th5: "div";
  th6: "div";
  tr8: "div";
  td16: "div";
  td17: "div";
  tickpng6: "div";
  td18: "div";
  crosspng6: "div";
  tr9: "div";
  td19: "div";
  td20: "div";
  tickpng7: "div";
  td21: "div";
  crosspng7: "div";
  tr10: "div";
  td22: "div";
  td23: "div";
  tickpng8: "div";
  td24: "div";
  crosspng8: "div";
  tr11: "div";
  td25: "div";
  td26: "div";
  tickpng9: "div";
  td27: "div";
  crosspng9: "div";
  tr12: "div";
  td28: "div";
  td29: "div";
  tickpng10: "div";
  td30: "div";
  crosspng10: "div";
  happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2: "div";
  reviewjpg2: "div";
  nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2: "div";
  youCanHaveBothAndAPlusOneForFree2: "div";
  divprodarea2: "div";
  div54: "div";
  div55: "div";
  prodimagepng2: "div";
  div56: "div";
  buy2Get2: "div";
  free2: "div";
  div57: "div";
  div58: "div";
  div59: "div";
  div60: "div";
  div61: "div";
  div62: "div";
  strawberry2: "div";
  div63: "div";
  div64: "div";
  div65: "div";
  vanila2: "div";
  div66: "div";
  aget2: "div";
  fingericonpng6: "div";
  paymentcardpng2: "div";
  faQs2: "div";
  div67: "div";
  div68: "div";
  div69: "div";
  div70: "div";
  div71: "div";
  div72: "div";
  div73: "div";
  starpng7: "div";
  rated49StarsBy100000Customers4: "div";
  h33: "div";
  soWhatAre2: "div";
  takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2: "div";
  aget3: "div";
  fingericonpng7: "div";
  div74: "div";
  logopng4: "div";
  copyrights2022AllRightsReserved2: "div";
  div75: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticleInfo2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticleInfo2__VariantsArgs;
    args?: PlasmicArticleInfo2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicArticleInfo2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicArticleInfo2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicArticleInfo2__ArgProps,
          internalVariantPropNames: PlasmicArticleInfo2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicArticleInfo2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticleInfo2";
  } else {
    func.displayName = `PlasmicArticleInfo2.${nodeName}`;
  }
  return func;
}

export const PlasmicArticleInfo2 = Object.assign(
  // Top-level PlasmicArticleInfo2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nav: makeNodeComponent("nav"),
    columns: makeNodeComponent("columns"),
    logo: makeNodeComponent("logo"),
    aSlogan: makeNodeComponent("aSlogan"),
    intro: makeNodeComponent("intro"),
    heroHeadline: makeNodeComponent("heroHeadline"),
    heroSubHeadline: makeNodeComponent("heroSubHeadline"),
    aCta: makeNodeComponent("aCta"),
    reviewIcon2: makeNodeComponent("reviewIcon2"),
    reviewStatement2: makeNodeComponent("reviewStatement2"),
    body: makeNodeComponent("body"),
    articleBody: makeNodeComponent("articleBody"),
    press: makeNodeComponent("press"),
    pressIcons: makeNodeComponent("pressIcons"),
    heroImage: makeNodeComponent("heroImage"),
    paragraph1: makeNodeComponent("paragraph1"),
    h21: makeNodeComponent("h21"),
    paragraph2: makeNodeComponent("paragraph2"),
    h22: makeNodeComponent("h22"),
    image2: makeNodeComponent("image2"),
    paragraph3: makeNodeComponent("paragraph3"),
    h23: makeNodeComponent("h23"),
    image3: makeNodeComponent("image3"),
    paragraph4: makeNodeComponent("paragraph4"),
    h24: makeNodeComponent("h24"),
    image4: makeNodeComponent("image4"),
    review1: makeNodeComponent("review1"),
    paragraph42: makeNodeComponent("paragraph42"),
    paragraph43: makeNodeComponent("paragraph43"),
    paragraph44: makeNodeComponent("paragraph44"),
    review2: makeNodeComponent("review2"),
    paragraph45: makeNodeComponent("paragraph45"),
    paragraph46: makeNodeComponent("paragraph46"),
    paragraph47: makeNodeComponent("paragraph47"),
    review3: makeNodeComponent("review3"),
    paragraph48: makeNodeComponent("paragraph48"),
    paragraph49: makeNodeComponent("paragraph49"),
    paragraph410: makeNodeComponent("paragraph410"),
    h25: makeNodeComponent("h25"),
    h35: makeNodeComponent("h35"),
    offer2: makeNodeComponent("offer2"),
    offerH2: makeNodeComponent("offerH2"),
    offerParagraph: makeNodeComponent("offerParagraph"),
    image5: makeNodeComponent("image5"),
    paragraph6: makeNodeComponent("paragraph6"),
    h26: makeNodeComponent("h26"),
    image6: makeNodeComponent("image6"),
    paragraph7: makeNodeComponent("paragraph7"),
    h27: makeNodeComponent("h27"),
    image7: makeNodeComponent("image7"),
    aOutroH1: makeNodeComponent("aOutroH1"),
    aCta2: makeNodeComponent("aCta2"),
    aOutroH2: makeNodeComponent("aOutroH2"),
    reviewIcon: makeNodeComponent("reviewIcon"),
    aOutroH3: makeNodeComponent("aOutroH3"),
    aOutroImage: makeNodeComponent("aOutroImage"),
    reviewMugshot1: makeNodeComponent("reviewMugshot1"),
    reviewName1: makeNodeComponent("reviewName1"),
    reviewIcon3: makeNodeComponent("reviewIcon3"),
    reviewH11: makeNodeComponent("reviewH11"),
    reviewP1: makeNodeComponent("reviewP1"),
    reviewMugshot2: makeNodeComponent("reviewMugshot2"),
    reviewName2: makeNodeComponent("reviewName2"),
    reviewIcon4: makeNodeComponent("reviewIcon4"),
    reviewH12: makeNodeComponent("reviewH12"),
    reviewP2: makeNodeComponent("reviewP2"),
    reviewMugshot3: makeNodeComponent("reviewMugshot3"),
    reviewName3: makeNodeComponent("reviewName3"),
    reviewIcon5: makeNodeComponent("reviewIcon5"),
    reviewH122: makeNodeComponent("reviewH122"),
    reviewP3: makeNodeComponent("reviewP3"),
    reviewIcon6: makeNodeComponent("reviewIcon6"),
    reviewStatement: makeNodeComponent("reviewStatement"),
    ctaCardH1: makeNodeComponent("ctaCardH1"),
    ctaCardH2: makeNodeComponent("ctaCardH2"),
    aCta3: makeNodeComponent("aCta3"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    _1554Px: makeNodeComponent("_1554Px"),
    div2: makeNodeComponent("div2"),
    div3: makeNodeComponent("div3"),
    div4: makeNodeComponent("div4"),
    h1: makeNodeComponent("h1"),
    div5: makeNodeComponent("div5"),
    rated49StarsBy100000Customers: makeNodeComponent(
      "rated49StarsBy100000Customers"
    ),
    button: makeNodeComponent("button"),
    fingericonpng: makeNodeComponent("fingericonpng"),
    div6: makeNodeComponent("div6"),
    bodyArticle1: makeNodeComponent("bodyArticle1"),
    div30: makeNodeComponent("div30"),
    div31: makeNodeComponent("div31"),
    div32: makeNodeComponent("div32"),
    sidereview1Png: makeNodeComponent("sidereview1Png"),
    starpng2: makeNodeComponent("starpng2"),
    bestAlternativeToSmoking: makeNodeComponent("bestAlternativeToSmoking"),
    iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife:
      makeNodeComponent(
        "iSmokedForOver29YearsAndTiredToQuitSeveralTimesWithNoSuccessUntilICameAcrossSparqNowNotOnlyDoINotSmokeImDoingSomethingHealthyInPlaceGreatProductIllBeAUserForLife"
      ),
    div33: makeNodeComponent("div33"),
    div34: makeNodeComponent("div34"),
    sidereview2Png: makeNodeComponent("sidereview2Png"),
    starpng3: makeNodeComponent("starpng3"),
    awesome: makeNodeComponent("awesome"),
    excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe:
      makeNodeComponent(
        "excellentILoveThisIQuitSmokingCigarettesAndWentToTheSparqILoveThisDeviceItIsNaturalNoNicotineItReallyDoesHelpCalmMe"
      ),
    div36: makeNodeComponent("div36"),
    div37: makeNodeComponent("div37"),
    sidereview3Png: makeNodeComponent("sidereview3Png"),
    starpng4: makeNodeComponent("starpng4"),
    loveLove: makeNodeComponent("loveLove"),
    p: makeNodeComponent("p"),
    br4: makeNodeComponent("br4"),
    br5: makeNodeComponent("br5"),
    _414Px: makeNodeComponent("_414Px"),
    div41: makeNodeComponent("div41"),
    logopng3: makeNodeComponent("logopng3"),
    thisIsAnAdvertorial2: makeNodeComponent("thisIsAnAdvertorial2"),
    div42: makeNodeComponent("div42"),
    div43: makeNodeComponent("div43"),
    div44: makeNodeComponent("div44"),
    aget12: makeNodeComponent("aget12"),
    fingericonpng5: makeNodeComponent("fingericonpng5"),
    div45: makeNodeComponent("div45"),
    starpng6: makeNodeComponent("starpng6"),
    rated49StarsBy100000Customers3: makeNodeComponent(
      "rated49StarsBy100000Customers3"
    ),
    a3: makeNodeComponent("a3"),
    fingericonpng4: makeNodeComponent("fingericonpng4"),
    div46: makeNodeComponent("div46"),
    div47: makeNodeComponent("div47"),
    div48: makeNodeComponent("div48"),
    div49: makeNodeComponent("div49"),
    div50: makeNodeComponent("div50"),
    nwMobbrand1Png: makeNodeComponent("nwMobbrand1Png"),
    nwMobbrand2Png: makeNodeComponent("nwMobbrand2Png"),
    nwMobbrand3Png: makeNodeComponent("nwMobbrand3Png"),
    midbannerjpg2: makeNodeComponent("midbannerjpg2"),
    whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2:
      makeNodeComponent(
        "whenYouMakeTheSwitchToSparqYoureChoosingToGoBeyondYourTypicalInhalationExperience2"
      ),
    withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2:
      makeNodeComponent(
        "withSparqsVitaminAirYouDontHaveToChooseBetweenStayingHealthyAndTreatingYourselfInsteadYouCanLeadAHealthyLifestyleWhileAlsoQuenchingYourThirstForThatTrulySatisfyingHit2"
      ),
    youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2:
      makeNodeComponent(
        "youCanEnjoyDeliciousHittingFlavorsInTheFormOfASlimCompactAndOdorlessDeviceWhileDeliveringNutrientsAndBotanicalsToYourBodyTheyWillGiveYouEnergyMentalClarityBoostYourMetabolismAndProtectYourBodyAgainstAging2"
      ),
    sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2:
      makeNodeComponent(
        "sparqProvidesASatisfyingInhalationExperienceWithoutAnyOfTheHarmfulChemicalsOrStimulants2"
      ),
    areYouOneOfTheseTwoTypesOfPeople: makeNodeComponent(
      "areYouOneOfTheseTwoTypesOfPeople"
    ),
    div51: makeNodeComponent("div51"),
    div52: makeNodeComponent("div52"),
    div53: makeNodeComponent("div53"),
    sparqHasTheAnswersYoureLookingFor: makeNodeComponent(
      "sparqHasTheAnswersYoureLookingFor"
    ),
    ul2: makeNodeComponent("ul2"),
    li7: makeNodeComponent("li7"),
    getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit:
      makeNodeComponent(
        "getRidOfThoseNicotineCravingsWhilstStillEnjoyingThatStrongAndIntenseThroatHit"
      ),
    li8: makeNodeComponent("li8"),
    satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals:
      makeNodeComponent(
        "satisfyYourOralFixationWithoutConsumingToxicSubstancesOrHarmfulChemicals"
      ),
    li9: makeNodeComponent("li9"),
    replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals:
      makeNodeComponent(
        "replaceThoseHarmfulChemicalsWithVitaminsAminoAcidsAndBotanicals"
      ),
    li10: makeNodeComponent("li10"),
    promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation:
      makeNodeComponent(
        "promoteDeepBreathingAndRelieveAnxietyWithEachVitaminInfusedInhalation"
      ),
    li11: makeNodeComponent("li11"),
    enjoyAHealthierAlternativeWithoutGivingUpYourHabit: makeNodeComponent(
      "enjoyAHealthierAlternativeWithoutGivingUpYourHabit"
    ),
    li12: makeNodeComponent("li12"),
    tbody2: makeNodeComponent("tbody2"),
    tr7: makeNodeComponent("tr7"),
    th4: makeNodeComponent("th4"),
    th5: makeNodeComponent("th5"),
    th6: makeNodeComponent("th6"),
    tr8: makeNodeComponent("tr8"),
    td16: makeNodeComponent("td16"),
    td17: makeNodeComponent("td17"),
    tickpng6: makeNodeComponent("tickpng6"),
    td18: makeNodeComponent("td18"),
    crosspng6: makeNodeComponent("crosspng6"),
    tr9: makeNodeComponent("tr9"),
    td19: makeNodeComponent("td19"),
    td20: makeNodeComponent("td20"),
    tickpng7: makeNodeComponent("tickpng7"),
    td21: makeNodeComponent("td21"),
    crosspng7: makeNodeComponent("crosspng7"),
    tr10: makeNodeComponent("tr10"),
    td22: makeNodeComponent("td22"),
    td23: makeNodeComponent("td23"),
    tickpng8: makeNodeComponent("tickpng8"),
    td24: makeNodeComponent("td24"),
    crosspng8: makeNodeComponent("crosspng8"),
    tr11: makeNodeComponent("tr11"),
    td25: makeNodeComponent("td25"),
    td26: makeNodeComponent("td26"),
    tickpng9: makeNodeComponent("tickpng9"),
    td27: makeNodeComponent("td27"),
    crosspng9: makeNodeComponent("crosspng9"),
    tr12: makeNodeComponent("tr12"),
    td28: makeNodeComponent("td28"),
    td29: makeNodeComponent("td29"),
    tickpng10: makeNodeComponent("tickpng10"),
    td30: makeNodeComponent("td30"),
    crosspng10: makeNodeComponent("crosspng10"),
    happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2:
      makeNodeComponent(
        "happyQuittersVitaminLoversAndHealthyChoiceFollowersCantStopTalkingAboutVitaminAir2"
      ),
    reviewjpg2: makeNodeComponent("reviewjpg2"),
    nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2:
      makeNodeComponent(
        "nowYouDontHaveToChooseBetweenEitherStrawberryOrVanillaFlavor2"
      ),
    youCanHaveBothAndAPlusOneForFree2: makeNodeComponent(
      "youCanHaveBothAndAPlusOneForFree2"
    ),
    divprodarea2: makeNodeComponent("divprodarea2"),
    div54: makeNodeComponent("div54"),
    div55: makeNodeComponent("div55"),
    prodimagepng2: makeNodeComponent("prodimagepng2"),
    div56: makeNodeComponent("div56"),
    buy2Get2: makeNodeComponent("buy2Get2"),
    free2: makeNodeComponent("free2"),
    div57: makeNodeComponent("div57"),
    div58: makeNodeComponent("div58"),
    div59: makeNodeComponent("div59"),
    div60: makeNodeComponent("div60"),
    div61: makeNodeComponent("div61"),
    div62: makeNodeComponent("div62"),
    strawberry2: makeNodeComponent("strawberry2"),
    div63: makeNodeComponent("div63"),
    div64: makeNodeComponent("div64"),
    div65: makeNodeComponent("div65"),
    vanila2: makeNodeComponent("vanila2"),
    div66: makeNodeComponent("div66"),
    aget2: makeNodeComponent("aget2"),
    fingericonpng6: makeNodeComponent("fingericonpng6"),
    paymentcardpng2: makeNodeComponent("paymentcardpng2"),
    faQs2: makeNodeComponent("faQs2"),
    div67: makeNodeComponent("div67"),
    div68: makeNodeComponent("div68"),
    div69: makeNodeComponent("div69"),
    div70: makeNodeComponent("div70"),
    div71: makeNodeComponent("div71"),
    div72: makeNodeComponent("div72"),
    div73: makeNodeComponent("div73"),
    starpng7: makeNodeComponent("starpng7"),
    rated49StarsBy100000Customers4: makeNodeComponent(
      "rated49StarsBy100000Customers4"
    ),
    h33: makeNodeComponent("h33"),
    soWhatAre2: makeNodeComponent("soWhatAre2"),
    takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2:
      makeNodeComponent(
        "takeTheFirstAndEasiestStepTowardsQuittingAndReceive15OffYourFirstPurchase2"
      ),
    aget3: makeNodeComponent("aget3"),
    fingericonpng7: makeNodeComponent("fingericonpng7"),
    div74: makeNodeComponent("div74"),
    logopng4: makeNodeComponent("logopng4"),
    copyrights2022AllRightsReserved2: makeNodeComponent(
      "copyrights2022AllRightsReserved2"
    ),
    div75: makeNodeComponent("div75"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicArticleInfo2
    internalVariantProps: PlasmicArticleInfo2__VariantProps,
    internalArgProps: PlasmicArticleInfo2__ArgProps
  }
);

export default PlasmicArticleInfo2;
/* prettier-ignore-end */
