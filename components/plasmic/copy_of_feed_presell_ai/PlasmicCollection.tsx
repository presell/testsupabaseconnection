// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oxby7mL3tramyYPU9d77Uw
// Component: OaYayc1YxIO_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import Offer1 from "../../Offer1"; // plasmic-import: R4TVaxDPQDJT/component
import Collection12 from "../../Collection12"; // plasmic-import: ViY6AuzmQbUB/component
import Collection1Cta from "../../Collection1Cta"; // plasmic-import: K9N9h_V9VXXi/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import { useScreenVariants as useScreenVariantscylgZgvvaF7G } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CYLGZgvvaF7G/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_offer_theme_1_component_css from "../offer_theme_1_component/plasmic_offer_theme_1_component.module.css"; // plasmic-import: 8JEXBqjqN3wJGHTHZ9qf9H/projectcss
import projectcss from "./plasmic_copy_of_feed_presell_ai.module.css"; // plasmic-import: oxby7mL3tramyYPU9d77Uw/projectcss
import sty from "./PlasmicCollection.module.css"; // plasmic-import: OaYayc1YxIO_/css

createPlasmicElementProxy;

export type PlasmicCollection__VariantMembers = {};
export type PlasmicCollection__VariantsArgs = {};
type VariantPropType = keyof PlasmicCollection__VariantsArgs;
export const PlasmicCollection__VariantProps = new Array<VariantPropType>();

export type PlasmicCollection__ArgsType = {};
type ArgPropType = keyof PlasmicCollection__ArgsType;
export const PlasmicCollection__ArgProps = new Array<ArgPropType>();

export type PlasmicCollection__OverridesType = {
  root?: p.Flex<"div">;
  httpRestApiFetcher?: p.Flex<typeof DataFetcher>;
  nav2?: p.Flex<"div">;
  logo3?: p.Flex<typeof p.PlasmicImg>;
  aSlogan2?: p.Flex<"div">;
  hiconsH1?: p.Flex<"div">;
  hiconsIcon1?: p.Flex<typeof p.PlasmicImg>;
  hiconsLabel1?: p.Flex<"div">;
  hiconsIcon2?: p.Flex<typeof p.PlasmicImg>;
  hiconsLabel2?: p.Flex<"div">;
  hiconsIcon3?: p.Flex<typeof p.PlasmicImg>;
  hiconsIcon4?: p.Flex<"div">;
  hiconsIcon5?: p.Flex<typeof p.PlasmicImg>;
  hiconsIcon6?: p.Flex<"div">;
  offer?: p.Flex<"div">;
  offer1?: p.Flex<typeof Offer1>;
  offerImage?: p.Flex<typeof p.PlasmicImg>;
  offerVariant1Url?: p.Flex<"a"> & Partial<LinkProps>;
  offerVariant1Image?: p.Flex<typeof p.PlasmicImg>;
  offerVariant1Label?: p.Flex<"div">;
  offerVariant2Url?: p.Flex<"a"> & Partial<LinkProps>;
  offerVariant2Image?: p.Flex<typeof p.PlasmicImg>;
  offerVariant2Label?: p.Flex<"div">;
  offerH1?: p.Flex<"div">;
  offerH2?: p.Flex<"div">;
  offerParagraph?: p.Flex<"div">;
  offerCta?: p.Flex<"div">;
  products?: p.Flex<"div">;
  product1Image?: p.Flex<typeof p.PlasmicImg>;
  product1Name?: p.Flex<"div">;
  product1Reviews?: p.Flex<"div">;
  product1Price?: p.Flex<"div">;
  product1Info?: p.Flex<"div">;
  product2Image?: p.Flex<typeof p.PlasmicImg>;
  product2Name?: p.Flex<"div">;
  product1Reviews2?: p.Flex<"div">;
  product2Price?: p.Flex<"div">;
  product1Info2?: p.Flex<"div">;
  product3Image?: p.Flex<typeof p.PlasmicImg>;
  product3Name?: p.Flex<"div">;
  product1Reviews3?: p.Flex<"div">;
  product3Price?: p.Flex<"div">;
  product1Info3?: p.Flex<"div">;
  embedHtml?: p.Flex<typeof Embed>;
};

export interface DefaultCollectionProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCollection__RenderFunc(props: {
  variants: PlasmicCollection__VariantsArgs;
  args: PlasmicCollection__ArgsType;
  overrides: PlasmicCollection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscylgZgvvaF7G()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_offer_theme_1_component_css.plasmic_tokens,
            sty.root
          )}
        >
          <DataFetcher
            data-plasmic-name={"httpRestApiFetcher"}
            data-plasmic-override={overrides.httpRestApiFetcher}
            className={classNames("__wab_instance", sty.httpRestApiFetcher)}
            dataName={"fetchDyanamicData" as const}
            errorDisplay={
              <ph.DataCtxReader>
                {$ctx => "Error fetching data"}
              </ph.DataCtxReader>
            }
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json",
              Authorization: "Bearer keyVDvhyVSx5Ntbl3"
            }}
            loadingDisplay={
              <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
            }
            method={"GET" as const}
            noLayout={false}
            url={(() => {
              try {
                return (
                  "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS?filterByFormula=slug=" +
                  "'" +
                  $ctx.params.slug +
                  "'"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "https://api.github.com/users/plasmicapp/repos";
                }
                throw e;
              }
            })()}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <div
                    data-plasmic-name={"nav2"}
                    data-plasmic-override={overrides.nav2}
                    className={classNames(projectcss.all, sty.nav2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__pqdAx)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__xdUsV
                        )}
                      >
                        <p.PlasmicImg
                          data-plasmic-name={"logo3"}
                          data-plasmic-override={overrides.logo3}
                          alt={""}
                          className={classNames(sty.logo3)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"125px" as const}
                          loading={"eager" as const}
                          src={(() => {
                            try {
                              return $ctx.fetchedData.records[0].fields.logo[0]
                                .url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "https://site-assets.plasmic.app/32203f47b3f548c263bd85bea8e83af5.png";
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__miZlF
                        )}
                      >
                        <div
                          data-plasmic-name={"aSlogan2"}
                          data-plasmic-override={overrides.aSlogan2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.aSlogan2
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.records[0].fields
                                  .aSlogan;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return '"The Evolution of Inhalation"';
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                  </div>
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oV5FU)}
                    >
                      <div
                        data-plasmic-name={"hiconsH1"}
                        data-plasmic-override={overrides.hiconsH1}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.hiconsH1
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.fetchDyanamicData.records[0].fields
                                .hicons_h1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "BREATHE VITAMIN AIR®";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__z87D
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hpSoN
                          )}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"hiconsIcon1"}
                            data-plasmic-override={overrides.hiconsIcon1}
                            alt={""}
                            className={classNames(sty.hiconsIcon1)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields
                                  .hicons_icon1[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://site-assets.plasmic.app/6e42147b488b5ca87759208eede507e2.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            data-plasmic-name={"hiconsLabel1"}
                            data-plasmic-override={overrides.hiconsLabel1}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.hiconsLabel1
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.hicons_label_1;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "0% Nicotine";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qqeq7
                          )}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"hiconsIcon2"}
                            data-plasmic-override={overrides.hiconsIcon2}
                            alt={""}
                            className={classNames(sty.hiconsIcon2)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields
                                  .hicons_icon_2[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://site-assets.plasmic.app/9d995ea0affc51c4faaeacafd85b5294.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            data-plasmic-name={"hiconsLabel2"}
                            data-plasmic-override={overrides.hiconsLabel2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.hiconsLabel2
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.hicons_label_2;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Lab-Tested";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__avmL
                          )}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"hiconsIcon3"}
                            data-plasmic-override={overrides.hiconsIcon3}
                            alt={""}
                            className={classNames(sty.hiconsIcon3)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields
                                  .hicons_icon_3[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://site-assets.plasmic.app/c7ff4dd82964e5ed55ed8e02cffad8aa.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            data-plasmic-name={"hiconsIcon4"}
                            data-plasmic-override={overrides.hiconsIcon4}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.hiconsIcon4
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.hicons_label_3;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Vitamins";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__f8I6A
                          )}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"hiconsIcon5"}
                            data-plasmic-override={overrides.hiconsIcon5}
                            alt={""}
                            className={classNames(sty.hiconsIcon5)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("32px" as const)
                                : ("45px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"45px" as const}
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields
                                  .hicons_icon_4[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://site-assets.plasmic.app/5c825a2405e0e04e2cec44d1082488b6.png";
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            data-plasmic-name={"hiconsIcon6"}
                            data-plasmic-override={overrides.hiconsIcon6}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.hiconsIcon6
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.hicons_label_4;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Recyclable";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      data-plasmic-name={"offer"}
                      data-plasmic-override={overrides.offer}
                      className={classNames(projectcss.all, sty.offer)}
                    >
                      <Offer1
                        data-plasmic-name={"offer1"}
                        data-plasmic-override={overrides.offer1}
                        className={classNames("__wab_instance", sty.offer1)}
                        slot={
                          <React.Fragment>
                            <p.PlasmicLink
                              data-plasmic-name={"offerVariant1Url"}
                              data-plasmic-override={overrides.offerVariant1Url}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.offerVariant1Url
                              )}
                              component={Link}
                              platform={"nextjs"}
                            >
                              <p.PlasmicImg
                                data-plasmic-name={"offerVariant1Image"}
                                data-plasmic-override={
                                  overrides.offerVariant1Image
                                }
                                alt={""}
                                className={classNames(sty.offerVariant1Image)}
                                displayHeight={"60px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"60px" as const}
                                loading={"lazy" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.offer_variant_image1[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "https://site-assets.plasmic.app/c63d1d2e518b2d80727ede4d7588f173.svg";
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            </p.PlasmicLink>
                            <div
                              data-plasmic-name={"offerVariant1Label"}
                              data-plasmic-override={
                                overrides.offerVariant1Label
                              }
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.offerVariant1Label
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.offer_variant_label1;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Strawberry";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </React.Fragment>
                        }
                        slot2={
                          <React.Fragment>
                            <p.PlasmicLink
                              data-plasmic-name={"offerVariant2Url"}
                              data-plasmic-override={overrides.offerVariant2Url}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.offerVariant2Url
                              )}
                              component={Link}
                              platform={"nextjs"}
                            >
                              <p.PlasmicImg
                                data-plasmic-name={"offerVariant2Image"}
                                data-plasmic-override={
                                  overrides.offerVariant2Image
                                }
                                alt={""}
                                className={classNames(sty.offerVariant2Image)}
                                displayHeight={"60px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"60px" as const}
                                loading={"lazy" as const}
                                src={(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.offer_variant_image2[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "https://site-assets.plasmic.app/eac11844e4f24b6cdb55891eb5d2951d.svg";
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            </p.PlasmicLink>
                            <div
                              data-plasmic-name={"offerVariant2Label"}
                              data-plasmic-override={
                                overrides.offerVariant2Label
                              }
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.offerVariant2Label
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.offer_variant_label2;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Vanilla";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </React.Fragment>
                        }
                        slot3={
                          <div
                            data-plasmic-name={"offerH1"}
                            data-plasmic-override={overrides.offerH1}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.offerH1
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.offer_h1;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "SPECIAL OFFER";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        slot4={
                          <div
                            data-plasmic-name={"offerH2"}
                            data-plasmic-override={overrides.offerH2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.offerH2
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.offer_h2;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "FREE VITAMIN AIR";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        slot5={
                          <div
                            data-plasmic-name={"offerParagraph"}
                            data-plasmic-override={overrides.offerParagraph}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.offerParagraph
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.offer_paragraph;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Money-Back Guarantee: Better Flavor & Harder Hits or Your Money Back.";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        slot6={
                          <div
                            data-plasmic-name={"offerCta"}
                            data-plasmic-override={overrides.offerCta}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.offerCta
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.offer_cta;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "CHOOSE FLAVOR";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___8GTyq
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"offerImage"}
                            data-plasmic-override={overrides.offerImage}
                            alt={""}
                            className={classNames(sty.offerImage)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("auto" as const)
                                : ("423px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields
                                  .offer_image[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://site-assets.plasmic.app/6187c6867888745d6599b0c2b977be87.svg";
                                }
                                throw e;
                              }
                            })()}
                          />
                        </p.PlasmicLink>
                      </Offer1>
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"products"}
                    data-plasmic-override={overrides.products}
                    className={classNames(projectcss.all, sty.products)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__u6Z4U)}
                    >
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.column__upnB
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        <Collection12
                          className={classNames(
                            "__wab_instance",
                            sty.collection12__kgfVq
                          )}
                          slot={
                            <div
                              data-plasmic-name={"product1Name"}
                              data-plasmic-override={overrides.product1Name}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.product1Name
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.product_name1;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "VITAMIN AIR 3-PACK";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          slot2={
                            <div
                              data-plasmic-name={"product1Reviews"}
                              data-plasmic-override={overrides.product1Reviews}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.product1Reviews
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.product_reviews1;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "★★★★★ (447)";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          slot3={
                            <div
                              data-plasmic-name={"product1Info"}
                              data-plasmic-override={overrides.product1Info}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.product1Info
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.product_info1;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "(One of each formulation)";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          slot9={
                            <div
                              data-plasmic-name={"product1Price"}
                              data-plasmic-override={overrides.product1Price}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.product1Price
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.product_price1;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "$98 + FREE SHIPPING";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"product1Image"}
                            data-plasmic-override={overrides.product1Image}
                            alt={""}
                            className={classNames(sty.product1Image)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("auto" as const)
                                : ("441px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("100%" as const)
                                : ("387px" as const)
                            }
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields
                                  .product_image1[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://site-assets.plasmic.app/be8255a8ba6cb5bed28691141b0b0f82.png";
                                }
                                throw e;
                              }
                            })()}
                          />
                        </Collection12>
                        <Collection1Cta
                          className={classNames(
                            "__wab_instance",
                            sty.collection1Cta__xoWYo
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gEcgx
                            )}
                          >
                            {"SHOP NOW"}
                          </div>
                        </Collection1Cta>
                      </p.PlasmicLink>
                      {true ? (
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.column__cdieA
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <Collection12
                            className={classNames(
                              "__wab_instance",
                              sty.collection12__jnWl
                            )}
                            slot={
                              <div
                                data-plasmic-name={"product2Name"}
                                data-plasmic-override={overrides.product2Name}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.product2Name
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.product_name2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "VITAMIN AIR 3-PACK";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            slot2={
                              <div
                                data-plasmic-name={"product1Reviews2"}
                                data-plasmic-override={
                                  overrides.product1Reviews2
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.product1Reviews2
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.product_reviews2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "★★★★★ (447)";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            slot3={
                              <div
                                data-plasmic-name={"product1Info2"}
                                data-plasmic-override={overrides.product1Info2}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.product1Info2
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.product_info2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "(One of each formulation)";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            slot9={
                              <div
                                data-plasmic-name={"product2Price"}
                                data-plasmic-override={overrides.product2Price}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.product2Price
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.product_price2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "$98 + FREE SHIPPING";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                          >
                            <p.PlasmicImg
                              data-plasmic-name={"product2Image"}
                              data-plasmic-override={overrides.product2Image}
                              alt={""}
                              className={classNames(sty.product2Image)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("auto" as const)
                                  : ("441px" as const)
                              }
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("100%" as const)
                                  : ("387px" as const)
                              }
                              loading={"lazy" as const}
                              src={(() => {
                                try {
                                  return $ctx.fetchDyanamicData.records[0]
                                    .fields.product_image2[0].url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "https://site-assets.plasmic.app/be8255a8ba6cb5bed28691141b0b0f82.png";
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </Collection12>
                          <Collection1Cta
                            className={classNames(
                              "__wab_instance",
                              sty.collection1Cta__sBk9B
                            )}
                          />
                        </p.PlasmicLink>
                      ) : null}
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.column__iv55U
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        <Collection12
                          className={classNames(
                            "__wab_instance",
                            sty.collection12__t4Fx
                          )}
                          slot={
                            <div
                              data-plasmic-name={"product3Name"}
                              data-plasmic-override={overrides.product3Name}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.product3Name
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.product_name3;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "VITAMIN AIR 3-PACK";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          slot2={
                            <div
                              data-plasmic-name={"product1Reviews3"}
                              data-plasmic-override={overrides.product1Reviews3}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.product1Reviews3
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.product_reviews3;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "★★★★★ (447)";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          slot3={
                            <div
                              data-plasmic-name={"product1Info3"}
                              data-plasmic-override={overrides.product1Info3}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.product1Info3
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.product_info3;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "(One of each formulation)";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          slot9={
                            <div
                              data-plasmic-name={"product3Price"}
                              data-plasmic-override={overrides.product3Price}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.product3Price
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.product_price3;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "$98 + FREE SHIPPING";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"product3Image"}
                            data-plasmic-override={overrides.product3Image}
                            alt={""}
                            className={classNames(sty.product3Image)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("auto" as const)
                                : ("441px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("100%" as const)
                                : ("387px" as const)
                            }
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.fetchDyanamicData.records[0].fields
                                  .product_image3[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "https://site-assets.plasmic.app/be8255a8ba6cb5bed28691141b0b0f82.png";
                                }
                                throw e;
                              }
                            })()}
                          />
                        </Collection12>
                        <Collection1Cta
                          className={classNames(
                            "__wab_instance",
                            sty.collection1Cta__ut2Ki
                          )}
                        />
                      </p.PlasmicLink>
                    </div>
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns___1Jxe8
                        )}
                      >
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.column__jUhu3
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <Collection12
                            className={classNames(
                              "__wab_instance",
                              sty.collection12__jjMde
                            )}
                            slot3={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qIdR
                                )}
                              >
                                {"(One of each formulation)"}
                              </div>
                            }
                          />

                          <Collection1Cta
                            className={classNames(
                              "__wab_instance",
                              sty.collection1Cta__giJg
                            )}
                          >
                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__a9LLw
                              )}
                              component={Link}
                              platform={"nextjs"}
                            >
                              {"SHOP NOW"}
                            </p.PlasmicLink>
                          </Collection1Cta>
                        </p.PlasmicLink>
                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.column__mlC0
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <Collection12
                            className={classNames(
                              "__wab_instance",
                              sty.collection12__vyEUa
                            )}
                            slot3={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fgZaD
                                )}
                              >
                                {"(One of each formulation)"}
                              </div>
                            }
                          />

                          <Collection1Cta
                            className={classNames(
                              "__wab_instance",
                              sty.collection1Cta__m4PNd
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sfphP
                              )}
                            >
                              {"SHOP NOW"}
                            </div>
                          </Collection1Cta>
                        </p.PlasmicLink>
                        {true ? (
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.column__zyR9D
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <Collection12
                              className={classNames(
                                "__wab_instance",
                                sty.collection12__cRqq
                              )}
                              slot3={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__sgty2
                                  )}
                                >
                                  {"(One of each formulation)"}
                                </div>
                              }
                            />

                            <Collection1Cta
                              className={classNames(
                                "__wab_instance",
                                sty.collection1Cta___5HYpt
                              )}
                            />
                          </p.PlasmicLink>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                    code={(() => {
                      try {
                        return $ctx.fetchDyanamicData.records[0].fields[
                          "scripts (from Brands)"
                        ][0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </DataFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "httpRestApiFetcher",
    "nav2",
    "logo3",
    "aSlogan2",
    "hiconsH1",
    "hiconsIcon1",
    "hiconsLabel1",
    "hiconsIcon2",
    "hiconsLabel2",
    "hiconsIcon3",
    "hiconsIcon4",
    "hiconsIcon5",
    "hiconsIcon6",
    "offer",
    "offer1",
    "offerImage",
    "offerVariant1Url",
    "offerVariant1Image",
    "offerVariant1Label",
    "offerVariant2Url",
    "offerVariant2Image",
    "offerVariant2Label",
    "offerH1",
    "offerH2",
    "offerParagraph",
    "offerCta",
    "products",
    "product1Image",
    "product1Name",
    "product1Reviews",
    "product1Price",
    "product1Info",
    "product2Image",
    "product2Name",
    "product1Reviews2",
    "product2Price",
    "product1Info2",
    "product3Image",
    "product3Name",
    "product1Reviews3",
    "product3Price",
    "product1Info3",
    "embedHtml"
  ],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "nav2",
    "logo3",
    "aSlogan2",
    "hiconsH1",
    "hiconsIcon1",
    "hiconsLabel1",
    "hiconsIcon2",
    "hiconsLabel2",
    "hiconsIcon3",
    "hiconsIcon4",
    "hiconsIcon5",
    "hiconsIcon6",
    "offer",
    "offer1",
    "offerImage",
    "offerVariant1Url",
    "offerVariant1Image",
    "offerVariant1Label",
    "offerVariant2Url",
    "offerVariant2Image",
    "offerVariant2Label",
    "offerH1",
    "offerH2",
    "offerParagraph",
    "offerCta",
    "products",
    "product1Image",
    "product1Name",
    "product1Reviews",
    "product1Price",
    "product1Info",
    "product2Image",
    "product2Name",
    "product1Reviews2",
    "product2Price",
    "product1Info2",
    "product3Image",
    "product3Name",
    "product1Reviews3",
    "product3Price",
    "product1Info3",
    "embedHtml"
  ],
  nav2: ["nav2", "logo3", "aSlogan2"],
  logo3: ["logo3"],
  aSlogan2: ["aSlogan2"],
  hiconsH1: ["hiconsH1"],
  hiconsIcon1: ["hiconsIcon1"],
  hiconsLabel1: ["hiconsLabel1"],
  hiconsIcon2: ["hiconsIcon2"],
  hiconsLabel2: ["hiconsLabel2"],
  hiconsIcon3: ["hiconsIcon3"],
  hiconsIcon4: ["hiconsIcon4"],
  hiconsIcon5: ["hiconsIcon5"],
  hiconsIcon6: ["hiconsIcon6"],
  offer: [
    "offer",
    "offer1",
    "offerImage",
    "offerVariant1Url",
    "offerVariant1Image",
    "offerVariant1Label",
    "offerVariant2Url",
    "offerVariant2Image",
    "offerVariant2Label",
    "offerH1",
    "offerH2",
    "offerParagraph",
    "offerCta"
  ],
  offer1: [
    "offer1",
    "offerImage",
    "offerVariant1Url",
    "offerVariant1Image",
    "offerVariant1Label",
    "offerVariant2Url",
    "offerVariant2Image",
    "offerVariant2Label",
    "offerH1",
    "offerH2",
    "offerParagraph",
    "offerCta"
  ],
  offerImage: ["offerImage"],
  offerVariant1Url: ["offerVariant1Url", "offerVariant1Image"],
  offerVariant1Image: ["offerVariant1Image"],
  offerVariant1Label: ["offerVariant1Label"],
  offerVariant2Url: ["offerVariant2Url", "offerVariant2Image"],
  offerVariant2Image: ["offerVariant2Image"],
  offerVariant2Label: ["offerVariant2Label"],
  offerH1: ["offerH1"],
  offerH2: ["offerH2"],
  offerParagraph: ["offerParagraph"],
  offerCta: ["offerCta"],
  products: [
    "products",
    "product1Image",
    "product1Name",
    "product1Reviews",
    "product1Price",
    "product1Info",
    "product2Image",
    "product2Name",
    "product1Reviews2",
    "product2Price",
    "product1Info2",
    "product3Image",
    "product3Name",
    "product1Reviews3",
    "product3Price",
    "product1Info3"
  ],
  product1Image: ["product1Image"],
  product1Name: ["product1Name"],
  product1Reviews: ["product1Reviews"],
  product1Price: ["product1Price"],
  product1Info: ["product1Info"],
  product2Image: ["product2Image"],
  product2Name: ["product2Name"],
  product1Reviews2: ["product1Reviews2"],
  product2Price: ["product2Price"],
  product1Info2: ["product1Info2"],
  product3Image: ["product3Image"],
  product3Name: ["product3Name"],
  product1Reviews3: ["product1Reviews3"],
  product3Price: ["product3Price"],
  product1Info3: ["product1Info3"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpRestApiFetcher: typeof DataFetcher;
  nav2: "div";
  logo3: typeof p.PlasmicImg;
  aSlogan2: "div";
  hiconsH1: "div";
  hiconsIcon1: typeof p.PlasmicImg;
  hiconsLabel1: "div";
  hiconsIcon2: typeof p.PlasmicImg;
  hiconsLabel2: "div";
  hiconsIcon3: typeof p.PlasmicImg;
  hiconsIcon4: "div";
  hiconsIcon5: typeof p.PlasmicImg;
  hiconsIcon6: "div";
  offer: "div";
  offer1: typeof Offer1;
  offerImage: typeof p.PlasmicImg;
  offerVariant1Url: "a";
  offerVariant1Image: typeof p.PlasmicImg;
  offerVariant1Label: "div";
  offerVariant2Url: "a";
  offerVariant2Image: typeof p.PlasmicImg;
  offerVariant2Label: "div";
  offerH1: "div";
  offerH2: "div";
  offerParagraph: "div";
  offerCta: "div";
  products: "div";
  product1Image: typeof p.PlasmicImg;
  product1Name: "div";
  product1Reviews: "div";
  product1Price: "div";
  product1Info: "div";
  product2Image: typeof p.PlasmicImg;
  product2Name: "div";
  product1Reviews2: "div";
  product2Price: "div";
  product1Info2: "div";
  product3Image: typeof p.PlasmicImg;
  product3Name: "div";
  product1Reviews3: "div";
  product3Price: "div";
  product1Info3: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCollection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCollection__VariantsArgs;
    args?: PlasmicCollection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCollection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCollection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCollection__ArgProps,
          internalVariantPropNames: PlasmicCollection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCollection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCollection";
  } else {
    func.displayName = `PlasmicCollection.${nodeName}`;
  }
  return func;
}

export const PlasmicCollection = Object.assign(
  // Top-level PlasmicCollection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    nav2: makeNodeComponent("nav2"),
    logo3: makeNodeComponent("logo3"),
    aSlogan2: makeNodeComponent("aSlogan2"),
    hiconsH1: makeNodeComponent("hiconsH1"),
    hiconsIcon1: makeNodeComponent("hiconsIcon1"),
    hiconsLabel1: makeNodeComponent("hiconsLabel1"),
    hiconsIcon2: makeNodeComponent("hiconsIcon2"),
    hiconsLabel2: makeNodeComponent("hiconsLabel2"),
    hiconsIcon3: makeNodeComponent("hiconsIcon3"),
    hiconsIcon4: makeNodeComponent("hiconsIcon4"),
    hiconsIcon5: makeNodeComponent("hiconsIcon5"),
    hiconsIcon6: makeNodeComponent("hiconsIcon6"),
    offer: makeNodeComponent("offer"),
    offer1: makeNodeComponent("offer1"),
    offerImage: makeNodeComponent("offerImage"),
    offerVariant1Url: makeNodeComponent("offerVariant1Url"),
    offerVariant1Image: makeNodeComponent("offerVariant1Image"),
    offerVariant1Label: makeNodeComponent("offerVariant1Label"),
    offerVariant2Url: makeNodeComponent("offerVariant2Url"),
    offerVariant2Image: makeNodeComponent("offerVariant2Image"),
    offerVariant2Label: makeNodeComponent("offerVariant2Label"),
    offerH1: makeNodeComponent("offerH1"),
    offerH2: makeNodeComponent("offerH2"),
    offerParagraph: makeNodeComponent("offerParagraph"),
    offerCta: makeNodeComponent("offerCta"),
    products: makeNodeComponent("products"),
    product1Image: makeNodeComponent("product1Image"),
    product1Name: makeNodeComponent("product1Name"),
    product1Reviews: makeNodeComponent("product1Reviews"),
    product1Price: makeNodeComponent("product1Price"),
    product1Info: makeNodeComponent("product1Info"),
    product2Image: makeNodeComponent("product2Image"),
    product2Name: makeNodeComponent("product2Name"),
    product1Reviews2: makeNodeComponent("product1Reviews2"),
    product2Price: makeNodeComponent("product2Price"),
    product1Info2: makeNodeComponent("product1Info2"),
    product3Image: makeNodeComponent("product3Image"),
    product3Name: makeNodeComponent("product3Name"),
    product1Reviews3: makeNodeComponent("product1Reviews3"),
    product3Price: makeNodeComponent("product3Price"),
    product1Info3: makeNodeComponent("product1Info3"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicCollection
    internalVariantProps: PlasmicCollection__VariantProps,
    internalArgProps: PlasmicCollection__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCollection;
/* prettier-ignore-end */
